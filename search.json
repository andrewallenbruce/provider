[{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"missing_information-nppes_npi","dir":"Articles","previous_headings":"","what":"missing_information() != nppes_npi()","title":"CMS Missing Digital Contact Information API","text":"provider appears search results Missing Information API Endpoints entered NPPES NPI Registry.","code":"missing_information(npi = 1144224569) nppes_npi(npi = 1144224569)"},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"nppes_npi-missing_information","dir":"Articles","previous_headings":"","what":"nppes_npi() != missing_information()","title":"CMS Missing Digital Contact Information API","text":"provider Endpoint information NPPES appear Missing Information search results.","code":"nppes_npi(npi = 1144224569) missing_information(npi = 1003000423)"},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"api-data-dictionary","dir":"Articles","previous_headings":"nppes_npi() != missing_information()","what":"API Data Dictionary","title":"CMS Missing Digital Contact Information API","text":"npi provider_name","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"related-links","dir":"Articles","previous_headings":"nppes_npi() != missing_information()","what":"Related Links","title":"CMS Missing Digital Contact Information API","text":"CMS Public Reporting Missing Digital Contact Information Endpoints Information Methodology & Policy","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/geocoding.html","id":"providers-current-practice-address","dir":"Articles","previous_headings":"","what":"Provider’s Current Practice Address","title":"Healthcare Providers: Why Geocode?","text":"","code":"geo_nppes <- nppes_npi(npi = 1760485387)  geo_nppes #> # A tibble: 1 × 15 #>   datetime            outcome enumera…¹ number name  city  state addre…² pract…³ #>   <dttm>              <chr>   <chr>     <chr>  <chr> <chr> <chr> <list>  <list>  #> 1 2023-01-05 11:41:06 results NPI-1     17604… PAUL… MOOS… MN    <df>    <list>  #> # … with 6 more variables: taxonomies <list>, identifiers <list>, #> #   endpoints <list>, other_names <list>, epochs <list>, basic <list>, and #> #   abbreviated variable names ¹​enumeration_type, ²​addresses, #> #   ³​practiceLocations geo_add <- geo_nppes |>    dplyr::select(address_1, city, state, postal_code) |>   dplyr::filter(dplyr::row_number() %in% 1) |>    dplyr::mutate(address_1 = stringr::str_remove_all(address_1, \"\\\\.\")) #> Error in `dplyr::select()`: #> ! Can't subset columns that don't exist. #> ✖ Column `address_1` doesn't exist.  geo_add #> Error in eval(expr, envir, enclos): object 'geo_add' not found geo_ltlg <- geo_add |> tidygeocoder::geocode(street = address_1,                                              city = city,                                              state = state,                                              postalcode = postal_code,                                              method = \"census\",                                              lat = latitude,                                               long = longitude,                                               full_results = TRUE) #> Error in is.data.frame(.tbl): object 'geo_add' not found geo_ltlg #> Error in eval(expr, envir, enclos): object 'geo_ltlg' not found leaflet::leaflet() |>    leaflet::addTiles() |>    leaflet::addMarkers(lng = geo_ltlg$longitude,                        lat = geo_ltlg$latitude) #> Error in resolveFormula(lng, data): object 'geo_ltlg' not found"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"medicare-multiple-chronic-conditions-api","dir":"Articles","previous_headings":"","what":"Medicare Multiple Chronic Conditions API","title":"Medicare Chronic Conditions APIs","text":"Multiple Chronic Conditions dataset provides information number chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories (0-1, 2-3, 4-5 6 ).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"examples","dir":"Articles","previous_headings":"Medicare Multiple Chronic Conditions API","what":"Examples","title":"Medicare Chronic Conditions APIs","text":"","code":"cc_multiple(year = 2018,              geo_lvl = \"State\",              geo_desc = \"California\") |>    dplyr::select(!c(bene_geo_lvl, bene_geo_cd)) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() cc_multiple(year = 2007,              geo_lvl = \"National\",              demo_lvl = \"Race\") |>    dplyr::select(!c(bene_geo_desc, bene_geo_cd)) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider()"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"medicare-specific-chronic-conditions-api","dir":"Articles","previous_headings":"","what":"Medicare Specific Chronic Conditions API","title":"Medicare Chronic Conditions APIs","text":"Select Chronic Conditions dataset provides information 21 selected chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography distinct chronic conditions listed . Alcohol Abuse Drug Abuse / Substance Abuse Alzheimer’s Disease Related Dementia Arthritis (Osteoarthritis Rheumatoid) Asthma Atrial Fibrillation Autism Spectrum Disorders Cancer (Breast, Colorectal, Lung, Prostate) Chronic Kidney Disease Chronic Obstructive Pulmonary Disease Depression Diabetes Drug Abuse / Substance Abuse Heart Failure Hepatitis (Chronic Viral B & C) HIV/AIDS Hyperlipidemia (High cholesterol) Hypertension (High blood pressure) Ischemic Heart Disease Osteoporosis Schizophrenia Psychotic Disorders Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"examples-1","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Examples","title":"Medicare Chronic Conditions APIs","text":"","code":"cc_specific(year = 2018,              geo_lvl = \"State\",              geo_desc = \"California\") |>    dplyr::select(!c(bene_geo_lvl, bene_geo_cd)) |>    dplyr::arrange(dplyr::desc(bene_age_lvl), bene_demo_lvl) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() cc_specific(year = 2007,              geo_lvl = \"National\",              demo_lvl = \"Race\") |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider()"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"data-dictionary","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Data Dictionary","title":"Medicare Chronic Conditions APIs","text":"Bene_Geo_Lvl Beneficiary Geographic Level Bene_Geo_Desc Beneficiary Geographic Description Bene_Geo_Cd Beneficiary Geographic Code Bene_Age_Lvl Beneficiary Age Level Bene_Demo_Lvl Beneficiary Demographic Level Bene_Demo_Desc Beneficiary Demographic Description Bene_MCC Beneficiary Chronic Condition Bene_Cond Beneficiary Multiple Chronic Condition Group Prvlnc Prevalence Tot_Mdcr_Stdzd_Pymt_PC1 Total Medicare Standardized Per Capita Spending Tot_Mdcr_Pymt_PC1 Total Medicare Per Capita Spending Hosp_Readmsn_Rate1 Hospital Readmission Rate ER_Visits_Per_1000_Benes1 Emergency Room Visits per 1,000 Beneficiaries","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"related-links","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Related Links","title":"Medicare Chronic Conditions APIs","text":"Medicare Multiple Chronic Conditions API Medicare Specific Chronic Conditions API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Medicare Public Provider Enrollment API","text":"","code":"provider_enrollment(npi = 1003026055) |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse'"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"data-dictionary","dir":"Articles","previous_headings":"Example","what":"Data Dictionary","title":"Medicare Public Provider Enrollment API","text":"npi pecos_asct_cntl_id enrlmt_id provider_type_cd provider_type_desc state_cd first_name mdl_name last_name org_name gndr_sw reasgn_bnft_enrlmt_id rcv_bnft_enrlmt_id city_name zip_cd","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"provider-type-code-list","dir":"Articles","previous_headings":"Example > Data Dictionary","what":"Provider Type Code List","title":"Medicare Public Provider Enrollment API","text":"00-00 00-01 00-02 00-03 00-04 00-05 00-06 00-07 00-08 00-09 00-10 00-13 00-14 00-17 00-18 00-19 00-85 12-23 12-31 12-45 12-47 12-49 12-59 12-60 12-61 12-63 12-65 12-69 12-70 12-73 12-74 12-75 12-87 12-C0 12-C1 12-Z1 12-Z3 12-Z4 12-Z5 14-01 14-02 14-03 14-04 14-05 14-06 14-07 14-08 14-09 14-10 14-11 14-12 14-13 14-14 14-15 14-16 14-17 14-18 14-19 14-20 14-21 14-22 14-23 14-24 14-25 14-26 14-27 14-28 14-29 14-30 14-32 14-33 14-34 14-35 14-36 14-37 14-38 14-39 14-40 14-41 14-42 14-43 14-44 14-46 14-48 14-50 14-62 14-64 14-65 14-66 14-67 14-68 14-70 14-71 14-72 14-73 14-76 14-77 14-78 14-79 14-80 14-81 14-82 14-83 14-84 14-85 14-86 14-88 14-89 14-90 14-91 14-92 14-93 14-94 14-97 14-98 14-99 14-99 14-C0 14-C3 30-01 30-02 30-03 30-04 30-05 30-06 30-07 30-08 30-11 30-12 30-13 30-14 30-16 30-18 30-19 30-20 30-23 30-24 30-25 30-26 30-29 30-30 30-34 30-35 30-37 30-38 30-40 30-41 30-44 30-46 30-48 30-49 30-50 30-51 30-52 30-53 30-54 30-55 30-56 30-57 30-58 30-59 30-61 30-63 30-64 30-65 30-66 30-67 30-70 30-72 30-76 30-77 30-79 30-82 30-83 30-84 30-85 30-87 30-88 30-89 30-90 30-91 30-92 30-93 30-94 30-95 30-96 30-97 30-99 30-A0 30-A1 30-A2 30-A3 30-A4 30-A5 30-A6 30-A7 30-A8 30-A9 30-B1 30-B2 30-B3 30-B4 30-B5 30-C0 33-01 33-02 33-03 33-04 33-05 33-06 33-07 33-08 33-09 33-10 33-11 33-12 33-13 33-14 33-16 33-17 33-18 33-19 33-20 33-21 33-22 33-23 33-24 33-25 33-26 33-27 33-28 33-29 33-30 33-33 33-34 33-35 33-36 33-37 33-38 33-39 33-40 33-41 33-42 33-43 33-44 33-46 33-48 33-50 33-62 33-66 33-68 33-71 33-72 33-76 33-77 33-78 33-79 33-80 33-81 33-82 33-83 33-84 33-85 33-86 33-88 33-89 33-90 33-91 33-92 33-93 33-94 33-97 33-98 33-99 33-C0 33-C3 53-D1","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"related-links","dir":"Articles","previous_headings":"Example","what":"Related Links","title":"Medicare Public Provider Enrollment API","text":"Medicare Fee--Service Public Provider Enrollment API Medicare Fee--Service Public Provider Enrollment - Data Dictionary Fee--Service Public Provider Enrollment Methodology","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Medicare Monthly Enrollment API","text":"","code":"beneficiary_enrollment(year = 2018,                        month = \"Year\",                        geo_level = \"County\",                        state_abb = \"AL\",                        county = \"Autauga\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' beneficiary_enrollment(year = 2021,                        geo_level = \"County\",                        fips = \"01001\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' beneficiary_enrollment(year = 2022,                        month = \"July\",                        geo_level = \"State\",                        state = \"Georgia\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' beneficiary_enrollment(year = 2017,                        geo_level = \"State\",                        fips = \"10\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse'"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"Medicare Monthly Enrollment API","text":"Year Month Bene_State Bene_County Tot_Benes Orgnl_Mdcr_Benes MA_and_Oth_Benes Aged_Tot_Benes Aged_ESRD_Benes Aged_No_ESRD_Benes Dsbld_Tot_Benes Dsbld_ESRD_and_ESRD_Only_Benes Dsbld_No_ESRD_Benes A_B_Tot_Benes A_B_Orgnl_Mdcr_Benes A_B_MA_and_Oth_Benes Prscrptn_Drug_Tot_Benes Prscrptn_Drug_PDP_Benes Prscrptn_Drug_MAPD_Benes","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"Medicare Monthly Enrollment API","text":"Medicare Monthly Enrollment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Medicare Opt Out Affidavits API","text":"","code":"opt_out(last = \"Aaron\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' opt_out(specialty = \"Psychiatry\", zip = \"07626\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' opt_out(first = \"David\", last = \"Smith\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' opt_out(npi = 1114974490) |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' opt_out(date_start = \"01/30/1998\", date_end = \"01/30/2024\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' opt_out(city = \"Los Angeles\", address = \"9201 W SUNSET BLVD\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse'"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"data-dictionary","dir":"Articles","previous_headings":"Examples","what":"Data Dictionary","title":"Medicare Opt Out Affidavits API","text":"first_name last_name npi specialty optout_effective_date optout_end_date first_line_street_address second_line_street_address city_name state_code zip_code eligible_to_order_and_refer","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"related-links","dir":"Articles","previous_headings":"Examples","what":"Related Links","title":"Medicare Opt Out Affidavits API","text":"Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"order_refer","dir":"Articles","previous_headings":"","what":"order_refer()","title":"Medicare Order and Referring API","text":"","code":"order_refer(npi = 1003026055) |>  gt::gt() |>    provider:::gt_theme_provider() |>    gt::tab_header(title = \"Provider Results for NPI 1083879860\",     subtitle = gtExtras::add_text_img(\"Report generated with\", url = \"https://raw.githubusercontent.com/andrewallenbruce/provider/main/pkgdown/favicon/apple-touch-icon-180x180.png\", height = 25)) |>    gt::text_transform(locations = gt::cells_body(columns = c(partb, dme, hha, pmd)),                      fn = function(x) {                        if (x == as.character(\"TRUE\")) {gt::html(fontawesome::fa(\"circle-check\", prefer_type = \"solid\", fill = \"green\", height = \"1.5em\", width = \"1.5em\"))                          } else if (x == as.character(\"FALSE\")) {gt::html(fontawesome::fa(\"circle-xmark\", prefer_type = \"solid\", fill = \"red\"))                          }                      }                        )"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"data-dictionary","dir":"Articles","previous_headings":"order_refer()","what":"Data Dictionary","title":"Medicare Order and Referring API","text":"npi last_name first_name partb dme hha pmd","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"related-links","dir":"Articles","previous_headings":"order_refer()","what":"Related Links","title":"Medicare Order and Referring API","text":"Medicare Order Referring API CMS.gov: Ordering & Certifying Order Referring Methodology","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Medicare Physician & Other Practitioners APIs","text":"Centers Medicare & Medicaid Services (CMS) prepared public data set, Provider Utilization Payment Data Physician Practitioners Dataset, information services procedures provided Medicare beneficiaries physicians healthcare professionals. Physician Practitioners Dataset contains information utilization, payment (allowed amount Medicare payment), submitted charges organized National Provider Identifier (NPI), Healthcare Common Procedure Coding System (HCPCS) code, place service. data Physician Practitioners dataset contains 100% final-action (.e., claim adjustments resolved) physician/supplier Part B non-institutional line items Medicare fee--service (FFS) population. Claims processed Durable Medical Equipment, Prosthetic, Orthotics Supplies (DMEPOS) Medicare Administrative Contractor (MAC) included Physician Practitioners Dataset.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"key-data-sources","dir":"Articles","previous_headings":"","what":"Key Data Sources","title":"Medicare Physician & Other Practitioners APIs","text":"data Physician Practitioners Dataset based upon CMS administrative claims data Medicare beneficiaries enrolled fee--service program. data available CMS Chronic Condition Data Warehouse (CCW), database 100% Medicare enrollment fee--service claims data. Service counts, beneficiary counts, provider charges, Medicare allowed amounts payments place service indicator summarized Part B non-institutional claims processed Medicare Administrative Contractor (MAC) Jurisdictions (NCH Claim Type Codes ‘71’, ‘72’). Please see CCW website additional information.  Physician Practitioners Dataset data years, provider demographics (name, credentials, gender, complete address entity type) included National Plan & Provider Enumeration System (NPPES). CMS developed NPPES assign unique identifiers, known National Provider Identifiers (NPIs), health care providers. health care provider’s demographic information collected time enrollment updated periodically. demographics information provided Physician Practitioners Dataset extracted NPPES end calendar year following reporting year (e.g. CY2017 reporting year, NPPES data extracted end calendar year 2018). Please visit NPPES website additional information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"population","dir":"Articles","previous_headings":"","what":"Population","title":"Medicare Physician & Other Practitioners APIs","text":"Physician Practitioners Dataset includes data providers valid NPI submitted Medicare Part B non-institutional claims (excluding DMEPOS) reporting period. protect privacy Medicare beneficiaries, aggregated records derived 10 fewer beneficiaries excluded Physician Practitioners Dataset.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"data-limitations","dir":"Articles","previous_headings":"","what":"Data Limitations","title":"Medicare Physician & Other Practitioners APIs","text":"Although Physician Practitioners Dataset wealth payment utilization information many Medicare Part B services, dataset also number limitations worth noting.  First, data Physician Practitioners Dataset may representative physician’s entire practice. data file information Medicare beneficiaries Part B FFS coverage, physicians typically treat many patients form coverage. Physician Practitioners Dataset information patients covered Medicare, coverage federal programs (like Federal Employees Health Benefits Program Tricare), private health insurance (individual policy employer-sponsored coverage), uninsured. Even within Medicare, Physician Practitioners Dataset include information patients enrolled form Medicare Advantage plan.  information presented file also indicate quality care provided individual physicians. file contains cost utilization information, reasons described preceding paragraph, volume procedures presented may fully inclusive procedures performed provider. Medicare allowed amounts Medicare payments given HCPCS code/place service can vary based number factors, including modifiers, geography, services performed day/visit. example, modifiers (two-character designators signal change HCPCS code procedure service applied) may included claim line service intensity increased decreased, additional physician administered services, service provided differs procedure definition. cases, modifiers impact allowed amounts payments. addition, allowed amounts payments vary geographically Medicare makes adjustments services based area’s cost living. Allowed amounts payments can also adjusted physician renders multiple services beneficiary day, referred multiple procedure payment reduction. standard payment allowed amount rates CPT/HCPCS code, please visit Physician fee schedule.  general, provider administers drugs patient, provider purchases drug Medicare pays provider 106% average sales price (ASP) drug. Although ASP list used datasets define drug services, drugs listed ASP fee schedule complete listing drugs paid part B, ASP fee schedule represents majority drugs used office. information payments drugs covered Part B, please visit ASP Drug Pricing.  Additionally, data risk adjusted thus account difference underlying severity disease patient populations treated providers. However, provided average beneficiary risk scores “Medicare Physician Practitioners Provider Dataset” (.e., one record per NPI) provide information health status beneficiaries providers serve. Also, since data presented summarized actual claims received providers attempts made modify data (.e., statistical outliers removed truncated), rare instances average submitted charge amount may reflect errors included claims submitted providers.  noted earlier, file include data services performed 10 fewer beneficiaries, users aware summing data file may underestimate true Part B FFS totals. addition, providers bill individual NPI organizational NPI. case, users determine provider’s actual total way identify individual’s portion billed organization.  Medicare pays differently services provided facility setting versus freestanding physicians’ office (non-facility setting). services delivered facility setting, Medicare makes two payments, one physician’s professional fee one facility. services delivered facility (Place_Of_Srvc = ”F”), data Physician Practitioners Dataset generally represents physician’s professional fee include facility payment. exception services delivered Ambulatory Surgical Centers (ASCs). cases, physician’s professional fee ASC’s fee represented Physician Practitioners Dataset. ASCs can identified using provider type. services delivered non-facility setting, physician’s office (Place_Of_Srvc = ”O”), Physician Practitioners Dataset represents complete payment service.  users try link data file public datasets, please aware particular Medicare populations included timeframes used file merged. example, efforts link Physician Practitioners Dataset data Part D prescription drug data need account fact beneficiaries FFS Part B coverage (thus included Physician Practitioners Dataset) Part D drug coverage (thus represented Part D data files). time, beneficiaries Part D coverage (thus included Part D data) FFS Part B coverage (thus included Physician Practitioners Dataset). Another example linking data constructed different non-aligning time periods, publically available data physician referral patterns, based 18-month period.  Finally, users aware payments CMS demonstration programs included Physician Practitioners Dataset. Since CMS demonstration programs utilize Medicare claims submission process, payments services demonstrations included data file may grouped specific demonstration HCPCS codes aggregated non-demonstration specific HCPCS codes. Demonstration programs paid outside Medicare claims submission process included Physician Practitioners Dataset.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"additional-information","dir":"Articles","previous_headings":"","what":"Additional Information","title":"Medicare Physician & Other Practitioners APIs","text":"Data Sources CMS also releases “Medicare Fee--Service Public Provider Enrollment Data” include provider name address information Provider Enrollment Chain Ownership System (PECOS). data updated quarterly basis available data.cms.gov.  Medicare Standardized Spending Users can find information Medicare payment standardization referring Geographic Variation Methodology available within “Risk adjustment standardization” section following web page: Geographic Variation Methodology.  HCCs (Hierarchical Condition Categories) CMS developed risk-adjustment model uses HCCs (hierarchical condition categories) assign risk scores. scores estimate beneficiaries’ FFS spending compare overall average entire Medicare population. summary average risk scores beneficiaries represented calendar year Medicare Physician & Practitioners - Provider dataset located “Resources’” section following web page: Medicare Physician & Practitioners - Provider. Beneficiaries scores greater average risk score expected -average spending, vice versa. Risk scores based beneficiary’s age sex; whether beneficiary eligible Medicaid, first qualified Medicare basis disability, lives institution (usually nursing home); beneficiary’s diagnoses previous year.  HCC model designed risk adjustment larger populations, enrollees MA plan, generates accurate results used compare groups beneficiaries rather individuals. Please visit HCC risk score information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"dataset-provider","dir":"Articles","previous_headings":"","what":"Dataset: Provider","title":"Medicare Physician & Other Practitioners APIs","text":"Provider data subset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI). dataset based information gathered CMS administrative claims data Original Medicare Part B beneficiaries available CMS Chronic Conditions Data Warehouse. Data update frequency: Annually Data source: Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"data-dictionary","dir":"Articles","previous_headings":"Dataset: Provider","what":"Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_npi rndrng_prvdr_last_org_name rndrng_prvdr_first_name rndrng_prvdr_mi rndrng_prvdr_crdntls rndrng_prvdr_gndr rndrng_prvdr_ent_cd rndrng_prvdr_st1 rndrng_prvdr_st2 rndrng_prvdr_city rndrng_prvdr_state_abrvtn rndrng_prvdr_state_fips rndrng_prvdr_zip5 rndrng_prvdr_ruca rndrng_prvdr_ruca_desc rndrng_prvdr_cntry rndrng_prvdr_type rndrng_prvdr_mdcr_prtcptg_ind tot_hcpcs_cds tot_benes tot_srvcs tot_sbmtd_chrg tot_mdcr_alowd_amt tot_mdcr_pymt_amt tot_mdcr_stdzd_amt drug_sprsn_ind drug_tot_hcpcs_cds drug_tot_benes drug_tot_srvcs drug_sbmtd_chrg drug_mdcr_alowd_amt drug_mdcr_pymt_amt drug_mdcr_stdzd_amt med_sprsn_ind med_tot_hcpcs_cds med_tot_benes med_tot_srvcs med_sbmtd_chrg med_mdcr_alowd_amt med_mdcr_pymt_amt med_mdcr_stdzd_amt bene_avg_age bene_age_lt_65_cnt bene_age_65_74_cnt bene_age_75_84_cnt bene_age_gt_84_cnt bene_feml_cnt bene_male_cnt bene_race_wht_cnt bene_race_black_cnt bene_race_api_cnt bene_race_hspnc_cnt bene_race_natind_cnt bene_race_othr_cnt bene_dual_cnt bene_ndual_cnt bene_cc_af_pct bene_cc_alzhmr_pct bene_cc_asthma_pct bene_cc_cncr_pct bene_cc_chf_pct bene_cc_ckd_pct bene_cc_copd_pct bene_cc_dprssn_pct bene_cc_dbts_pct bene_cc_hyplpdma_pct bene_cc_hyprtnsn_pct bene_cc_ihd_pct bene_cc_opo_pct bene_cc_raoa_pct bene_cc_sz_pct bene_cc_strok_pct bene_avg_risk_scre","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"data-dictionary-1","dir":"Articles","previous_headings":"Dataset: Provider > Dataset: Geography and Service","what":"Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_prvdr_geo_lvl rndrng_prvdr_geo_cd rndrng_prvdr_geo_desc hcpcs_cd hcpcs_desc hcpcs_drug_ind place_of_srvc tot_rndrng_prvdrs tot_srvcs tot_benes tot_bene_day_srvcs avg_sbmtd_chrg avg_mdcr_alowd_amt avg_mdcr_pymt_amt avg_mdcr_stdzd_amt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"dataset-provider-and-service","dir":"Articles","previous_headings":"Dataset: Provider","what":"Dataset: Provider and Service","title":"Medicare Physician & Other Practitioners APIs","text":"spending utilization data Physician Practitioners Provider Service Dataset aggregated following:  NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility).  can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"data-dictionary-2","dir":"Articles","previous_headings":"Dataset: Provider > Dataset: Provider and Service","what":"Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_npi rndrng_prvdr_last_org_name rndrng_prvdr_first_name rndrng_prvdr_mi rndrng_prvdr_crdntls rndrng_prvdr_gndr rndrng_prvdr_ent_cd rndrng_prvdr_st1 rndrng_prvdr_st2 rndrng_prvdr_city rndrng_prvdr_state_abrvtn rndrng_prvdr_state_fips rndrng_prvdr_zip5 rndrng_prvdr_ruca rndrng_prvdr_ruca_desc rndrng_prvdr_cntry rndrng_prvdr_type rndrng_prvdr_mdcr_prtcptg_ind hcpcs_cd hcpcs_desc hcpcs_drug_ind place_of_srvc tot_benes tot_srvcs tot_bene_day_srvcs avg_sbmtd_chrg avg_mdcr_alowd_amt avg_mdcr_pymt_amt avg_mdcr_stdzd_amt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-due-date-list-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Due Date List API","title":"Medicare Revalidation APIs","text":"Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet. lists refreshed every two months two months’ worth due dates appended list.  Revalidation Due Date List dataset contains revalidation due dates Medicare providers due revalidate following six months. provider’s due date fall within ensuing six months, due date marked ‘TBD’. addition dataset also includes subfiles reassignment information given provider well due date listings clinics group practices providers. dataset based information gathered Provider Enrollment, Chain Ownership System (PECOS).  Medicare Revalidation Due Date API Medicare Revalidation Due Date - Data Dictionary","code":"revalidation_date(enroll_id = \"I20031110000070\",                    npi = 1184699621) |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' revalidation_date(first_name = \"Eric\",                    last_name = \"Byrd\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' revalidation_date(state = \"FL\",                    type_code = \"3\",                    specialty = \"General Practice\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse'"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"data-dictionary","dir":"Articles","previous_headings":"Medicare Revalidation Due Date List API","what":"Data Dictionary","title":"Medicare Revalidation APIs","text":"enrollment_id national_provider_identifier first_name last_name organization_name enrollment_state_code enrollment_type provider_type_text enrollment_specialty revalidation_due_date adjusted_due_date individual_total_reassign_to receiving_benefits_reassignment","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-clinic-group-practice-reassignment-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Clinic Group Practice Reassignment API","title":"Medicare Revalidation APIs","text":"","code":"revalidation_group(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' revalidation_group(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse'"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"data-dictionary-1","dir":"Articles","previous_headings":"Medicare Revalidation Clinic Group Practice Reassignment API","what":"Data Dictionary","title":"Medicare Revalidation APIs","text":"group_pac_id group_enrollment_id group_legal_business_name group_state_code group_due_date group_reassignments_and_physician_assistants record_type individual_enrollment_id individual_npi individual_first_name individual_last_name individual_state_code individual_specialty_description individual_due_date individual_total_employer_associations","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-reassignment-list-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Reassignment List API","title":"Medicare Revalidation APIs","text":"Reassignments Providers due Revalidation.  Revalidation Reassignment List dataset provides information reassignments providers due revalidation. Section 6401 () Affordable Care Act established requirement enrolled providers/suppliers revalidate Medicare enrollment information new enrollment screening criteria. CMS completed initial round revalidations resuming regular revalidation cycles accordance 42 CFR §424.515. effort streamline revalidation process reduce provider/supplier burden, CMS implemented several revalidation processing improvements one established due dates Providers must revalidate. Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet.","code":"revalidation_reassign(ind_enroll_id = \"I20200929003184\",                     ind_npi = 1962026229,                     ind_first = \"Rashadda\",                     ind_last = \"Wong\",                     ind_state = \"CT\",                     ind_specialty = \"Physician Assistant\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse'"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"Medicare Revalidation APIs","text":"Medicare Revalidation Reassignment List API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"medicare-provider-and-supplier-taxonomy-crosswalk-api","dir":"Articles","previous_headings":"","what":"Medicare Provider and Supplier Taxonomy Crosswalk API","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"Medicare Provider Supplier Taxonomy Crosswalk dataset lists providers suppliers eligible enroll Medicare programs proper healthcare provider taxonomy code. data includes Medicare speciality codes, available, provider/supplier type description, taxonomy code, taxonomy description. dataset derived information gathered National Plan Provider Enumerator System (NPPES) Provider Enrollment, Chain Ownership System (PECOS). Medicare Provider Supplier Taxonomy Crosswalk","code":"taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse'"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"api-data-dictionary","dir":"Articles","previous_headings":"Medicare Provider and Supplier Taxonomy Crosswalk API","what":"API Data Dictionary","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"medicare_specialty_code medicare_provider_supplier_type_description provider_taxonomy_code provider_taxonomy_description_type_classification_specialization","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"further-reading","dir":"Articles","previous_headings":"Medicare Provider and Supplier Taxonomy Crosswalk API","what":"Further Reading","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"Endpoints Information CMS Public Reporting Missing Digital Contact Information","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"NPPES NPI Registry API","text":"returns tibble containing NPI searched (search), datetime query, outcome status column data_lists, list-column containing collection variables nested data frames:  variables returned follows:  created_epoch: date NPI issued enumeration_type: NPI Entity Type, either NPI-1(individual) NPI-2(organizational) last_updated_epoch: date information last updated provider number: provider’s NPI, listed NPPES  Note: last_updated_epoch / created_epoch dates Unix time. repeated basic list last_updated enumeration_date, respectively.  list-columns returned follows:  basic: Basic information other_names: names used provider addresses: Primary location mailing addresses taxonomies: Specialty classification related information identifiers: Various identifiers payer-specific IDs, CLIA numbers, etc. practice_locations: Provider’s practice locations endpoints: Information regarding provider’s endpoints Health Information Exchange (HIE)  Note: list-columns may available every provider. depends factors NPI type, incorporated individual status, subpart delegation, , quite simply, information provided NPPES providers.","code":"nppes_npi(1114499340) |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse'"},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"api-documentation-overview","dir":"Articles","previous_headings":"","what":"API Documentation Overview","title":"NPPES NPI Registry API","text":"section outlines NPPES API’s documentation, going valid search inputs, constraints inputs, descriptions many possible outputs.","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"enumeration-type","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes","what":"Enumeration Type","title":"NPPES NPI Registry API","text":"Two categories health care providers exist NPI enumeration purposes: Entity Type 1 (Individual) Entity Type 2 (Organizational).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"npi-1-individual","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes > Enumeration Type","what":"NPI-1: Individual","title":"NPPES NPI Registry API","text":"Individual health care providers (including sole proprietors) may get NPI Entity Type 1. sole proprietor, must apply NPI using SSN, Employer Identification Number (EIN) even EIN. sole proprietor, may get one NPI, just like individual. following factors affect whether sole proprietor Entity Type 1: Number different office locations Whether employees Whether IRS issued EIN. incorporated individual single health care provider forms conducts business corporation. sole proprietor incorporated individual sole proprietor didn’t form corporation. ’re sole/solo practitioner, doesn’t necessarily mean ’re sole proprietor, vice versa. ’re individual health care provider ’s incorporated, may need get NPI (Entity Type 1) NPI corporation LLC (Entity Type 2).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"npi-2-organizational","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes > Enumeration Type","what":"NPI-2: Organizational","title":"NPPES NPI Registry API","text":"Organizational health care providers group health care providers eligible NPIs Entity Type 2. Organization health care providers may single employee thousands employees. example incorporated individual organization’s employee. organization health care providers made parts work somewhat independently parent organization. parts may offer different types health care offer health care separate physical locations. parts physical locations aren’t legal entities part organization health care provider (legal entity). NPI Final Rule refers parts locations subparts. organization health care provider can get subparts NPIs. subpart conducts HIPAA standard transactions (separately parent), must get NPI. Subpart determination makes sure entities within covered organization uniquely identified HIPAA standard transactions conduct Medicare covered entities. example, hospital offers acute care, laboratory, pharmacy, rehabilitation services. subparts may need NPI sends standard transactions one health plans. Subpart delegation doesn’t affect Entity Type 1 health care providers. individuals, health care providers can’t choose subparts subparts.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"authorized-official","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes > Enumeration Type","what":"Authorized Official","title":"NPPES NPI Registry API","text":"appointed official (e.g., chief executive officer, chief financial officer, general partner, chairman board, direct owner) organization granted legal authority enroll Medicare program, make changes updates organization’s status Medicare program, commit organization fully abide statutes, regulations, program instructions Medicare program. See 42 CFR 424.502 additional information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"example-opt-out-provider","dir":"Articles","previous_headings":"","what":"Example: Opt-Out Provider","title":"Overview of Provider","text":"","code":"nppes_npi(npi = 1114058443)  order_refer(npi = 1114058443)  opt_out(npi = 1114058443) eliz <- provider_enrollment(org_name = \"ELIZABETHTOWN COMMUNITY HOSPITAL\",                             state = \"NY\",                             prov_type_code = \"00-85\")  eliz |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' nppes <- tibble::tribble( ~fn,         ~params, \"nppes_npi\", list(npi = eliz$npi[[1]]), \"nppes_npi\", list(npi = eliz$npi[[2]]))  eliz2 <- purrr::invoke_map_dfr(nppes$fn, nppes$params)  eliz2 |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse'"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"medicare-order-and-referring-api","dir":"Articles","previous_headings":"","what":"Medicare Order and Referring API","title":"Overview of Provider","text":"provider currently eligible make referrals Medicare Part B Home Health Agency (HHA)? Order Durable Medical Equipment (DME) Power Mobility Devices (PMDs)? Search Medicare’s Order Referring API provider_moar():","code":"order_refer(npi = 1083879860) |>    gt::gt() |>    provider:::gt_theme_provider() |>    gt::tab_header(title = \"Provider Results for NPI 1083879860\",     subtitle = gtExtras::add_text_img(\"Report generated with\", url = \"https://raw.githubusercontent.com/andrewallenbruce/provider/main/pkgdown/favicon/apple-touch-icon-180x180.png\", height = 25)) |>    gt::text_transform(locations = gt::cells_body(columns = c(partb, dme, hha, pmd)),                      fn = function(x) {                        if (x == as.character(\"TRUE\")) {gt::html(fontawesome::fa(\"circle-check\", prefer_type = \"solid\", fill = \"green\", height = \"1.5em\", width = \"1.5em\"))                          } else if (x == as.character(\"FALSE\")) {gt::html(fontawesome::fa(\"circle-xmark\", prefer_type = \"solid\", fill = \"red\"))                          }                      }                        )"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"medicare-provider-and-supplier-taxonomy-crosswalk-api","dir":"Articles","previous_headings":"","what":"Medicare Provider and Supplier Taxonomy Crosswalk API","title":"Overview of Provider","text":"may need find Medicare’s specialty codes provider’s taxonomies. Using output NPPES search first example, can search Medicare’s Provider Supplier Taxonomy Crosswalk API taxonomy_crosswalk():   Providers may need update digital contact information NPPES system. check, can access CMS Public Reporting Missing Digital Contact Information API missing_information(). appear search results, ’s time update NPPES contact information:    Using physician_by_service(), can access Medicare’s Physician & Practitioners - Provider Service API:   API contains data going back 2013, can perform long-term analysis provider’s Medicare data:  Using packages like {gt} & {ggplot2}, can create tables graphs reporting purposes:","code":"taxonomy_crosswalk(taxonomy_code = \"282NC0060X\") |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' missing_information(npi = 1114058443) |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' opt_out(npi = 1114058443) |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' purrr::map_dfr(2013:2020, ~physician_by_service(npi = 1003000126, year = .x)) |> terse::terse() #> Error in loadNamespace(x): there is no package called 'terse' purrr::map_dfr(2013:2020, ~physician_by_service(npi = 1003000126, year = .x)) |>    dplyr::group_by(hcpcs_cd, hcpcs_desc) |>    dplyr::summarise(     Beneficiaries = sum(tot_benes),     Services = sum(tot_srvcs),     Avg_Billed = janitor::round_half_up(mean(avg_sbmtd_chrg), digits = 2),     Avg_Allowed = janitor::round_half_up(mean(avg_mdcr_alowd_amt), digits = 2),     Avg_Payment = janitor::round_half_up(mean(avg_mdcr_pymt_amt), digits = 2)) |>    dplyr::ungroup() |>    dplyr::rename(HCPCS = hcpcs_cd,                  Description = hcpcs_desc,                 \"Avg Charge\" = Avg_Billed,                 \"Avg Allowed\" = Avg_Allowed,                 \"Avg Payment\" = Avg_Payment) |>    dplyr::arrange(dplyr::desc(Services)) |>    gt::gt() |>    gtExtras::gt_add_divider(columns = \"HCPCS\", style = \"dotted\") |>    gtExtras::gt_merge_stack(col1 = HCPCS,                             col2 = Description,                            small_cap = FALSE,                            font_size = c(\"16px\", \"14px\"),                            font_weight = c(\"bold\", \"normal\"),                            palette = c(\"black\", \"darkgray\")) |>    gt::tab_style(style = list(gt::cell_fill(color = \"#F54444\"),                               gt::cell_text(color = \"white\",                                             weight = \"bold\")),                  locations = gt::cells_row_groups()) |>    provider:::gt_theme_provider() |>    gt::tab_header(title = \"Provider Results for NPI 1114058443\",   subtitle = gtExtras::add_text_img(\"Report generated with\",    url = \"https://raw.githubusercontent.com/andrewallenbruce/provider/main/pkgdown/favicon/apple-touch-icon-180x180.png\",    height = 25))"},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2023). provider: Access Public Healthcare Provider Data. https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider.","code":"@Manual{,   title = {provider: Access Public Healthcare Provider Data},   author = {Andrew Bruce},   year = {2023},   note = {https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider}, }"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"provider-","dir":"","previous_headings":"","what":"Access Public Healthcare Provider Data","title":"Access Public Healthcare Provider Data","text":"Providing easy access healthcare provider-centric data publicly available APIs & sources.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access Public Healthcare Provider Data","text":"can install development version provider GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"andrewallenbruce/provider\")  # install.packages(\"remotes\") remotes::install_github(\"andrewallenbruce/provider\") # Load library library(provider)"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Access Public Healthcare Provider Data","text":"package primarily focused accessing public API data can linked together via healthcare provider’s National Provider Identifier (NPI). Thus far, none APIs require creation user account API key. data tend fall (sometimes ) one two categories: informational/operational analytical. Nothing shocking . gets interesting start link together.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"nppes-national-provider-identifier-registry-api","dir":"","previous_headings":"Motivation","what":"NPPES National Provider Identifier Registry API","title":"Access Public Healthcare Provider Data","text":"","code":"nppes <- tibble::tribble( ~fn,         ~params, \"nppes_npi\", list(npi = 1336413418), \"nppes_npi\", list(npi = 1659781227), \"nppes_npi\", list(prov_type = \"NPI-2\", city = \"Baltimore\", state = \"MD\", limit = 5), \"nppes_npi\", list(prov_type = \"NPI-1\", city = \"Atlanta\", state = \"GA\", limit = 5), )  purrr::invoke_map_dfr(nppes$fn, nppes$params) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $datetime            p12 2023-01-05 05:33:26     , 2023-01-05 05:33:26, 2023-01-05 05:33:26     ... #> $outcome             c12 results                 , Errors             , results                 ... #> $enumeration_type    c12 NPI-2                   , NA                 , NPI-2                   ... #> $number              c12 1336413418              , NA                 , 1568849958              ... #> $name                c12 LUMINUS DIAGNOSTICS, LLC, NA                 , HEALTHPRO REHABILITATIO ... #> $city                c12 TIFTON                  , NA                 , BALTIMORE               ... #> $state               c12 GA                      , NA                 , MA                      ... #> $addresses           L12 list(structure(list(country_code = c(\"US\", \"US\"), country_name = c(\"Un ... #> $practiceLocations   L12 list(list(), NULL, list(), list(), list(), list(), list(), list(), lis ... #> $taxonomies          L12 list(structure(list(code = \"291U00000X\", taxonomy_group = \"\", desc = \" ... #> $identifiers         L12 list(list(), NULL, structure(list(), names = character(0), row.names = ... #> $endpoints           L12 list(list(), NULL, list(), list(), list(), list(), list(), list(), lis ... #> $other_names         L12 list(list(), NULL, structure(list(), names = character(0), row.names = ... #> $epochs              L12 list(structure(list(created_epoch = \"1331130417000\", last_updated_epoc ... #> $authorized_official L12 list(structure(list(basic_authorized_official_first_name = \"Laurel\", b ... #> $basic               L12 list(structure(list(basic_organization_name = \"LUMINUS DIAGNOSTICS, LL ... #> $errors              L12 list(NULL, structure(list(description = \"CMS deactivated NPI 165978122 ..."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-fee-for-service-public-provider-enrollment-api","dir":"","previous_headings":"Motivation","what":"Medicare Fee-For-Service Public Provider Enrollment API","title":"Access Public Healthcare Provider Data","text":"","code":"prven <- tibble::tribble( ~fn,         ~params, \"provider_enrollment\", list(npi = 1083879860), \"provider_enrollment\", list(first_name = \"MICHAEL\", middle_name = \"K\", last_name = \"GREENBERG\", state = \"MD\"), \"provider_enrollment\", list(org_name = \"LUMINUS DIAGNOSTICS LLC\", state = \"GA\"), )  purrr::invoke_map_dfr(prven$fn, prven$params) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $npi                c3 1083879860                    , 1932192150              , 1336413418     ... #> $pecos_asct_cntl_id c3 8426328519                    , 4183536311              , 1355507260     ... #> $enrlmt_id          c3 I20200617001010               , I20031105000174         , O2012072300004 ... #> $provider_type_cd   c3 14-08                         , 14-13                   , 12-69          ... #> $provider_type_desc c3 PRACTITIONER - FAMILY PRACTICE, PRACTITIONER - NEUROLOGY, PART B SUPPLIE ... #> $state_cd           c3 PA                            , MD                      , GA             ... #> $first_name         c3 CHRISTOPHER                   , MICHAEL                 ,                ... #> $mdl_name           c3 L                             , K                       ,                ... #> $last_name          c3 AARON                         , GREENBERG               ,                ... #> $org_name           c3                               ,                         , LUMINUS DIAGNO ... #> $gndr_sw            c3 M                             , M                       ,                ..."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-monthly-enrollment-api","dir":"","previous_headings":"Motivation","what":"Medicare Monthly Enrollment API","title":"Access Public Healthcare Provider Data","text":"","code":"months <- tibble::enframe(month.name) |>    dplyr::select(-name) |>    dplyr::slice(1:7) |>    tibble::deframe()  purrr::map_dfr(months, ~beneficiary_enrollment(year = 2022, geo_level = \"State\", state = \"Georgia\", month = .x)) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $year                           i7 2022   , 2022    , 2022   , 2022   , 2022   , 2022   , 2022    #> $month                          c7 January, February, March  , April  , May    , June   , July    #> $bene_geo_lvl                   c7 State  , State   , State  , State  , State  , State  , State   #> $bene_state_abrvtn              c7 GA     , GA      , GA     , GA     , GA     , GA     , GA      #> $bene_state_desc                c7 Georgia, Georgia , Georgia, Georgia, Georgia, Georgia, Georgia #> $bene_county_desc               c7 Total  , Total   , Total  , Total  , Total  , Total  , Total   #> $bene_fips_cd                   c7 13     , 13      , 13     , 13     , 13     , 13     , 13      #> $tot_benes                      i7 1830959, 1830025 , 1831573, 1833135, 1835187, 1837394, 1840128 #> $orgnl_mdcr_benes               i7 915752 , 913347  , 912897 , 911263 , 910417 , 909778 , 907070  #> $ma_and_oth_benes               i7 915207 , 916678  , 918676 , 921872 , 924770 , 927616 , 933058  #> $aged_tot_benes                 i7 1572257, 1571050 , 1572037, 1573058, 1574570, 1575954, 1578129 #> $aged_esrd_benes                i7 11635  , 11312   , 11096  , 10888  , 10716  , 10525  , 10368   #> $aged_no_esrd_benes             i7 1560622, 1559738 , 1560941, 1562170, 1563854, 1565429, 1567761 #> $dsbld_tot_benes                i7 258702 , 258975  , 259536 , 260077 , 260617 , 261440 , 261999  #> $dsbld_esrd_and_esrd_only_benes i7 12011  , 11905   , 11853  , 11835  , 11827  , 11790  , 11713   #> $dsbld_no_esrd_benes            i7 246691 , 247070  , 247683 , 248242 , 248790 , 249650 , 250286  #> $a_b_tot_benes                  i7 1681852, 1680770 , 1681852, 1683513, 1685479, 1687818, 1696372 #> $a_b_orgnl_mdcr_benes           i7 767454 , 764903  , 763986 , 762450 , 761518 , 761012 , 764122  #> $a_b_ma_and_oth_benes           i7 914398 , 915867  , 917866 , 921063 , 923961 , 926806 , 932250  #> $prscrptn_drug_tot_benes        i7 1410752, 1410748 , 1411729, 1413507, 1415521, 1417811, 1422171 #> $prscrptn_drug_pdp_benes        i7 538559 , 536815  , 535968 , 534687 , 534006 , 533731 , 533004  #> $prscrptn_drug_mapd_benes       i7 872193 , 873933  , 875761 , 878820 , 881515 , 884080 , 889167"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-order-and-referring-api","dir":"","previous_headings":"Motivation","what":"Medicare Order and Referring API","title":"Access Public Healthcare Provider Data","text":"","code":"provider::order_refer(npi = 1083879860) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $npi        i1 1083879860  #> $last_name  c1 AARON       #> $first_name c1 CHRISTOPHER #> $partb      l1 T           #> $dme        l1 T           #> $hha        l1 T           #> $pmd        l1 T"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-opt-out-affidavits-api","dir":"","previous_headings":"Motivation","what":"Medicare Opt-Out Affidavits API","title":"Access Public Healthcare Provider Data","text":"","code":"provider::opt_out(last = \"Aaron\") |> terse::terse(config = list(ansi = FALSE), width = 100) #> $date                        D1 2023-01-05             #> $last_updated                c1 11/15/2022             #> $first_name                  c1 Sheryl                 #> $last_name                   c1 Aaron                  #> $npi                         c1 1427358282             #> $specialty                   c1 Clinical Social Worker #> $optout_effective_date       c1 02/17/2022             #> $optout_end_date             c1 02/17/2024             #> $first_line_street_address   c1 1633 Q ST NW           #> $second_line_street_address  c1 STE 230                #> $city_name                   c1 WASHINGTON             #> $state_code                  c1 DC                     #> $zip_code                    c1 200096351              #> $eligible_to_order_and_refer l1 F"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-provider-and-supplier-taxonomy-crosswalk-api","dir":"","previous_headings":"Motivation","what":"Medicare Provider and Supplier Taxonomy Crosswalk API","title":"Access Public Healthcare Provider Data","text":"","code":"provider::taxonomy_crosswalk(specialty_desc = \"Rehabilitation Agency\") |>    terse::terse(config = list(ansi = FALSE), width = 100) #> $medicare_specialty_code                                          c2 B4[14]                     ... #> $medicare_provider_supplier_type_description                      c2 Rehabilitation Agency      ... #> $provider_taxonomy_code                                           c2 261QR0400X                 ... #> $provider_taxonomy_description_type_classification_specialization c2 Ambulatory Health Care Fac ..."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-revalidation-due-date-api","dir":"","previous_headings":"Motivation","what":"Medicare Revalidation Due Date API","title":"Access Public Healthcare Provider Data","text":"","code":"provider::revalidation_date(npi = 1710912209) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $month                           D1 2023-01-05      #> $enrollment_id                   c1 I20040602001711 #> $national_provider_identifier    c1 1710912209      #> $first_name                      c1 Yelena          #> $last_name                       c1 Voronova        #> $organization_name               c1                 #> $enrollment_state_code           c1 NY              #> $enrollment_type                 c1 3               #> $provider_type_text              c1 Non-DME Part B  #> $enrollment_specialty            c1 Podiatry        #> $revalidation_due_date           c1 2019-10-31      #> $adjusted_due_date               c1                 #> $individual_total_reassign_to    c1                 #> $receiving_benefits_reassignment i1 5"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-revalidation-reassignment-list-api","dir":"","previous_headings":"Motivation","what":"Medicare Revalidation Reassignment List API","title":"Access Public Healthcare Provider Data","text":"","code":"provider::revalidation_reassign(ind_npi = 1710912209) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $month                                        D5 2023-01-05                , 2023-01-05         ... #> $group_pac_id                                 d5 3678655222                , 9931511052         ... #> $group_enrollment_id                          c5 O20080205000002           , O20201215000955    ... #> $group_legal_business_name                    c5 #1 Wise Podiatry Care P.C., Brighton Beach Pod ... #> $group_state_code                             c5 NY                        , NY                 ... #> $group_due_date                               c5 10/31/2019                , TBD                ... #> $group_reassignments_and_physician_assistants i5 1                         , 1                  ... #> $record_type                                  c5 Reassignment              , Reassignment       ... #> $individual_pac_id                            d5 2860474988                , 2860474988         ... #> $individual_enrollment_id                     c5 I20040602001711           , I20040602001711    ... #> $individual_npi                               i5 1710912209                , 1710912209         ... #> $individual_first_name                        c5 Yelena                    , Yelena             ... #> $individual_last_name                         c5 Voronova                  , Voronova           ... #> $individual_state_code                        c5 NY                        , NY                 ... #> $individual_specialty_description             c5 Podiatry                  , Podiatry           ... #> $individual_due_date                          c5 10/31/2019                , 10/31/2019         ... #> $individual_total_employer_associations       i5 5                         , 5                  ..."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-revalidation-clinic-group-practice-reassignment-api","dir":"","previous_headings":"Motivation","what":"Medicare Revalidation Clinic Group Practice Reassignment API","title":"Access Public Healthcare Provider Data","text":"","code":"provider::revalidation_group(ind_npi = 1710912209) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $month                                        D5 2023-01-05                , 2023-01-05         ... #> $group_pac_id                                 d5 3678655222                , 9931511052         ... #> $group_enrollment_id                          c5 O20080205000002           , O20201215000955    ... #> $group_legal_business_name                    c5 #1 Wise Podiatry Care P.C., Brighton Beach Pod ... #> $group_state_code                             c5 NY                        , NY                 ... #> $group_due_date                               c5 10/31/2019                , TBD                ... #> $group_reassignments_and_physician_assistants i5 1                         , 1                  ... #> $record_type                                  c5 Reassignment              , Reassignment       ... #> $individual_enrollment_id                     c5 I20040602001711           , I20040602001711    ... #> $individual_npi                               i5 1710912209                , 1710912209         ... #> $individual_first_name                        c5 Yelena                    , Yelena             ... #> $individual_last_name                         c5 Voronova                  , Voronova           ... #> $individual_state_code                        c5 NY                        , NY                 ... #> $individual_specialty_description             c5 Podiatry                  , Podiatry           ... #> $individual_due_date                          c5 10/31/2019                , 10/31/2019         ... #> $individual_total_employer_associations       i5 5                         , 5                  ..."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"cms-public-reporting-of-missing-digital-contact-information-api","dir":"","previous_headings":"Motivation","what":"CMS Public Reporting of Missing Digital Contact Information API","title":"Access Public Healthcare Provider Data","text":"","code":"provider::missing_information(npi = 1144224569) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $npi        c1 1144224569 #> $last_name  c1 Clouse     #> $first_name c1 John"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-physician--other-practitioners-apis","dir":"","previous_headings":"Motivation","what":"Medicare Physician & Other Practitioners APIs","title":"Access Public Healthcare Provider Data","text":"Provider Service API:   Geography Service API:     Provider API:","code":"purrr::map_dfr(2013:2020, ~physician_by_service(npi = 1003000126, year = .x)) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $year                          i78 2013                                                         ... #> $rndrng_npi                    c78 1003000126                                                   ... #> $rndrng_prvdr_last_org_name    c78 Enkeshafi                                                    ... #> $rndrng_prvdr_first_name       c78 Ardalan                                                      ... #> $rndrng_prvdr_mi               c78                                                              ... #> $rndrng_prvdr_crdntls          c78 M.D.                                                         ... #> $rndrng_prvdr_gndr             c78 M                                                            ... #> $rndrng_prvdr_ent_cd           c78 I                                                            ... #> $rndrng_prvdr_st1              c78 900 Seton Dr                                                 ... #> $rndrng_prvdr_st2              c78                                                              ... #> $rndrng_prvdr_city             c78 Cumberland                                                   ... #> $rndrng_prvdr_state_abrvtn     c78 MD                                                           ... #> $rndrng_prvdr_state_fips       c78 24                                                           ... #> $rndrng_prvdr_zip5             c78 21502                                                        ... #> $rndrng_prvdr_ruca             c78 1                                                            ... #> $rndrng_prvdr_ruca_desc        c78 Metropolitan area core: primary flow within an urbanized are ... #> $rndrng_prvdr_cntry            c78 US                                                           ... #> $rndrng_prvdr_type             c78 Internal Medicine                                            ... #> $rndrng_prvdr_mdcr_prtcptg_ind c78 Y                                                            ... #> $hcpcs_cd                      c78 99222                                                        ... #> $hcpcs_desc                    c78 Initial hospital inpatient care, typically 50 minutes per da ... #> $hcpcs_drug_ind                c78 N                                                            ... #> $place_of_srvc                 c78 F                                                            ... #> $tot_benes                     i78 138                                                          ... #> $tot_srvcs                     i78 142                                                          ... #> $tot_bene_day_srvcs            i78 142                                                          ... #> $avg_sbmtd_chrg                d78 368.62676                                                    ... #> $avg_mdcr_alowd_amt            d78 132.17007                                                    ... #> $avg_mdcr_pymt_amt             d78 104.29972                                                    ... #> $avg_mdcr_stdzd_amt            d78 107.21113                                                    ... service <- physician_by_service(npi = 1003000126, year = 2020) purrr::map_dfr(service$hcpcs_cd, ~physician_by_geography(geo_level = \"National\", year = 2020, hcpcs_code = .x)) |>    terse::terse(config = list(ansi = FALSE), width = 100) #> $year                  d18 2020                                         , 2020                  ... #> $rndrng_prvdr_geo_lvl  c18 National                                     , National              ... #> $rndrng_prvdr_geo_cd   c18                                              ,                       ... #> $rndrng_prvdr_geo_desc c18 National                                     , National              ... #> $hcpcs_cd              c18 99217                                        , 99217                 ... #> $hcpcs_desc            c18 Hospital observation care on day of discharge, Hospital observation  ... #> $hcpcs_drug_ind        c18 N                                            , N                     ... #> $place_of_srvc         c18 F                                            , O                     ... #> $tot_rndrng_prvdrs     i18 90842                                        , 693                   ... #> $tot_benes             i18 960315                                       , 3650                  ... #> $tot_srvcs             d18 1083287                                      , 4520                  ... #> $tot_bene_day_srvcs    i18 1083083                                      , 4516                  ... #> $avg_sbmtd_chrg        d18 226.52433                                    , 163.35113             ... #> $avg_mdcr_alowd_amt    d18 71.85383                                     , 71.47693              ... #> $avg_mdcr_pymt_amt     d18 56.39061                                     , 54.49546              ... #> $avg_mdcr_stdzd_amt    d18 55.8072                                      , 54.83811              ... purrr::map_dfr(service$hcpcs_cd, ~physician_by_geography(geo_desc = \"Maryland\", year = 2020, hcpcs_code = .x)) |>    terse::terse(config = list(ansi = FALSE), width = 100) #> $year                  d15 2020                                         , 2020                  ... #> $rndrng_prvdr_geo_lvl  c15 State                                        , State                 ... #> $rndrng_prvdr_geo_cd   c15 24                                           , 24                    ... #> $rndrng_prvdr_geo_desc c15 Maryland                                     , Maryland              ... #> $hcpcs_cd              c15 99217                                        , 99218                 ... #> $hcpcs_desc            c15 Hospital observation care on day of discharge, Hospital observation  ... #> $hcpcs_drug_ind        c15 N                                            , N                     ... #> $place_of_srvc         c15 F                                            , F                     ... #> $tot_rndrng_prvdrs     i15 1523                                         , 785                   ... #> $tot_benes             i15 31433                                        , 3847                  ... #> $tot_srvcs             i15 35505                                        , 4042                  ... #> $tot_bene_day_srvcs    i15 35504                                        , 4041                  ... #> $avg_sbmtd_chrg        d15 300.86334                                    , 377.22372             ... #> $avg_mdcr_alowd_amt    d15 73.32784                                     , 102.47521             ... #> $avg_mdcr_pymt_amt     d15 57.82643                                     , 80.32934              ... #> $avg_mdcr_stdzd_amt    d15 54.26721                                     , 74.86627              ... physician_by_provider(npi = 1003000126) |> terse::terse(config = list(ansi = FALSE), width = 100) #> $year                          d1 2020                                                          ... #> $rndrng_npi                    c1 1003000126                                                    ... #> $rndrng_prvdr_last_org_name    c1 Enkeshafi                                                     ... #> $rndrng_prvdr_first_name       c1 Ardalan                                                       ... #> $rndrng_prvdr_mi               c1                                                               ... #> $rndrng_prvdr_crdntls          c1 M.D.                                                          ... #> $rndrng_prvdr_gndr             c1 M                                                             ... #> $rndrng_prvdr_ent_cd           c1 I                                                             ... #> $rndrng_prvdr_st1              c1 6410 Rockledge Dr Ste 304                                     ... #> $rndrng_prvdr_st2              c1                                                               ... #> $rndrng_prvdr_city             c1 Bethesda                                                      ... #> $rndrng_prvdr_state_abrvtn     c1 MD                                                            ... #> $rndrng_prvdr_state_fips       c1 24                                                            ... #> $rndrng_prvdr_zip5             c1 20817                                                         ... #> $rndrng_prvdr_ruca             c1 1                                                             ... #> $rndrng_prvdr_ruca_desc        c1 Metropolitan area core: primary flow within an urbanized area ... #> $rndrng_prvdr_cntry            c1 US                                                            ... #> $rndrng_prvdr_type             c1 Internal Medicine                                             ... #> $rndrng_prvdr_mdcr_prtcptg_ind c1 Y                                                             ... #> $tot_hcpcs_cds                 c1 16                                                            ... #> $tot_benes                     i1 291                                                           ... #> $tot_srvcs                     i1 764                                                           ... #> $tot_sbmtd_chrg                i1 402812                                                        ... #> $tot_mdcr_alowd_amt            d1 85319.63                                                      ... #> $tot_mdcr_pymt_amt             d1 69175.78                                                      ... #> $tot_mdcr_stdzd_amt            d1 66401.61                                                      ... #> $drug_sprsn_ind                c1                                                               ... #> $drug_tot_hcpcs_cds            i1 0                                                             ... #> $drug_tot_benes                i1 0                                                             ... #> $drug_tot_srvcs                i1 0                                                             ... #> $drug_sbmtd_chrg               i1 0                                                             ... #> $drug_mdcr_alowd_amt           i1 0                                                             ... #> $drug_mdcr_pymt_amt            i1 0                                                             ... #> $drug_mdcr_stdzd_amt           i1 0                                                             ... #> $med_sprsn_ind                 c1                                                               ... #> $med_tot_hcpcs_cds             i1 16                                                            ... #> $med_tot_benes                 i1 291                                                           ... #> $med_tot_srvcs                 i1 764                                                           ... #> $med_sbmtd_chrg                i1 402812                                                        ... #> $med_mdcr_alowd_amt            d1 85319.63                                                      ... #> $med_mdcr_pymt_amt             d1 69175.78                                                      ... #> $med_mdcr_stdzd_amt            d1 66401.61                                                      ... #> $bene_avg_age                  i1 77                                                            ... #> $bene_age_lt_65_cnt            i1 27                                                            ... #> $bene_age_65_74_cnt            i1 88                                                            ... #> $bene_age_75_84_cnt            i1 104                                                           ... #> $bene_age_gt_84_cnt            i1 72                                                            ... #> $bene_feml_cnt                 i1 161                                                           ... #> $bene_male_cnt                 i1 130                                                           ... #> $bene_race_wht_cnt             i1 210                                                           ... #> $bene_race_black_cnt           i1 50                                                            ... #> $bene_race_api_cnt             c1                                                               ... #> $bene_race_hspnc_cnt           i1 12                                                            ... #> $bene_race_nat_ind_cnt         c1                                                               ... #> $bene_race_othr_cnt            c1                                                               ... #> $bene_dual_cnt                 i1 61                                                            ... #> $bene_ndual_cnt                i1 230                                                           ... #> $bene_cc_af_pct                d1 0.31                                                          ... #> $bene_cc_alzhmr_pct            d1 0.43                                                          ... #> $bene_cc_asthma_pct            d1 0.15                                                          ... #> $bene_cc_cncr_pct              d1 0.18                                                          ... #> $bene_cc_chf_pct               d1 0.48                                                          ... #> $bene_cc_ckd_pct               d1 0.65                                                          ... #> $bene_cc_copd_pct              d1 0.29                                                          ... #> $bene_cc_dprssn_pct            d1 0.35                                                          ... #> $bene_cc_dbts_pct              d1 0.47                                                          ... #> $bene_cc_hyplpdma_pct          d1 0.73                                                          ... #> $bene_cc_hyprtnsn_pct          d1 0.75                                                          ... #> $bene_cc_ihd_pct               d1 0.66                                                          ... #> $bene_cc_opo_pct               d1 0.11                                                          ... #> $bene_cc_raoa_pct              d1 0.51                                                          ... #> $bene_cc_sz_pct                d1 0.09                                                          ... #> $bene_cc_strok_pct             d1 0.19                                                          ... #> $bene_avg_risk_scre            d1 2.5028                                                        ..."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-multiple-chronic-conditions-api","dir":"","previous_headings":"Motivation","what":"Medicare Multiple Chronic Conditions API","title":"Access Public Healthcare Provider Data","text":"","code":"cc_multiple(year = 2007, geo_lvl = \"National\", demo_lvl = \"Race\") |> terse::terse(config = list(ansi = FALSE), width = 100) #> $year                     d60 2007                  , 2007                  , 2007              ... #> $bene_geo_lvl             c60 National              , National              , National          ... #> $bene_geo_desc            c60 National              , National              , National          ... #> $bene_geo_cd              c60                       ,                       ,                   ... #> $bene_age_lvl             c60 65+                   , 65+                   , 65+               ... #> $bene_demo_lvl            c60 Race                  , Race                  , Race              ... #> $bene_demo_desc           c60 Asian Pacific Islander, Asian Pacific Islander, Asian Pacific Isl ... #> $bene_mcc                 c60 0 to 1                , 2 to 3                , 4 to 5            ... #> $prvlnc                   d60 0.3271                , 0.3438                , 0.2213            ... #> $tot_mdcr_stdzd_pymt_pc   d60 1033.4246             , 3279.7851             , 7688.8443         ... #> $tot_mdcr_pymt_pc         d60 1116.9013             , 3692.2481             , 8993.6581         ... #> $hosp_readmsn_rate        d60 0.0612                , 0.0765                , 0.1237            ... #> $er_visits_per_1000_benes d60 82.1561               , 210.1455              , 440.5998          ..."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-specific-chronic-conditions-api","dir":"","previous_headings":"Motivation","what":"Medicare Specific Chronic Conditions API","title":"Access Public Healthcare Provider Data","text":"","code":"cc_specific(year = 2007, geo_lvl = \"National\", demo_lvl = \"Race\") |>    terse::terse(config = list(ansi = FALSE), width = 100) #> $year                     d315 2007                  , 2007                  , 2007             ... #> $bene_geo_lvl             c315 National              , National              , National         ... #> $bene_geo_desc            c315 National              , National              , National         ... #> $bene_geo_cd              c315                       ,                       ,                  ... #> $bene_age_lvl             c315 65+                   , <65                   , All              ... #> $bene_demo_lvl            c315 Race                  , Race                  , Race             ... #> $bene_demo_desc           c315 Asian Pacific Islander, Asian Pacific Islander, Asian Pacific Is ... #> $bene_cond                c315 Alcohol Abuse         , Alcohol Abuse         , Alcohol Abuse    ... #> $prvlnc                   c315 0.0036                , 0.021                 , 0.0057           ... #> $tot_mdcr_stdzd_pymt_pc   c315                       ,                       ,                  ... #> $tot_mdcr_pymt_pc         c315                       ,                       ,                  ... #> $hosp_readmsn_rate        c315                       ,                       ,                  ... #> $er_visits_per_1000_benes c315                       ,                       ,                  ..."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access Public Healthcare Provider Data","text":"Please note provider project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Current information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographical areas.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"","code":"beneficiary_enrollment(   year = 2021,   month = \"Year\",   geo_level = c(\"National\", \"State\", \"County\"),   state_abb = NULL,   state = NULL,   county = NULL,   fips = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"year Calendar year Medicare enrollment; current options 2017 - 2022 month Timeframe Medicare enrollment; options Year month within 12-month timespan month dataset's version name (listed ) geo_level Geographic level data; options National, State, County state_abb Two-letter state abbreviation beneficiary residence state Full state name beneficiary residence county County beneficiary residence fips FIPS code beneficiary residence clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Medicare Monthly Enrollment data provides current monthly information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographic areas including national, state/territory, county. hospital/medical coverage data can broken health care delivery (Original Medicare versus Medicare Advantage Health Plans) prescription drug coverage data can examined enrolled stand-alone Prescription Drug Plans enrolled Medicare Advantage Prescription Drug plans. dataset includes enrollee counts rolling 12 month basis also provides information yearly trends. dataset based information gathered CMS administrative enrollment data beneficiaries enrolled Medicare program available CMS Chronic Conditions Data Warehouse.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Medicare Monthly Enrollment","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"","code":"beneficiary_enrollment(year = 2018,                        month = \"Year\",                        geo_level = \"County\",                        state_abb = \"AL\",                        county = \"Autauga\") #> # A tibble: 1 × 22 #>    year month bene_geo…¹ bene_…² bene_…³ bene_…⁴ bene_…⁵ tot_b…⁶ orgnl…⁷ ma_an…⁸ #>   <int> <chr> <chr>      <chr>   <chr>   <chr>   <chr>     <int>   <int>   <int> #> 1  2018 Year  County     AL      Alabama Autauga 01001     10645    5700    4945 #> # … with 12 more variables: aged_tot_benes <int>, aged_esrd_benes <int>, #> #   aged_no_esrd_benes <int>, dsbld_tot_benes <int>, #> #   dsbld_esrd_and_esrd_only_benes <int>, dsbld_no_esrd_benes <int>, #> #   a_b_tot_benes <int>, a_b_orgnl_mdcr_benes <int>, #> #   a_b_ma_and_oth_benes <int>, prscrptn_drug_tot_benes <int>, #> #   prscrptn_drug_pdp_benes <int>, prscrptn_drug_mapd_benes <int>, and #> #   abbreviated variable names ¹​bene_geo_lvl, ²​bene_state_abrvtn, …  beneficiary_enrollment(year = 2021,                        geo_level = \"County\",                        fips = \"01001\") #> # A tibble: 1 × 22 #>    year month bene_geo…¹ bene_…² bene_…³ bene_…⁴ bene_…⁵ tot_b…⁶ orgnl…⁷ ma_an…⁸ #>   <int> <chr> <chr>      <chr>   <chr>   <chr>   <chr>     <int>   <int>   <int> #> 1  2021 Year  County     AL      Alabama Autauga 01001     11398    5339    6059 #> # … with 12 more variables: aged_tot_benes <int>, aged_esrd_benes <int>, #> #   aged_no_esrd_benes <int>, dsbld_tot_benes <int>, #> #   dsbld_esrd_and_esrd_only_benes <int>, dsbld_no_esrd_benes <int>, #> #   a_b_tot_benes <int>, a_b_orgnl_mdcr_benes <int>, #> #   a_b_ma_and_oth_benes <int>, prscrptn_drug_tot_benes <int>, #> #   prscrptn_drug_pdp_benes <int>, prscrptn_drug_mapd_benes <int>, and #> #   abbreviated variable names ¹​bene_geo_lvl, ²​bene_state_abrvtn, …  beneficiary_enrollment(year = 2022,                        month = \"July\",                        geo_level = \"State\",                        state = \"Georgia\") #> # A tibble: 1 × 22 #>    year month bene_geo…¹ bene_…² bene_…³ bene_…⁴ bene_…⁵ tot_b…⁶ orgnl…⁷ ma_an…⁸ #>   <int> <chr> <chr>      <chr>   <chr>   <chr>   <chr>     <int>   <int>   <int> #> 1  2022 July  State      GA      Georgia Total   13      1840128  907070  933058 #> # … with 12 more variables: aged_tot_benes <int>, aged_esrd_benes <int>, #> #   aged_no_esrd_benes <int>, dsbld_tot_benes <int>, #> #   dsbld_esrd_and_esrd_only_benes <int>, dsbld_no_esrd_benes <int>, #> #   a_b_tot_benes <int>, a_b_orgnl_mdcr_benes <int>, #> #   a_b_ma_and_oth_benes <int>, prscrptn_drug_tot_benes <int>, #> #   prscrptn_drug_pdp_benes <int>, prscrptn_drug_mapd_benes <int>, and #> #   abbreviated variable names ¹​bene_geo_lvl, ²​bene_state_abrvtn, …  beneficiary_enrollment(year = 2017,                        geo_level = \"State\",                        fips = \"10\") #> # A tibble: 1 × 22 #>    year month bene_geo…¹ bene_…² bene_…³ bene_…⁴ bene_…⁵ tot_b…⁶ orgnl…⁷ ma_an…⁸ #>   <int> <chr> <chr>      <chr>   <chr>   <chr>   <chr>     <int>   <int>   <int> #> 1  2017 Year  State      DE      Delawa… Total   10       193585  171150   22435 #> # … with 12 more variables: aged_tot_benes <int>, aged_esrd_benes <int>, #> #   aged_no_esrd_benes <int>, dsbld_tot_benes <int>, #> #   dsbld_esrd_and_esrd_only_benes <int>, dsbld_no_esrd_benes <int>, #> #   a_b_tot_benes <int>, a_b_orgnl_mdcr_benes <int>, #> #   a_b_ma_and_oth_benes <int>, prscrptn_drug_tot_benes <int>, #> #   prscrptn_drug_pdp_benes <int>, prscrptn_drug_mapd_benes <int>, and #> #   abbreviated variable names ¹​bene_geo_lvl, ²​bene_state_abrvtn, …"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"cc_multiple(   year = 2018,   geo_lvl = NULL,   geo_desc = NULL,   fips = NULL,   age_lvl = NULL,   demo_lvl = NULL,   demo_desc = NULL,   mcc = NULL,   prevalence = NULL,   stnd_pymt_pc = NULL,   pymt_pc = NULL,   readmit_rate = NULL,   er_visits = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"year YYYY, calendar year Medicare enrollment. 2007-2018 data currently available. geo_lvl Geographic level data; options \"National\", \"State\", \"County\" geo_desc state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. fips FIPS state /county code Medicare beneficiary resides. Bene_Geo_Cd blank data aggregated National level Puerto Rico Virgin Islands. age_lvl Identifies age level population data aggregated. value '' indicates data row represents Fee--Service Medicare Beneficiaries. value '<65' '65+' indicates data aggregated age Medicare Beneficiaries end calendar year. demo_lvl Identifies demographic level population data aggregated. value '' indicates data row represents Fee--Service Medicare beneficiaries. value 'Sex' indicates data aggregated Medicare beneficiary's sex. value 'Race' indicates data aggregated Medicare beneficiary's race. value 'Dual Status' indicates data aggregated Medicare beneficiary's dual eligibility status. demo_desc Bene_Demo_Lvl='Sex', beneficiary’s sex classified Male Female identified using information CMS enrollment database. Bene_Demo_Lvl='Race', race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. chronic condition reports use variable RTI_RACE_CD, available Master Beneficiary Files CCW. Bene_Demo_Lvl='Dual Status', beneficiaries can classified 'Medicare & Medicaid' 'Medicare '. Beneficiares enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. mcc classify MCC Medicare beneficiary, 21 chronic conditions counted grouped four categories (0-1, 2-3, 4-5 6 ). prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. stnd_pymt_pc Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. pymt_pc Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). readmit_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting. clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Multiple Chronic Conditions dataset provides information number chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories (0-1, 2-3, 4-5 6 ).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Medicare Multiple Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"if (FALSE) { cc_multiple(year     = 2018,             geo_lvl  = \"State\",             geo_desc = \"California\")  cc_multiple(year     = 2007,             geo_lvl  = \"National\",             demo_lvl = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Specific Chronic Conditions API — cc_specific","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"cc_specific(   year = 2018,   geo_lvl = NULL,   geo_desc = NULL,   fips = NULL,   age_lvl = NULL,   demo_lvl = NULL,   demo_desc = NULL,   condition = NULL,   prevalence = NULL,   stnd_pymt_pc = NULL,   pymt_pc = NULL,   readmit_rate = NULL,   er_visits = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"year YYYY, calendar year Medicare enrollment. 2007-2018 data currently available. geo_lvl Geographic level data; options \"National\", \"State\", \"County\" geo_desc state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. fips FIPS state /county code Medicare beneficiary resides. Bene_Geo_Cd blank data aggregated National level Puerto Rico Virgin Islands. age_lvl Identifies age level population data aggregated. value '' indicates data row represents Fee--Service Medicare Beneficiaries. value '<65' '65+' indicates data aggregated age Medicare Beneficiaries end calendar year. demo_lvl Identifies demographic level population data aggregated. value '' indicates data row represents Fee--Service Medicare beneficiaries. value 'Sex' indicates data aggregated Medicare beneficiary's sex. value 'Race' indicates data aggregated Medicare beneficiary's race. value 'Dual Status' indicates data aggregated Medicare beneficiary's dual eligibility status. demo_desc Bene_Demo_Lvl='Sex', beneficiary’s sex classified Male Female identified using information CMS enrollment database. Bene_Demo_Lvl='Race', race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. chronic condition reports use variable RTI_RACE_CD, available Master Beneficiary Files CCW. Bene_Demo_Lvl='Dual Status',beneficiaries can classified 'Medicare & Medicaid' 'Medicare '. Beneficiares enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. condition Identifies chronic condition prevalence utilization compiled. 21 chronic conditions identified using Medicare administrative claims. Medicare beneficiary considered chronic condition CMS administrative data claim indicating beneficiary received service treatment specific condition. Beneficiaries may one chronic conditions listed. prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. stnd_pymt_pc Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. pymt_pc Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). readmit_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting. clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Select Chronic Conditions dataset provides information 21 selected chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography distinct chronic conditions listed . • Alcohol Abuse Drug Abuse/ Substance Abuse • Alzheimer’s Disease Related Dementia • Arthritis (Osteoarthritis Rheumatoid) • Asthma • Atrial Fibrillation • Autism Spectrum Disorders • Cancer (Breast, Colorectal, Lung, Prostate) • Chronic Kidney Disease • Chronic Obstructive Pulmonary Disease • Depression • Diabetes • Drug Abuse/ Substance Abuse • Heart Failure • Hepatitis (Chronic Viral B & C) • HIV/AIDS • Hyperlipidemia (High cholesterol) • Hypertension (High blood pressure) • Ischemic Heart Disease • Osteoporosis • Schizophrenia Psychotic Disorders • Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Medicare Specific Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"if (FALSE) { cc_specific(year     = 2018,             geo_lvl  = \"State\",             geo_desc = \"California\")  cc_specific(year     = 2007,             geo_lvl  = \"National\",             demo_lvl = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Information providers missing digital contact information NPPES.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"","code":"missing_information(npi = NULL, clean_names = TRUE, lowercase = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"npi provider’s National Provider Identifier clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"May 2020 CMS Interoperability Patient Access final rule, CMS finalized policy publicly report names NPIs providers digital contact information included NPPES system (85 FR 25584). data includes NPI provider name providers clinicians without digital contact information NPPES.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"CMS Public Reporting Missing Digital Contact Information API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"","code":"missing_information(npi = 1134122013) #> # A tibble: 1 × 3 #>   npi        last_name first_name #>   <chr>      <chr>     <chr>      #> 1 1134122013 Henry     Timothy"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the NPPES National Provider Identifier Registry API — nppes_npi","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"provider_nppes() allows search NPPES NPI Registry's public API many parameters defined API's documentation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"","code":"nppes_npi(   npi = NULL,   prov_type = NULL,   first = NULL,   last = NULL,   org_name = NULL,   taxonomy = NULL,   city = NULL,   state = NULL,   zip = NULL,   country = NULL,   limit = 200,   skip = NULL )"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"npi 10-digit National Provider Identifier (NPI). prov_type Read API can refined retrieve Individual Providers (NPI-1 Type 1) Organizational Providers (NPI-2 Type 2.) specified, Type 1 Type 2 NPIs returned. using Enumeration Type, criteria entered. Additional criteria must also entered well. first Provider's first name. Applies Individual Providers (NPI-1) . Trailing wildcard entries permitted requiring least two characters entered (e.g. \"jo*\" ). field allows following special characters: ampersand(&), apostrophe(,), colon(:), comma(,), forward slash(/), hyphen(-), left right parentheses(()), period(.), pound sign(#), quotation mark(\"), semi-colon(;). last Provider's last name. Applies Individual Providers (NPI-1) . Trailing wildcard entries permitted requiring least two characters entered (e.g. \"jo*\" ). field allows following special characters: ampersand(&), apostrophe(,), colon(:), comma(,), forward slash(/), hyphen(-), left right parentheses(()), period(.), pound sign(#), quotation mark(\"), semi-colon(;). org_name Healthcare organization's name. Applies Organizational Providers (NPI-2) . Trailing wildcard entries permitted requiring least two characters entered. types Organization Names (LBN, DBA, Former LBN, Name) associated NPI examined matching contents, therefore, results might contain organization name different one entered Organization Name criterion. field allows following special characters: ampersand, apostrophe, \"\" sign, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. taxonomy Search providers taxonomy entering taxonomy description. city City associated provider's address. search Military Address, enter either APO FPO City field. field allows following special characters: ampersand, apostrophe, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. state State abbreviation associated provider's address. field used input criterion. field used, least one field, besides prov_type country, must populated. Valid values state abbreviations: https://npiregistry.cms.hhs.gov/help-api/state. zip Postal Code associated provider's address identified Address Purpose. enter 5 digit postal code, match appropriate 9 digit (zip+4) codes data. Trailing wildcard entries permitted requiring least two characters entered (e.g., \"21*\"). country Country abbreviation associated provider's address. field can used input criterion, long value selected US (United States). Valid values country abbreviations: https://npiregistry.cms.hhs.gov/help-api/country. limit Maximum number results return; default 200, maximum 1200. skip Number results skip searching previous number; set limit.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"NPPES NPI Registry Public Search free directory active National Provider Identifier (NPI) records. Healthcare providers acquire unique 10-digit NPIs identify standard way throughout industry. CMS supplies NPI, publish parts NPI record public relevance, including provider’s name, taxonomy practice address. enables search providers NPPES (National Plan Provider Enumeration System.) information produced NPI Registry provided accordance NPPES Data Dissemination Notice. charge use NPI Registry.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"NPPES NPI Registry API Documentation NPPES NPI Registry API Demo","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"","code":"if (FALSE) { ### Single NPI nppes_npi(npi = 1528060837)  ### City, state, country nppes_npi(city = \"Atlanta\",           state = \"GA\",           country = \"US\")  ### First name, city, state nppes_npi(first = \"John\",           city = \"Baltimore\",           state = \"MD\")  nppes_npi(npi = 1336413418) # NPI-2 nppes_npi(npi = 1710975040) # NPI-1 nppes_npi(npi = 1659781227) # Deactivated  ### List of NPIs npi_list <- c(1003026055,               1710983663,               1316405939,               1720392988,               1518184605,               1922056829,               1083879860)  npi_list |> purrr::map_dfr(nppes_npi) |> dplyr::group_split(outcome)  ### Data frame of NPIs npi_df <- data.frame(npi = c(1710983663,                              1003026055,                              1316405939,                              1720392988,                              1518184605,                              1922056829,                              1083879860)) npi_df |> tibble::deframe() |> purrr::map_dfr(nppes_npi)  ###Tribble example tribble <- tibble::tribble( ~fn,         ~params, \"nppes_npi\", list(1336413418), \"nppes_npi\", list(1710975040), \"nppes_npi\", list(1659781227), \"nppes_npi\", list(first = \"John\", city = \"Baltimore\", state = \"MD\"), \"nppes_npi\", list(first = \"Andrew\", city = \"Atlanta\", state = \"GA\"))  purrr::invoke_map_dfr(tribble$fn, tribble$params) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Opt Out Affidavits API — opt_out","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"list practitioners currently opted Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"","code":"opt_out(   first = NULL,   last = NULL,   npi = NULL,   specialty = NULL,   date_start = NULL,   date_end = NULL,   address = NULL,   city = NULL,   state_abb = NULL,   zip = NULL,   eligible = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"first First Name Opt Provider last Last Name Opt Provider npi National Provider Identifier (NPI) number Opt Provider specialty Specialty Opt Provider date_start Date Provider's Opt Status effective date_end Date Provider's Opt Status ends address Provider's Street Address city Provider's City state_abb Provider's State Abbreviation zip Provider's Zip Code eligible Flag indicating whether Provider eligible Order Refer clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Opt Affidavits dataset provides information providers decided participate Medicare. contains provider's NPI, specialty, address, effective dates.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"","code":"opt_out(specialty = \"Psychiatry\", zip = \"07626\") #> # A tibble: 3 × 14 #>   date       last_updated first_…¹ last_…² npi   speci…³ optou…⁴ optou…⁵ first…⁶ #>   <date>     <chr>        <chr>    <chr>   <chr> <chr>   <chr>   <chr>   <chr>   #> 1 2023-01-05 11/15/2022   Laura    Brenner 1235… Psychi… 05/01/… 05/01/… 135 CO… #> 2 2023-01-05 11/15/2022   Ruchi    Nadella 1356… Psychi… 03/30/… 03/30/… 135 CO… #> 3 2023-01-05 11/15/2022   Sireesha Jathav… 1508… Psychi… 01/22/… 01/22/… 145 CO… #> # … with 5 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, and #> #   abbreviated variable names ¹​first_name, ²​last_name, ³​specialty, #> #   ⁴​optout_effective_date, ⁵​optout_end_date, ⁶​first_line_street_address opt_out(first = \"David\", last = \"Smith\") #> # A tibble: 6 × 14 #>   date       last_updated first_…¹ last_…² npi   speci…³ optou…⁴ optou…⁵ first…⁶ #>   <date>     <chr>        <chr>    <chr>   <chr> <chr>   <chr>   <chr>   <chr>   #> 1 2023-01-05 11/15/2022   David    Smith   1649… Maxill… 06/25/… 06/25/… 909 W … #> 2 2023-01-05 11/15/2022   David    Smith   1750… Oral S… 05/07/… 05/07/… 1116 N… #> 3 2023-01-05 11/15/2022   David    Smith   1114… Psychi… 08/15/… 08/15/… 3101 S… #> 4 2023-01-05 11/15/2022   David    Smith   1023… Obstet… 10/01/… 10/01/… 755 N … #> 5 2023-01-05 11/15/2022   David    Smith   1790… Oral S… 03/26/… 03/26/… 6800 M… #> 6 2023-01-05 11/15/2022   David    Smith   1659… Dentist 05/26/… 05/26/… 3038 B… #> # … with 5 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, and #> #   abbreviated variable names ¹​first_name, ²​last_name, ³​specialty, #> #   ⁴​optout_effective_date, ⁵​optout_end_date, ⁶​first_line_street_address opt_out(npi = 1114974490) #> # A tibble: 1 × 14 #>   date       last_updated first_…¹ last_…² npi   speci…³ optou…⁴ optou…⁵ first…⁶ #>   <date>     <chr>        <chr>    <chr>   <chr> <chr>   <chr>   <chr>   <chr>   #> 1 2023-01-05 11/15/2022   David    Altchek 1114… Orthop… 07/01/… 07/01/… 535 EA… #> # … with 5 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, and #> #   abbreviated variable names ¹​first_name, ²​last_name, ³​specialty, #> #   ⁴​optout_effective_date, ⁵​optout_end_date, ⁶​first_line_street_address opt_out(state_abb = \"NY\", eligible = \"N\") #> # A tibble: 621 × 14 #>    date       last_updated first…¹ last_…² npi   speci…³ optou…⁴ optou…⁵ first…⁶ #>    <date>     <chr>        <chr>   <chr>   <chr> <chr>   <chr>   <chr>   <chr>   #>  1 2023-01-05 11/15/2022   Patrick Mcgrath 1932… Psychi… 06/01/… 06/01/… 100 PA… #>  2 2023-01-05 11/15/2022   Stephen Donovan 1942… Psychi… 05/01/… 05/01/… 1070 P… #>  3 2023-01-05 11/15/2022   William Golden  1477… Clinic… 07/01/… 07/01/… 4 RYDE… #>  4 2023-01-05 11/15/2022   Ursula  Ofman   1427… Clinic… 10/01/… 10/01/… 347 FI… #>  5 2023-01-05 11/15/2022   Lori    Davis   1902… Clinic… 07/01/… 07/01/… 80 FIF… #>  6 2023-01-05 11/15/2022   Ronald  Hoffman 1679… Genera… 04/01/… 04/01/… 330 W … #>  7 2023-01-05 11/15/2022   Linda   Penn    1033… Clinic… 05/21/… 05/21/… 98 REM… #>  8 2023-01-05 11/15/2022   Paul    Geltner 1205… Clinic… 04/01/… 04/01/… 113 UN… #>  9 2023-01-05 11/15/2022   Kathar… Strati… 1023… Psychi… 12/14/… 12/14/… 15 W 7… #> 10 2023-01-05 11/15/2022   Marilyn Oswald  1790… Clinic… 07/19/… 07/19/… 257 CE… #> # … with 611 more rows, 5 more variables: second_line_street_address <chr>, #> #   city_name <chr>, state_code <chr>, zip_code <chr>, #> #   eligible_to_order_and_refer <lgl>, and abbreviated variable names #> #   ¹​first_name, ²​last_name, ³​specialty, ⁴​optout_effective_date, #> #   ⁵​optout_end_date, ⁶​first_line_street_address opt_out(date_start = \"01/30/1998\", date_end = \"01/30/2024\") #> # A tibble: 1 × 14 #>   date       last_updated first_…¹ last_…² npi   speci…³ optou…⁴ optou…⁵ first…⁶ #>   <date>     <chr>        <chr>    <chr>   <chr> <chr>   <chr>   <chr>   <chr>   #> 1 2023-01-05 11/15/2022   Jonathan Raines  1720… Psychi… 01/30/… 01/30/… 1629 M… #> # … with 5 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, and #> #   abbreviated variable names ¹​first_name, ²​last_name, ³​specialty, #> #   ⁴​optout_effective_date, ⁵​optout_end_date, ⁶​first_line_street_address opt_out(city = \"Los Angeles\", address = \"9201 W SUNSET BLVD\") #> # A tibble: 5 × 14 #>   date       last_updated first_…¹ last_…² npi   speci…³ optou…⁴ optou…⁵ first…⁶ #>   <date>     <chr>        <chr>    <chr>   <chr> <chr>   <chr>   <chr>   <chr>   #> 1 2023-01-05 11/15/2022   Ned      Cowan   1649… Psychi… 12/30/… 12/30/… 9201 W… #> 2 2023-01-05 11/15/2022   Geemee   Chung   1497… Infect… 04/20/… 04/20/… 9201 W… #> 3 2023-01-05 11/15/2022   Genise   Fraiman 1598… Intern… 10/13/… 10/13/… 9201 W… #> 4 2023-01-05 11/15/2022   David    Saleha… 1760… Oral S… 04/06/… 04/06/… 9201 W… #> 5 2023-01-05 11/15/2022   Colleen  Ryan    1952… Family… 09/21/… 09/21/… 9201 W… #> # … with 5 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, and #> #   abbreviated variable names ¹​first_name, ²​last_name, ³​specialty, #> #   ⁴​optout_effective_date, ⁵​optout_end_date, ⁶​first_line_street_address if (FALSE) { # Returns empty list i.e., provider is not in the database opt_out(npi = 1326011057)  # Example of possible data cleaning psych <- opt_out(specialty = \"Psychiatry\")  psych |> dplyr::mutate(last_updated = as.Date(parsedate::parse_date(last_updated)), optout_effective_date = as.Date(parsedate::parse_date(optout_effective_date)), optout_end_date = as.Date(parsedate::parse_date(optout_end_date))) |> age_days(date, optout_end_date, colname = \"days_until_end\") |> age_days(last_updated, date, colname = \"days_since_update\") |> age_days(optout_effective_date, date, colname = \"days_since_optout\") |> dplyr::mutate(zip_code = purrr::map_chr(zip_code, format_zipcode)) |> dplyr::mutate(address_full = full_address(.data, \"first_line_street_address\", \"second_line_street_address\", \"city_name\", \"state_code\",\"zip_code\")) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Order and Referring API — order_refer","title":"Search the Medicare Order and Referring API — order_refer","text":"physicians non-physician practitioners legally eligible order refer Medicare program current enrollment records Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Order and Referring API — order_refer","text":"","code":"order_refer(   npi = NULL,   last = NULL,   first = NULL,   partb = NULL,   dme = NULL,   hha = NULL,   pmd = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Order and Referring API — order_refer","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Order and Referring API — order_refer","text":"npi 10-digit National Provider Identifier (NPI) last Provider's last name first Provider's first name partb logical dme logical hha logical pmd logical clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Order and Referring API — order_refer","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Order and Referring API — order_refer","text":"Medicare Order Referring dataset provides information physicians non-physician practitioners, National Provider Identifier (NPI), type/specialty legally eligible order refer Medicare program current enrollment records Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Order and Referring API — order_refer","text":"Medicare Order Referring API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Order and Referring API — order_refer","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Order and Referring API — order_refer","text":"","code":"if (FALSE) { order_refer(npi = 1003026055)  order_refer(last = \"phadke\",             first = \"radhika\")  # Unnamed List of NPIs npi_list <- c(1003026055,               1316405939,               1720392988,               1518184605,               1922056829,               1083879860)  npi_list |> purrr::map_dfr(order_refer)  # Data frame of NPIs npi_df <- data.frame(npi = c(1003026055,                              1316405939,                              1720392988,                              1518184605,                              1922056829,                              1083879860)) npi_df |> tibble::deframe() |> purrr::map_dfr(order_refer) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated geography service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"","code":"physician_by_geography(   geo_level = NULL,   fips = NULL,   geo_desc = NULL,   hcpcs_code = NULL,   hcpcs_desc = NULL,   hcpcs_drug = NULL,   pos = NULL,   year = 2020,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"geo_level Identifies level geography data row aggregated. value 'State' indicates data row aggregated single state identified Rendering Provider State column given HCPCS Code Level. value 'National' indicates data row aggregated across states given HCPCS Code Level. fips FIPS code referring provider state. variable blank reported national level. geo_desc state name provider located, reported NPPES. values include 50 United States, District Columbia, U.S. territories, Armed Forces areas, Unknown Foreign Country. Data aggregated National level identified word 'National'. hcpcs_code HCPCS code used identify specific medical service furnished provider. hcpcs_desc Description HCPCS code specific medical service furnished provider. HCPCS descriptions associated CPT codes consumer friendly descriptions provided AMA. CPT Consumer Friendly Descriptors lay synonyms CPT descriptors intended help healthcare consumers medical professionals understand clinical procedures bills patient portals. CPT Consumer Friendly Descriptors used clinical coding documentation. descriptions CMS Level II descriptions provided long form. Due variable length restrictions, CMS Level II descriptions truncated 256 bytes. result, HCPCS description can associated one HCPCS code. hcpcs_drug Identifies whether HCPCS code specific service furnished provider HCPCS listed Medicare Part B Drug Average Sales Price (ASP) File. pos Identifies whether place service submitted claims facility (value ‘F’) non-facility (value ‘O’). Non-facility generally office setting; however entities included non-facility. year Year YYYY format, 2013-2020; default 2020 clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Geography Service dataset contains information utilization, payment (allowed amount Medicare payment), submitted charges organized HCPCS place service national table organized provider state, HCPCS place service state table. national state tables also include HCPCS drug indicator identify whether HCPCS product/service drug defined Medicare Part B Drug ASP list.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Medicare Physician & Practitioners: Geography Service API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"","code":"physician_by_geography(hcpcs_code = \"0002A\",                        year = 2020) #> # A tibble: 9 × 16 #>    year rndrng…¹ rndrn…² rndrn…³ hcpcs…⁴ hcpcs…⁵ hcpcs…⁶ place…⁷ tot_r…⁸ tot_b…⁹ #>   <dbl> <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>     <int>   <int> #> 1  2020 National \"\"      Nation… 0002A   Adm sa… N       O            53     279 #> 2  2020 State    \"06\"    Califo… 0002A   Adm sa… N       O             3      91 #> 3  2020 State    \"12\"    Florida 0002A   Adm sa… N       O             5      16 #> 4  2020 State    \"17\"    Illino… 0002A   Adm sa… N       O             3      18 #> 5  2020 State    \"23\"    Maine   0002A   Adm sa… N       O             1      22 #> 6  2020 State    \"24\"    Maryla… 0002A   Adm sa… N       O             3      18 #> 7  2020 State    \"25\"    Massac… 0002A   Adm sa… N       O             3      16 #> 8  2020 State    \"34\"    New Je… 0002A   Adm sa… N       O             3      14 #> 9  2020 State    \"42\"    Pennsy… 0002A   Adm sa… N       O             4      40 #> # … with 6 more variables: tot_srvcs <int>, tot_bene_day_srvcs <int>, #> #   avg_sbmtd_chrg <dbl>, avg_mdcr_alowd_amt <dbl>, avg_mdcr_pymt_amt <dbl>, #> #   avg_mdcr_stdzd_amt <dbl>, and abbreviated variable names #> #   ¹​rndrng_prvdr_geo_lvl, ²​rndrng_prvdr_geo_cd, ³​rndrng_prvdr_geo_desc, #> #   ⁴​hcpcs_cd, ⁵​hcpcs_desc, ⁶​hcpcs_drug_ind, ⁷​place_of_srvc, #> #   ⁸​tot_rndrng_prvdrs, ⁹​tot_benes if (FALSE) { service <- purrr::map_dfr(as.character(2013:2020),            ~physician_by_service(npi = 1003000126, year = .x))  procedures <- service |>               dplyr::distinct(hcpcs_cd) |>               tibble::deframe()  arg_cross <- purrr::cross_df(list(              x = as.character(2013:2020),              y = procedures))  # National Level purrr::map2_dfr(arg_cross$x, arg_cross$y, ~physician_by_geography(geo_level = \"National\", year = .x, hcpcs_code = .y))  # State Level purrr::map2_dfr(arg_cross$x, arg_cross$y, ~physician_by_geography(geo_level = \"Georgia\", year = .x, hcpcs_code = .y)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"","code":"physician_by_provider(   npi = NULL,   last_org = NULL,   first = NULL,   cred = NULL,   gender = NULL,   type = NULL,   city = NULL,   state = NULL,   fips = NULL,   zip = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par_ind = NULL,   year = 2020,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"npi National Provider Identifier (NPI) rendering provider claim. provider NPI numeric identifier registered NPPES. last_org Last name/Organization name provider. provider registered NPPES individual (entity type code ), provider’s last name. provider registered organization (entity type code O), organization name. first individual provider's (entity type code ) first name. organization's (entity type code O) blank. cred individual provider's (entity type code ) credentials. organization's blank. gender individual provider's gender. organization's blank. type Type entity reported NPPES. entity code identifies providers registered individuals entity type code O identifies providers registered organizations. city city provider located, reported NPPES. state state provider located, reported NPPES. fips FIPS code rendering provider's state. zip provider’s zip code, reported NPPES. ruca Rural-Urban Commuting Area Code (RUCA); Census tract-based classification scheme utilizes standard Bureau Census Urbanized Area Urban Cluster definitions combination work commuting information characterize nation's Census tracts regarding rural urban status relationships. Referring Provider ZIP code cross walked United States Department Agriculture (USDA) 2010 Rural-Urban Commuting Area Codes. country country provider located, reported NPPES. specialty Derived provider specialty code reported claim. providers reported one specialty code claims, specialty code associated largest number services. par_ind Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts. value Y provider least one claim identifying provider participating Medicare accepting assignment Medicare allowed amounts within HCPCS code place service. non-participating provider may elect accept Medicare allowed amounts services accept Medicare allowed amounts services. year Year YYYY format, 2013-2020; default 2020 clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Provider dataset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Medicare Physician & Practitioners: Provider API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"","code":"physician_by_provider(npi = 1003000423,                       year = 2020) #> # A tibble: 1 × 74 #>    year rndrng…¹ rndrn…² rndrn…³ rndrn…⁴ rndrn…⁵ rndrn…⁶ rndrn…⁷ rndrn…⁸ rndrn…⁹ #>   <dbl> <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1  2020 1003000… Velotta Jennif… A       M.D.    F       I       11100 … \"\"      #> # … with 64 more variables: rndrng_prvdr_city <chr>, #> #   rndrng_prvdr_state_abrvtn <chr>, rndrng_prvdr_state_fips <chr>, #> #   rndrng_prvdr_zip5 <chr>, rndrng_prvdr_ruca <chr>, #> #   rndrng_prvdr_ruca_desc <chr>, rndrng_prvdr_cntry <chr>, #> #   rndrng_prvdr_type <chr>, rndrng_prvdr_mdcr_prtcptg_ind <chr>, #> #   tot_hcpcs_cds <chr>, tot_benes <int>, tot_srvcs <int>, #> #   tot_sbmtd_chrg <int>, tot_mdcr_alowd_amt <dbl>, tot_mdcr_pymt_amt <dbl>, …  physician_by_provider(type = \"I\",                       city = \"Hershey\",                       state = \"PA\",                       fips = 42,                       ruca =1,                       gender = \"F\",                       cred = \"M.D.\",                       specialty = \"Anesthesiology\") #> # A tibble: 19 × 74 #>     year rndrn…¹ rndrn…² rndrn…³ rndrn…⁴ rndrn…⁵ rndrn…⁶ rndrn…⁷ rndrn…⁸ rndrn…⁹ #>    <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1  2020 102323… Barbie… Carolyn \"\"      M.D.    F       I       500 Un… \"H088\"  #>  2  2020 110421… Coleman Renee   \"\"      M.D.    F       I       500 Un… \"\"      #>  3  2020 111493… Pilipo… Milena  \"\"      M.D.    F       I       500 Un… \"\"      #>  4  2020 112424… So      Celaine \"\"      M.D.    F       I       500 Un… \"H088\"  #>  5  2020 115452… Varner  Malina  \"\"      M.D.    F       I       500 Un… \"C2681\" #>  6  2020 132624… Read    Selina  \"\"      M.D.    F       I       500 Un… \"H088\"  #>  7  2020 137675… Grap    Shannon \"M\"     M.D.    F       I       500 Un… \"H187\"  #>  8  2020 146776… Cruz E… Hillenn \"\"      M.D.    F       I       500 Un… \"\"      #>  9  2020 151825… Perez   Rosa    \"\"      M.D.    F       I       500 Un… \"\"      #> 10  2020 153850… Owusu-… Ekua    \"\"      M.D.    F       I       500 Un… \"\"      #> 11  2020 155878… Dudak   Amanda  \"\"      M.D.    F       I       500 Un… \"\"      #> 12  2020 156848… Parekh  Uma     \"R\"     M.D.    F       I       500 Un… \"\"      #> 13  2020 157890… Hart    Sarah   \"B\"     M.D.    F       I       500 Un… \"\"      #> 14  2020 162928… Freest… Megan   \"\"      M.D.    F       I       500 Un… \"H088\"  #> 15  2020 171010… Mcalevy Mary    \"\"      M.D.    F       I       500 Un… \"H088\"  #> 16  2020 184146… Igleha… Robyn   \"C\"     M.D.    F       I       500 Un… \"Dept … #> 17  2020 194246… Kanekar Revati  \"\"      M.D.    F       I       500 Un… \"\"      #> 18  2020 195279… Pace    Agnes   \"\"      M.D.    F       I       500 Un… \"\"      #> 19  2020 197294… Ireton  Jordan  \"E\"     M.D.    F       I       500 Un… \"\"      #> # … with 64 more variables: rndrng_prvdr_city <chr>, #> #   rndrng_prvdr_state_abrvtn <chr>, rndrng_prvdr_state_fips <chr>, #> #   rndrng_prvdr_zip5 <chr>, rndrng_prvdr_ruca <chr>, #> #   rndrng_prvdr_ruca_desc <chr>, rndrng_prvdr_cntry <chr>, #> #   rndrng_prvdr_type <chr>, rndrng_prvdr_mdcr_prtcptg_ind <chr>, #> #   tot_hcpcs_cds <chr>, tot_benes <int>, tot_srvcs <int>, #> #   tot_sbmtd_chrg <dbl>, tot_mdcr_alowd_amt <dbl>, tot_mdcr_pymt_amt <dbl>, … if (FALSE) { provider <- purrr::map_dfr(as.character(2013:2020),            ~physician_by_provider(npi = 1003000126, year = .x)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated provider service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"","code":"physician_by_service(   npi = NULL,   last_org = NULL,   first = NULL,   cred = NULL,   gender = NULL,   type = NULL,   city = NULL,   state = NULL,   fips = NULL,   zip = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par_ind = NULL,   hcpcs_code = NULL,   hcpcs_drug = NULL,   pos = NULL,   year = 2020,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"npi National Provider Identifier (NPI) rendering provider claim. provider NPI numeric identifier registered NPPES. last_org Last name/Organization name provider. provider registered NPPES individual (entity type code=’’), provider’s last name. provider registered organization (entity type code = ‘O’), organization name. first individual provider's (entity type code=’’) first name. organization's (entity type code = ‘O’) blank. cred individual provider's (entity type code=’’) credentials. organization's blank. gender individual provider's gender. organization's blank. type Type entity reported NPPES. entity code ‘’ identifies providers registered individuals entity type code ‘O’ identifies providers registered organizations. city city provider located, reported NPPES. state state provider located, reported NPPES. fips FIPS code rendering provider's state. zip provider’s zip code, reported NPPES. ruca Rural-Urban Commuting Area Code (RUCA); Census tract-based classification scheme utilizes standard Bureau Census Urbanized Area Urban Cluster definitions combination work commuting information characterize nation's Census tracts regarding rural urban status relationships. Referring Provider ZIP code cross walked United States Department Agriculture (USDA) 2010 Rural-Urban Commuting Area Codes. country country provider located, reported NPPES. specialty Derived provider specialty code reported claim. providers reported one specialty code claims, specialty code associated largest number services. par_ind Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts. value ‘Y’ provider least one claim identifying provider participating Medicare accepting assignment Medicare allowed amounts within HCPCS code place service. non-participating provider may elect accept Medicare allowed amounts services accept Medicare allowed amounts services. hcpcs_code HCPCS code used identify specific medical service furnished provider. HCPCS codes include two levels. Level codes Current Procedural Terminology (CPT) codes maintained American Medical Association Level II codes created CMS identify products, supplies services covered CPT codes (ambulance services). hcpcs_drug Identifies whether HCPCS code specific service furnished provider HCPCS listed Medicare Part B Drug Average Sales Price (ASP) File. Please visit ASP drug pricing page additional information. pos Identifies whether place service submitted claims facility (value ‘F’) non-facility (value ‘O’). Non-facility generally office setting; however entities included non-facility. year Year YYYY format, 2013-2020; default 2020 clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Provider Service dataset provides information services procedures provided Medicare (fee--service) Part B beneficiaries physicians healthcare professionals. data based information gathered CMS administrative claims data Part B beneficiaries available CMS Chronic Conditions Data Warehouse. spending utilization data Physician Practitioners Provider Service Dataset aggregated following: NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility). can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Medicare Physician & Practitioners: Provider Service API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"","code":"if (FALSE) { # Search by NPI physician_by_service(npi = 1003000126)  # Search by Last Name for 2019 physician_by_service(last_org = \"Enkeshafi\", year = 2019)  # Multiple NPIs npis <- c(1003026055,           1316405939,           1720392988,           1518184605,           1922056829,           1083879860)  npis |> purrr::map_dfr(physician_by_service)  # Retrieve All Provider Data, 2013-2020 purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Information point time snapshot enrollment level data providers actively enrolled Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"","code":"provider_enrollment(   npi = NULL,   pecos_id = NULL,   enroll_id = NULL,   prov_type_code = NULL,   prov_type_desc = NULL,   state = NULL,   first_name = NULL,   middle_name = NULL,   last_name = NULL,   org_name = NULL,   gender = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"npi NPI 10-digit unique numeric identifier providers must obtain enrolling Medicare. assigned health care providers upon application National Plan Provider Enumeration System (NPPES). pecos_id Provider associate level variable (PAC ID) PECOS database used link across tables. PAC ID 10-digit unique numeric identifier assigned individual organization PECOS. entity-level information (e.g., tax identification numbers organizational names) linked PAC ID. PAC ID may associated multiple Enrollment IDs individual organization enrolled multiple times different circumstances. enroll_id Provider enrollment ID PECOS database used link across tables. Enrollment ID 15-digit unique alphanumeric identifier assigned new provider enrollment application. enrollment-level information (e.g., enrollment type, enrollment state, provider specialty reassignment benefits) linked Enrollment ID. prov_type_code Provider enrollment application enrollment specialty type. field shows provider’s primary specialty code. practitioners DME suppliers, please see Secondary Specialty file list secondary specialties (applicable). 20% practitioners DME suppliers least one secondary specialty. prov_type_desc Provider enrollment application enrollment specialty type description state Provider enrollment state, abbreviated location. Providers enroll state level, one PAC ID may associated multiple ENRLMT_IDs multiple STATE_CD values. first_name Individual provider first name middle_name Individual provider middle name last_name Individual provider last name org_name Organizational provider name gender Individual provider gender; F (female), M (male), 9 (unknown) clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Medicare Fee--Service Public Provider Enrollment dataset includes information providers actively approved bill Medicare completed 855O time data pulled Provider Enrollment Chain Ownership System (PECOS). release provider enrollment data related provider information releases Physician Compare Data Transparency.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Medicare Fee--Service Public Provider Enrollment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"","code":"provider_enrollment(npi = 1417918293,                     prov_type_code = \"14-41\") #> # A tibble: 1 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 14179… 387048… I20040… 14-41   PRACTI… FL      STEVEN  D       SHEINER \"\"      #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name  provider_enrollment(first_name = \"DEBRA\",                     middle_name = \"L\",                     last_name = \"FROMER\") #> # A tibble: 1 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 18018… 135525… I20031… 14-34   PRACTI… NJ      DEBRA   L       FROMER  \"\"      #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name  provider_enrollment(org_name = \"ELIZABETHTOWN COMMUNITY HOSPITAL\",                     state = \"NY\",                     prov_type_code = \"00-85\") #> # A tibble: 2 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 18917… 357755… O20101… 00-85   PART A… NY      \"\"      \"\"      \"\"      ELIZAB… #> 2 14070… 357755… O20220… 00-85   PART A… NY      \"\"      \"\"      \"\"      ELIZAB… #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name  provider_enrollment(prov_type_desc = \"PRACTITIONER - ENDOCRINOLOGY\",                     state = \"AK\",                     gender = \"F\") #> # A tibble: 4 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 11846… 892109… I20040… 14-46   PRACTI… AK      JANICE  \"A\"     KOVAL   \"\"      #> 2 17109… 094111… I20091… 14-46   PRACTI… AK      JEANNE  \"R\"     BONAR   \"\"      #> 3 14977… 438567… I20151… 14-46   PRACTI… AK      CYDNEY  \"\"      FENTON  \"\"      #> 4 10331… 953725… I20220… 14-46   PRACTI… AK      BRENDA  \"\"      GOODWIN \"\"      #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name   provider_enrollment(pecos_id = 2860305554,                     enroll_id = \"I20031110000120\",                     gender = \"9\") #> # A tibble: 1 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 11341… 286030… I20031… 14-41   PRACTI… TX      ROBERT  \"\"      YEAMAN  \"\"      #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Due Date List API — revalidation_date","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Information revalidation due dates Medicare providers. Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet. lists refreshed every two months two months’ worth due dates appended list","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"revalidation_date(   enroll_id = NULL,   npi = NULL,   first_name = NULL,   last_name = NULL,   org_name = NULL,   state = NULL,   type_code = NULL,   prov_type = NULL,   specialty = NULL,   month = \"Latest\",   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"enroll_id Enrollment ID npi National Provider Identifier (NPI) first_name First name individual provider last_name Last name individual provider org_name Legal business name organizational provider state Enrollment state type_code Provider enrollment type code (1 Part ; 2 DME; 3 Non-DME Part B) prov_type Provider type description specialty Enrollment specialty month dataset version, Latest default; possible months Feb, Apr, Jun, Jul, Aug, Sep, Oct, Nov,Dec clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Revalidation Due Date List dataset contains revalidation due dates Medicare providers due revalidate following six months. provider's due date fall within ensuing six months, due date marked 'TBD'. addition dataset also includes subfiles reassignment information given provider well due date listings clinics group practices providers.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Medicare Revalidation Due Date API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"revalidation_date(enroll_id = \"I20031110000070\",                   npi = 1184699621) #> # A tibble: 1 × 14 #>   month      enrollmen…¹ natio…² first…³ last_…⁴ organ…⁵ enrol…⁶ enrol…⁷ provi…⁸ #>   <date>     <chr>       <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 2023-01-05 I200311100… 118469… Eric    Byrd    \"\"      NC      3       Non-DM… #> # … with 5 more variables: enrollment_specialty <chr>, #> #   revalidation_due_date <chr>, adjusted_due_date <chr>, #> #   individual_total_reassign_to <chr>, receiving_benefits_reassignment <int>, #> #   and abbreviated variable names ¹​enrollment_id, #> #   ²​national_provider_identifier, ³​first_name, ⁴​last_name, ⁵​organization_name, #> #   ⁶​enrollment_state_code, ⁷​enrollment_type, ⁸​provider_type_text  revalidation_date(first_name = \"Eric\",                   last_name = \"Byrd\") #> # A tibble: 2 × 14 #>   month      enrollmen…¹ natio…² first…³ last_…⁴ organ…⁵ enrol…⁶ enrol…⁷ provi…⁸ #>   <date>     <chr>       <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 2023-01-05 I200311100… 118469… Eric    Byrd    \"\"      NC      3       Non-DM… #> 2 2023-01-05 I200901280… 159879… Eric    Byrd    \"\"      SC      3       Non-DM… #> # … with 5 more variables: enrollment_specialty <chr>, #> #   revalidation_due_date <chr>, adjusted_due_date <chr>, #> #   individual_total_reassign_to <chr>, receiving_benefits_reassignment <int>, #> #   and abbreviated variable names ¹​enrollment_id, #> #   ²​national_provider_identifier, ³​first_name, ⁴​last_name, ⁵​organization_name, #> #   ⁶​enrollment_state_code, ⁷​enrollment_type, ⁸​provider_type_text  revalidation_date(state = \"FL\",                   type_code = \"3\",                   specialty = \"General Practice\") #> # A tibble: 1,480 × 14 #>    month      enrollme…¹ natio…² first…³ last_…⁴ organ…⁵ enrol…⁶ enrol…⁷ provi…⁸ #>    <date>     <chr>      <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 2023-01-05 I20031104… 118469… John    Abt     \"\"      FL      3       Non-DM… #>  2 2023-01-05 I20031105… 135643… Humber… Fernan… \"\"      FL      3       Non-DM… #>  3 2023-01-05 I20031105… 146749… Jorge   Santan… \"\"      FL      3       Non-DM… #>  4 2023-01-05 I20031111… 110487… Marian… De La … \"\"      FL      3       Non-DM… #>  5 2023-01-05 I20031204… 143720… Mohamm… Sheikh  \"\"      FL      3       Non-DM… #>  6 2023-01-05 I20031209… 141706… Richard Rizzo   \"\"      FL      3       Non-DM… #>  7 2023-01-05 I20031211… 168964… Rene    Casano… \"\"      FL      3       Non-DM… #>  8 2023-01-05 I20031211… 126558… Maria   Montea… \"\"      FL      3       Non-DM… #>  9 2023-01-05 I20031215… 161994… Ricardo Doming… \"\"      FL      3       Non-DM… #> 10 2023-01-05 I20031215… 103321… Arles   Perdomo \"\"      FL      3       Non-DM… #> # … with 1,470 more rows, 5 more variables: enrollment_specialty <chr>, #> #   revalidation_due_date <chr>, adjusted_due_date <chr>, #> #   individual_total_reassign_to <chr>, receiving_benefits_reassignment <chr>, #> #   and abbreviated variable names ¹​enrollment_id, #> #   ²​national_provider_identifier, ³​first_name, ⁴​last_name, ⁵​organization_name, #> #   ⁶​enrollment_state_code, ⁷​enrollment_type, ⁸​provider_type_text  revalidation_date(enroll_id = \"O20110620000324\",                   org_name = \"Lee Memorial Health System\",                   state = \"FL\",                   prov_type = \"DME\",                   type_code = \"2\") #> # A tibble: 1 × 14 #>   month      enrollmen…¹ natio…² first…³ last_…⁴ organ…⁵ enrol…⁶ enrol…⁷ provi…⁸ #>   <date>     <chr>       <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 2023-01-05 O201106200… 180119… \"\"      \"\"      Lee Me… FL      2       DME     #> # … with 5 more variables: enrollment_specialty <chr>, #> #   revalidation_due_date <chr>, adjusted_due_date <chr>, #> #   individual_total_reassign_to <chr>, receiving_benefits_reassignment <chr>, #> #   and abbreviated variable names ¹​enrollment_id, #> #   ²​national_provider_identifier, ³​first_name, ⁴​last_name, ⁵​organization_name, #> #   ⁶​enrollment_state_code, ⁷​enrollment_type, ⁸​provider_type_text if (FALSE) { npi_list <- rep(c(1003026055,                   1316405939,                   1720392988,                   1518184605),                   each = 8)  months <- rep(c(\"Nov\",                 \"Oct\",                 \"Sep\",                 \"Aug\",                 \"Jul\",                 \"Jun\",                 \"Apr\",                 \"Feb\"),                 times = 4)  purrr::map2_dfr(npi_list,                 months,                 ~revalidation_date(npi = .x,                 month = .y)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Information clinic group practice revalidation Medicare enrollment.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"","code":"revalidation_group(   group_pac_id = NULL,   group_enroll_id = NULL,   group_bus_name = NULL,   group_state = NULL,   record_type = NULL,   ind_enroll_id = NULL,   ind_npi = NULL,   ind_first = NULL,   ind_last = NULL,   ind_state = NULL,   ind_specialty = NULL,   month = \"Latest\",   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"group_pac_id PAC ID provider receiving reassignment employer group_enroll_id Enrollment ID provider receiving reassignment employer group_bus_name Legal business name provider receiving reassignment employer group_state Enrollment state provider receiving reassignment employer record_type Identifies whether record reassignment (Reassignment) employment (Physician Assistant) ind_enroll_id Enrollment ID provider reassigning benefits employee ind_npi NPI provider reassigning benefits employee ind_first First name provider reassigning benefits employee ind_last Last name provider reassigning benefits employee ind_state Enrollment state provider reassigning benefits employee ind_specialty Enrollment specialty provider reassigning benefits employee month dataset version, Latest default; possible months Jan, Feb, Apr, Jun, Jul, Aug, Sep, Oct, Nov, Dec clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Revalidation Clinic Group Practice Reassignment dataset provides information physician group practice reassign billing . also includes individual employer association counts revalidation dates individual physician well clinic group practice.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Medicare Revalidation Clinic Group Practice Reassignment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"","code":"revalidation_group(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\") #> # A tibble: 3 × 16 #>   month      group_pac…¹ group…² group…³ group…⁴ group…⁵ group…⁶ recor…⁷ indiv…⁸ #>   <date>           <dbl> <chr>   <chr>   <chr>   <chr>     <int> <chr>   <chr>   #> 1 2023-01-05  4688988371 O20150… 127197… CT      TBD          34 Physic… I20200… #> 2 2023-01-05  3173866241 O20190… Hartfo… CT      TBD        1676 Physic… I20200… #> 3 2023-01-05  7618242777 O20170… Hartfo… CT      TBD         262 Physic… I20200… #> # … with 7 more variables: individual_npi <int>, individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>, and abbreviated variable #> #   names ¹​group_pac_id, ²​group_enrollment_id, ³​group_legal_business_name, #> #   ⁴​group_state_code, ⁵​group_due_date, #> #   ⁶​group_reassignments_and_physician_assistants, ⁷​record_type, …  revalidation_group(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") #> # A tibble: 1 × 16 #>   month      group_pac…¹ group…² group…³ group…⁴ group…⁵ group…⁶ recor…⁷ indiv…⁸ #>   <date>           <dbl> <chr>   <chr>   <chr>   <chr>     <int> <chr>   <chr>   #> 1 2023-01-05  9436483807 O20190… 1st Ca… FL      TBD           1 Reassi… I20190… #> # … with 7 more variables: individual_npi <int>, individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>, and abbreviated variable #> #   names ¹​group_pac_id, ²​group_enrollment_id, ³​group_legal_business_name, #> #   ⁴​group_state_code, ⁵​group_due_date, #> #   ⁶​group_reassignments_and_physician_assistants, ⁷​record_type, … if (FALSE) { npi_list <- rep(c(1326063900,                   1588191308,                   1639176803,                   1326057050), each = 9)  months <- rep(c(\"Nov\",                 \"Oct\",                 \"Sep\",                 \"Aug\",                 \"Jul\",                 \"Jun\",                 \"Apr\",                 \"Feb\",                 \"Jan\"), times = 4)  purrr::map2_dfr(npi_list, months, ~revalidation_group(ind_npi = .x, month = .y)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Reassignments Providers due Revalidation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"revalidation_reassign(   group_pac_id = NULL,   group_enroll_id = NULL,   group_bus_name = NULL,   group_state = NULL,   record_type = NULL,   ind_enroll_id = NULL,   ind_npi = NULL,   ind_first = NULL,   ind_last = NULL,   ind_state = NULL,   ind_specialty = NULL,   month = \"Latest\",   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"group_pac_id PAC ID provider receiving reassignment employer group_enroll_id Enrollment ID provider receiving reassignment employer group_bus_name Legal business name provider receiving reassignment employer group_state Enrollment state provider receiving reassignment employer record_type Identifies whether record reassignment (Reassignment) employment (Physician Assistant) ind_enroll_id Enrollment ID provider reassigning benefits employee ind_npi NPI provider reassigning benefits employee ind_first First name provider reassigning benefits employee ind_last Last name provider reassigning benefits employee ind_state Enrollment state provider reassigning benefits employee ind_specialty Enrollment specialty provider reassigning benefits employee month dataset version, Latest default; possible months Jan, Feb, Apr, Jun, Jul, Aug, Sep, Oct, Nov, Dec clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Revalidation Reassignment List dataset provides information reassignments providers due revalidation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Medicare Revalidation Reassignment List API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"revalidation_reassign(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\") #> # A tibble: 3 × 17 #>   month      group_pac…¹ group…² group…³ group…⁴ group…⁵ group…⁶ recor…⁷ indiv…⁸ #>   <date>           <dbl> <chr>   <chr>   <chr>   <chr>     <int> <chr>     <dbl> #> 1 2023-01-05  4688988371 O20150… 127197… CT      TBD          34 Physic…  2.77e9 #> 2 2023-01-05  3173866241 O20190… Hartfo… CT      TBD        1676 Physic…  2.77e9 #> 3 2023-01-05  7618242777 O20170… Hartfo… CT      TBD         262 Physic…  2.77e9 #> # … with 8 more variables: individual_enrollment_id <chr>, #> #   individual_npi <int>, individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>, and abbreviated variable #> #   names ¹​group_pac_id, ²​group_enrollment_id, ³​group_legal_business_name, #> #   ⁴​group_state_code, ⁵​group_due_date, …  revalidation_reassign(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") #> # A tibble: 1 × 17 #>   month      group_pac…¹ group…² group…³ group…⁴ group…⁵ group…⁶ recor…⁷ indiv…⁸ #>   <date>           <dbl> <chr>   <chr>   <chr>   <chr>     <int> <chr>     <dbl> #> 1 2023-01-05  9436483807 O20190… 1st Ca… FL      TBD           1 Reassi…  5.29e9 #> # … with 8 more variables: individual_enrollment_id <chr>, #> #   individual_npi <int>, individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>, and abbreviated variable #> #   names ¹​group_pac_id, ²​group_enrollment_id, ³​group_legal_business_name, #> #   ⁴​group_state_code, ⁵​group_due_date, … if (FALSE) { npi_list <- rep(c(1326063900,                   1588191308,                   1639176803,                   1326057050), each = 9)  months <- rep(c(\"Dec\",                 \"Nov\",                 \"Oct\",                 \"Sep\",                 \"Aug\",                 \"Jul\",                 \"Jun\",                 \"Apr\",                 \"Feb\"),                 times = 4)  purrr::map2_dfr(npi_list, months, ~revalidation_reassign(ind_npi = .x, month = .y)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"list type providers suppliers proper taxonomy code eligible medicare programs.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(   specialty_code = NULL,   specialty_desc = NULL,   taxonomy_code = NULL,   taxonomy_desc = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"specialty_code Code corresponds listed Medicare specialty specialty_desc Description Medicare Provider/Supplier Type taxonomy_code taxonomy codes providers use taxonomy_desc description taxonomy providers use clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Medicare Provider Supplier Taxonomy Crosswalk dataset lists providers suppliers eligible enroll Medicare programs proper healthcare provider taxonomy code. data includes Medicare speciality codes, available, provider/supplier type description, taxonomy code, taxonomy description. dataset derived information gathered National Plan Provider Enumerator System (NPPES) Provider Enrollment, Chain Ownership System (PECOS).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Medicare Provider Supplier Taxonomy Crosswalk API Medicare Find Taxonomy Code","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(specialty_code = \"B4[14]\") #> # A tibble: 13 × 4 #>    medicare_specialty_code medicare_provider_supplier_type_des…¹ provi…² provi…³ #>    <chr>                   <chr>                                 <chr>   <chr>   #>  1 B4[14]                  \"Rehabilitation Agency\"               \"261QR… Ambula… #>  2 B4[14]                  \"Organ Procurement Organization\"      \"335U0… Suppli… #>  3 B4[14]                  \"Community Mental Health Center\"      \"261QM… Ambula… #>  4 B4[14]                  \"Comprehensive Outpatient Rehabilita… \"261QR… Ambula… #>  5 B4[14]                  \"End-Stage Renal Disease Facility\"    \"261QE… Ambula… #>  6 B4[14]                  \"Federally Qualified Health Center\"   \"261QF… Ambula… #>  7 B4[14]                  \"Hospice\"                             \"251G0… Agenci… #>  8 B4[14]                  \"Histocompatibility Laboratory\"       \"291U0… Labora… #>  9 B4[14]                  \"\"                                    \"29190… Labora… #> 10 B4[14]                  \"Outpatient Physical Therapy/Occupat… \"261QR… Ambula… #> 11 B4[14]                  \"Rehabilitation Agency\"               \"315D0… Nursin… #> 12 B4[14]                  \"Religious Non-Medical Health Care I… \"282J0… Hospit… #> 13 B4[14]                  \"Rural Health Clinic \"                \"261QR… Ambula… #> # … with abbreviated variable names #> #   ¹​medicare_provider_supplier_type_description, ²​provider_taxonomy_code, #> #   ³​provider_taxonomy_description_type_classification_specialization  taxonomy_crosswalk(specialty_desc = \"Rehabilitation Agency\") #> # A tibble: 2 × 4 #>   medicare_specialty_code medicare_provider_supplier_type_desc…¹ provi…² provi…³ #>   <chr>                   <chr>                                  <chr>   <chr>   #> 1 B4[14]                  Rehabilitation Agency                  261QR0… Ambula… #> 2 B4[14]                  Rehabilitation Agency                  315D00… Nursin… #> # … with abbreviated variable names #> #   ¹​medicare_provider_supplier_type_description, ²​provider_taxonomy_code, #> #   ³​provider_taxonomy_description_type_classification_specialization  taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") #> # A tibble: 1 × 4 #>   medicare_specialty_code medicare_provider_supplier_type_desc…¹ provi…² provi…³ #>   <chr>                   <chr>                                  <chr>   <chr>   #> 1 2                       Physician/General Surgery              2086S0… Allopa… #> # … with abbreviated variable names #> #   ¹​medicare_provider_supplier_type_description, ²​provider_taxonomy_code, #> #   ³​provider_taxonomy_description_type_classification_specialization  taxonomy_crosswalk(taxonomy_desc = \"Agencies/Hospice Care Community Based\") #> # A tibble: 1 × 4 #>   medicare_specialty_code medicare_provider_supplier_type_desc…¹ provi…² provi…³ #>   <chr>                   <chr>                                  <chr>   <chr>   #> 1 B4[14]                  Hospice                                251G00… Agenci… #> # … with abbreviated variable names #> #   ¹​medicare_provider_supplier_type_description, ²​provider_taxonomy_code, #> #   ³​provider_taxonomy_description_type_classification_specialization"},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009002-2023-01-05","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9002 (2023-01-05)","title":"provider 0.0.0.9002 (2023-01-05)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9001 (2022-08-31)","title":"provider 0.0.0.9001 (2022-08-31)","text":"Updated README.","code":""}]
