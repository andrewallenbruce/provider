[{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"Missing Information","text":"npi last_name first_name","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"Missing Information","text":"CMS Public Reporting Missing Digital Contact Information Endpoints Information Methodology & Policy","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"search-examples","dir":"Articles","previous_headings":"","what":"Search Examples","title":"CMS Open Payments API","text":"","code":"overall <- 2016:2021 |>    purrr::map(\\(x) open_payments(year = x, npi = 1043218118)) |>    purrr::list_rbind() |>    janitor::remove_empty(which = c(\"rows\", \"cols\")) |>    dplyr::select(!c(primary_other, specialty_other, license_state_other))  overall |>    dplyr::filter(group == \"1\") #> # A tibble: 353 × 45 #>    year  npi      profile_id changed cov_type first_name last_name address city  #>    <chr> <chr>    <chr>      <lgl>   <chr>    <chr>      <chr>     <chr>   <chr> #>  1 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  2 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  3 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  4 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  5 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  6 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  7 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  8 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  9 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #> 10 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI PO BOX… ZEPH… #> # ℹ 343 more rows #> # ℹ 36 more variables: state <chr>, zipcode <chr>, country <chr>, #> #   primary_type <chr>, specialty <chr>, license_state <chr>, payer_id <chr>, #> #   payer_sub <chr>, payer_name <chr>, payer_state <chr>, payer_country <chr>, #> #   pay_total <dbl>, pay_date <date>, pay_count <chr>, pay_form <chr>, #> #   pay_nature <chr>, travel_city <chr>, travel_state <chr>, #> #   travel_country <chr>, phys_ownship <lgl>, third_pay <chr>, … gt_ex <- open_payments(npi = 1043218118,                         year = 2021) |>    dplyr::filter(!is.na(covered)) |>    janitor::remove_empty(which = c(\"rows\", \"cols\")) |>    dplyr::group_by(year,                    payer_name,                   pay_nature,                   pay_form,                   category) |>    dplyr::summarise(payments = dplyr::n(),                    amount = sum(pay_total),                     .groups = \"drop\") |>    dplyr::arrange(dplyr::desc(amount))  gt_ex <- gt_ex |>    gt::gt() |>    gtExtras::gt_theme_538() |>    gt::tab_style(     style = gt::cell_text(font = c(       gt::google_font(name = \"Fira Code\"),        gt::default_fonts())),     locations = gt::cells_body(columns = c(year, amount))) |>    gt::cols_hide(year) |>    gt::cols_label(payer_name = \"Payer\",                   pay_form = \"Form\",                  pay_nature = \"Nature\",                   category = \"Category\",                   payments = \"Payments\",                   amount = \"Amount\") |>    gtExtras::gt_add_divider(columns = c(\"payer_name\", \"category\"),                             style = \"solid\",                            color = \"black\",                            weight = gt::px(3),                            include_labels = FALSE) |>    gt::tab_header(title = gt::md(\"CMS Open Payments Disclosure Summary: 2021\"),     subtitle = gt::md(\"Provider Eligibility to Refer Patients to **Medicare Part B**,                        **Home Health Agencies**, **Durable Medical Equipment Suppliers**,                        and **Powered Mobility Devices**\")) |>    gt::tab_source_note(source_note = \"Source: www.cms.gov/OpenPayments\") ex <- 2016:2021 |>     purrr::map(open_payments, npi = 1043218118) |>    purrr::list_rbind() ex |>    dplyr::filter(!is.na(covered)) |>    janitor::remove_empty(which = c(\"rows\", \"cols\")) #> # A tibble: 363 × 48 #>    year  npi      profile_id changed cov_type first_name last_name address city  #>    <chr> <chr>    <chr>      <lgl>   <chr>    <chr>      <chr>     <chr>   <chr> #>  1 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  2 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  3 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  4 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  5 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  6 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  7 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  8 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  9 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #> 10 2016  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #> # ℹ 353 more rows #> # ℹ 39 more variables: state <chr>, zipcode <chr>, country <chr>, #> #   primary_type <chr>, primary_other <chr>, specialty <chr>, #> #   specialty_other <chr>, license_state <chr>, license_state_other <chr>, #> #   payer_id <chr>, payer_sub <chr>, payer_name <chr>, payer_state <chr>, #> #   payer_country <chr>, pay_total <dbl>, pay_date <date>, pay_count <chr>, #> #   pay_form <chr>, pay_nature <chr>, travel_city <chr>, travel_state <chr>, … open_payments(npi = 1043218118, year = 2019) |>    dplyr::filter(!is.na(covered)) |>    janitor::remove_empty(which = c(\"rows\", \"cols\")) #> # A tibble: 65 × 44 #>    year  npi      profile_id changed cov_type first_name last_name address city  #>    <chr> <chr>    <chr>      <lgl>   <chr>    <chr>      <chr>     <chr>   <chr> #>  1 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  2 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  3 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  4 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  5 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  6 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  7 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  8 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #>  9 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #> 10 2019  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… #> # ℹ 55 more rows #> # ℹ 35 more variables: state <chr>, zipcode <chr>, country <chr>, #> #   primary_type <chr>, primary_other <chr>, specialty <chr>, #> #   specialty_other <chr>, license_state <chr>, license_state_other <chr>, #> #   payer_id <chr>, payer_sub <chr>, payer_name <chr>, payer_state <chr>, #> #   payer_country <chr>, pay_total <dbl>, pay_date <date>, pay_count <chr>, #> #   pay_form <chr>, pay_nature <chr>, travel_city <chr>, travel_state <chr>, … open_payments(city = \"Jacksonville\", state = \"FL\", year = 2020) |>    dplyr::filter(!is.na(covered)) |>    janitor::remove_empty(which = c(\"rows\", \"cols\")) #> # A tibble: 671 × 49 #>    year  npi        profile_id changed cov_type first_name middle_name last_name #>    <chr> <chr>      <chr>      <lgl>   <chr>    <chr>      <chr>       <chr>     #>  1 2020  1891786059 267451     FALSE   Physici… VICTOR     NA          MAQUERA   #>  2 2020  1043212269 1360       FALSE   Physici… MARK       ALEXANDER   MOSTOVYCH #>  3 2020  1497851042 21969      FALSE   Physici… SYED       A.          ASAD      #>  4 2020  1497851042 21969      FALSE   Physici… SYED       A.          ASAD      #>  5 2020  1497166425 4216556    FALSE   Physici… JAKE       H.          MCKAY     #>  6 2020  1689834459 122364     FALSE   Physici… YOUSSEF    NA          NEJJAR    #>  7 2020  1336198209 105650     FALSE   Physici… Ali        NA          Chahlavi  #>  8 2020  1336198209 105650     FALSE   Physici… Ali        NA          Chahlavi  #>  9 2020  1336198209 105650     FALSE   Physici… Ali        NA          Chahlavi  #> 10 2020  1336198209 105650     FALSE   Physici… Ali        NA          Chahlavi  #> # ℹ 661 more rows #> # ℹ 41 more variables: suffix <chr>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr>, country <chr>, primary_type <chr>, primary_other <chr>, #> #   specialty <chr>, specialty_other <chr>, license_state <chr>, #> #   license_state_other <chr>, payer_id <chr>, payer_sub <chr>, #> #   payer_name <chr>, payer_state <chr>, payer_country <chr>, pay_total <dbl>, #> #   pay_date <date>, pay_count <chr>, pay_form <chr>, pay_nature <chr>, … open_payments(payer_id = 100000151589, year = 2020) |>    dplyr::filter(!is.na(covered)) |>    janitor::remove_empty(which = c(\"rows\", \"cols\")) #> # A tibble: 719 × 46 #>    year  npi        profile_id changed cov_type first_name middle_name last_name #>    <chr> <chr>      <chr>      <lgl>   <chr>    <chr>      <chr>       <chr>     #>  1 2020  1740354588 583485     FALSE   Physici… ALAN       G.          KABAT     #>  2 2020  1114017175 141692     FALSE   Physici… BRIDGITTE  S.          LEE       #>  3 2020  1063417863 962954     FALSE   Physici… DAVID      G.          EVANS     #>  4 2020  1548536972 1319821    FALSE   Physici… EIN GUN    J.          SONG      #>  5 2020  1528032620 68761      FALSE   Physici… FRANCIS    S.          MAH       #>  6 2020  1184636029 279929     FALSE   Physici… GARY       W.          JERKINS   #>  7 2020  1689963589 1337900    FALSE   Physici… GURUPRASAD R.          PATTAR    #>  8 2020  1962496265 269961     FALSE   Physici… HILARY     E.          BALDWIN   #>  9 2020  1639160112 28253      FALSE   Physici… JASON      NA          BACHARACH #> 10 2020  1366413023 243626     FALSE   Physici… JODI       NA          LUCHS     #> # ℹ 709 more rows #> # ℹ 38 more variables: suffix <chr>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr>, country <chr>, primary_type <chr>, primary_other <chr>, #> #   specialty <chr>, specialty_other <chr>, license_state <chr>, #> #   license_state_other <chr>, payer_id <chr>, payer_sub <chr>, #> #   payer_name <chr>, payer_state <chr>, payer_country <chr>, pay_total <dbl>, #> #   pay_date <date>, pay_count <chr>, pay_form <chr>, pay_nature <chr>, …"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"applicable-group-purchasing-organization-gpo","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Applicable Group Purchasing Organization (GPO)","title":"CMS Open Payments API","text":"Applicable group purchasing organizations (GPOs) entities operate United States purchase, arrange negotiate purchase covered drugs, devices, biologicals, medical supplies group individuals entities, solely use entity .","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"applicable-manufacturers","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Applicable Manufacturers","title":"CMS Open Payments API","text":"Applicable manufacturers entities operate United States (1) engaged production, preparation, propagation, compounding, conversion covered drug, device, biological, medical supply, covered drug, device, biological medical supply solely use within entity entity’s patients (definition include distributors wholesalers (including, limited , repackagers, relabelers, kit assemblers) hold title covered drug, device, biological medical supply); (2) entities common ownership entity described part (1) definition, provides assistance support entities respect production, preparation, propagation, compounding, conversion, marketing, promotion, sale, distribution covered drug, device, biological medical supply. (See 42 CFR 403.902)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"covered-recipients","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Covered Recipients","title":"CMS Open Payments API","text":"physician, physician assistant, nurse practitioner, clinical nurse specialist, certified registered nurse anesthetist, certified nurse-midwife bona fide employee applicable manufacturer reporting payment; teaching hospital, institution received payment 1886(d)(5)(B), 1886(h), 1886(s) Act last calendar year information available.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"natures-of-payment","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Natures of Payment","title":"CMS Open Payments API","text":"Natures payment categories categories must used describe payment transfer value made (See 42 CFR 403.904(e)(2)). applicable “general” payment type, research ownership. categories : Acquisitions (applicable Program Year 2021 subsequent program years) Charitable contributions Compensation services consulting, including serving faculty speaker event continuing education program Compensation serving faculty speaker accredited certified continuing education program (Applicable Program Years 2013 - 2020) Compensation serving faculty speaker unaccredited non-certified continuing education program (Applicable Program Years 2013 - 2020) Compensation serving faculty speaker medical education program (Applicable beginning Program Year 2021 subsequent program years) Consulting fees Current prospective ownership investment interest (removed starting Program Year 2023) Debt Forgiveness (Applicable beginning Program Year 2021 subsequent program years) Education Entertainment Food beverage Gift Grant Honoraria Long-term medical supply device loan (Applicable beginning Program Year 2021 subsequent program years) Royalty license Space rental facility fees (teaching hospitals ) Travel lodging","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"national-provider-identifier-npi","dir":"Articles","previous_headings":"Open Payments Glossary","what":"National Provider Identifier (NPI)","title":"CMS Open Payments API","text":"NPI unique identification number covered health care providers. NPI 10-position numeric identifier, check digit 10th position intelligence health care provider number. (See 45 CFR 162.406)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"newly-added-covered-recipients","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Newly Added Covered Recipients","title":"CMS Open Payments API","text":"Open Payments expanded January 2021 include five new provider types: Physician Assistants: physician assistant performs services individual legally authorized perform (State individual performs services) accordance State law (State regulatory mechanism provided State law), meets training, education, experience requirements (combination thereof) Secretary may prescribe regulations. Nurse Practitioners: nurse practitioner performs services individual legally authorized perform (State individual performs services) accordance State law (State regulatory mechanism provided State law), meets training, education, experience requirements (combination thereof) Secretary may prescribe regulations. Clinical Nurse Specialists: individual registered nurse licensed practice nursing State clinical nurse specialist services performed; holds master’s degree defined clinical area nursing accredited educational institution. Certified Registered Nurse Anesthetists: certified registered nurse anesthetist licensed State meets education, training, requirements relating anesthesia services related care Secretary may prescribe. prescribing requirements Secretary may use requirements established national organization certification nurse anesthetists. term also includes, prescribed Secretary, Anesthesiologist Assistant. Certified Nurse-Midwives: registered nurse successfully completed program study clinical experience meeting guidelines prescribed Secretary, certified organization recognized Secretary.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"non-physician-practitioner-covered-recipient","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Non-Physician Practitioner Covered Recipient","title":"CMS Open Payments API","text":"Health care providers practice either collaboration supervision physician, including physician assistants, nurse practitioners, clinical nurse specialists, referred non-physician practitioners (NPPs).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"ownership-or-investment-interest","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Ownership or Investment Interest","title":"CMS Open Payments API","text":"Ownership investment interest includes, limited : Stock Stock option(s) (received compensation, exercised) Partnership share(s) Limited liability company membership(s) Loans Bonds financial instruments secured entity’s property revenue portion property revenue may direct indirect debt, equity means (See 42 CFR 403.902). Please note exceptions definition.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"physician","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Physician","title":"CMS Open Payments API","text":"purposes Open Payments, “physician” following types professionals legally authorized state practice, regardless whether Medicare, Medicaid, Children’s health Insurance Program (CHIP) providers: Doctors Medicine Osteopathic Medicine Doctors Dental Medicine Dental Surgery Doctors Podiatric Medicine Doctors Optometry Chiropractors Note: Medical residents excluded definition physicians purpose program.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"reporting-entities","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Reporting Entities","title":"CMS Open Payments API","text":"Reporting entities applicable manufacturers applicable GPOs.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"research","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Research","title":"CMS Open Payments API","text":"Research systematic investigation develop contribute generalized knowledge public health, including behavioral social-sciences research. definition includes basic applied research, product development. (See 42 CFR 403.902)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"teaching-hospital","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Teaching Hospital","title":"CMS Open Payments API","text":"Teaching hospitals hospitals receive payment Medicare direct graduate medical education (GME), IPPS indirect medical education (IME), psychiatric hospital IME programs last calendar year information available. (See 42 CFR 403.902) purposes Open Payments, “teaching hospitals” hospitals received payment Medicare direct graduate medical education (GME), inpatient prospective payment system (IPPS) indirect medical education (IME), psychiatric hospital IME programs last calendar year information available.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"third-parties","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Third Parties","title":"CMS Open Payments API","text":"Third parties individuals entities, whether operate United States.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"transfers-of-value","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Transfers of Value","title":"CMS Open Payments API","text":"Payments transfers value anything value given applicable manufacturer applicable GPO covered recipient physician owner/investor fall within one excluded categories rule. (See 42 CFR 403.902)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"related-links","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Related Links","title":"CMS Open Payments API","text":"Natures Payment Law Policy Audits Penalties Reporting Entities Open Payments: General Resources","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/doctors-and-clinicians.html","id":"search-examples","dir":"Articles","previous_headings":"","what":"Search Examples","title":"Doctors and Clinicians","text":"","code":"doctors_and_clinicians(npi = 1407263999) #> # A tibble: 2 × 25 #>   npi        pac_id     enroll_id first_name middle_name last_name suffix gender #>   <chr>      <chr>      <chr>     <chr>      <chr>       <chr>     <chr>  <chr>  #> 1 1407263999 8729208152 I2014100… ROBIN      A           AVERY     NA     F      #> 2 1407263999 8729208152 I2014100… ROBIN      A           AVERY     NA     F      #> # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #> #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #> #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #> #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone <chr>, #> #   ind_assn <chr>, group_assn <chr> doctors_and_clinicians(school = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\",                         grad_year = 2000,                         state = \"FL\") #> # A tibble: 78 × 25 #>    npi        pac_id    enroll_id first_name middle_name last_name suffix gender #>    <chr>      <chr>     <chr>     <chr>      <chr>       <chr>     <chr>  <chr>  #>  1 1043312556 83250900… I2010011… NICOLE     NA          IOVINE    NA     F      #>  2 1043312556 83250900… I2010011… NICOLE     NA          IOVINE    NA     F      #>  3 1043312556 83250900… I2010011… NICOLE     NA          IOVINE    NA     F      #>  4 1043312556 83250900… I2010011… NICOLE     NA          IOVINE    NA     F      #>  5 1043312556 83250900… I2010011… NICOLE     NA          IOVINE    NA     F      #>  6 1043312556 83250900… I2010011… NICOLE     NA          IOVINE    NA     F      #>  7 1043312556 83250900… I2010011… NICOLE     NA          IOVINE    NA     F      #>  8 1073549895 24664809… I2007112… ALAN       B           BENNIE    NA     M      #>  9 1073549895 24664809… I2007112… ALAN       B           BENNIE    NA     M      #> 10 1073575403 86280744… I2006101… DANIEL     J           GASSERT   NA     M      #> # ℹ 68 more rows #> # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #> #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #> #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #> #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone <chr>, #> #   ind_assn <chr>, group_assn <chr> c(0, 501) |>    purrr::map(\\(x) doctors_and_clinicians(state = \"GA\", city = \"Valdosta\", offset = x)) |>    purrr::list_rbind() #> # A tibble: 720 × 25 #>    npi        pac_id    enroll_id first_name middle_name last_name suffix gender #>    <chr>      <chr>     <chr>     <chr>      <chr>       <chr>     <chr>  <chr>  #>  1 1003038720 06483608… I2007121… BARBARA    F           FRIER     NA     F      #>  2 1003125238 12545244… I2015110… JEREMY     STEPHEN     COLYER    NA     M      #>  3 1003125238 12545244… I2015110… JEREMY     STEPHEN     COLYER    NA     M      #>  4 1003198268 18505427… I2012112… COLE       NA          BURGESS   NA     M      #>  5 1003287533 60021732… I2017112… KACIE      PARRISH     JOHNSON   NA     F      #>  6 1003315227 73153412… I2021081… WILLIAM    NA          HARTLEY   NA     M      #>  7 1003445297 17597708… I2021111… VICKI      NA          WETTER    NA     F      #>  8 1003816935 06483969… I2010092… MARY       NA          FULP-PYE  NA     F      #>  9 1013250612 21636573… I2013102… HEATH      NA          FARMER    NA     M      #> 10 1013250612 21636573… I2013102… HEATH      NA          FARMER    NA     M      #> # ℹ 710 more rows #> # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #> #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #> #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #> #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone <chr>, #> #   ind_assn <chr>, group_assn <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/doctors-and-clinicians.html","id":"data-dictionary","dir":"Articles","previous_headings":"Search Examples","what":"Data Dictionary","title":"Doctors and Clinicians","text":"npi pac_id enroll_id first_name middle_name last_name suffix gender credential school grad_year specialty specialty_sec telehealth org_name org_pac_id org_members address city state zipcode phone ind_assn group_assn","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/facility-affiliations.html","id":"search-examples","dir":"Articles","previous_headings":"","what":"Search Examples","title":"Facility Affiliations","text":"","code":"facility_affiliations(npi = 1003019563) #> # A tibble: 4 × 9 #>   npi        pac_id     first_name middle_name last_name suffix facility_type #>   <chr>      <chr>      <chr>      <chr>       <chr>     <chr>  <chr>         #> 1 1003019563 4688707060 JOHN       JOSEPH      FRANK     NA     Hospital      #> 2 1003019563 4688707060 JOHN       JOSEPH      FRANK     NA     Hospital      #> 3 1003019563 4688707060 JOHN       JOSEPH      FRANK     NA     Hospital      #> 4 1003019563 4688707060 JOHN       JOSEPH      FRANK     NA     Hospital      #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(facility_ccn = \"060004\") #> # A tibble: 182 × 9 #>    npi        pac_id     first_name middle_name last_name   suffix facility_type #>    <chr>      <chr>      <chr>      <chr>       <chr>       <chr>  <chr>         #>  1 1003002890 6002953973 DANIEL     RICHARD     HAMMAN      NA     Hospital      #>  2 1003019563 4688707060 JOHN       JOSEPH      FRANK       NA     Hospital      #>  3 1003045022 5890926059 ARTHUR     H           DONAHUE     NA     Hospital      #>  4 1003105636 6507182847 JAMES      CHARLES     HIGHAM KES… NA     Hospital      #>  5 1003234162 4284940248 MATTHEW    NA          MCDIARMID   NA     Hospital      #>  6 1003845249 1254326994 GARETH     R           WEINER      NA     Hospital      #>  7 1013069566 7810096328 AMITY      D           HELZER      NA     Hospital      #>  8 1013115989 4385891712 ASHLEY     L           PYLE        NA     Hospital      #>  9 1013979566 1557374014 FIRAS      NA          MUWALLA     NA     Hospital      #> 10 1023261963 2860687431 CHAD       MICHAEL     LUCCI       NA     Hospital      #> # ℹ 172 more rows #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(parent_ccn = 670055) #> # A tibble: 9 × 9 #>   npi        pac_id     first_name middle_name last_name  suffix facility_type   #>   <chr>      <chr>      <chr>      <chr>       <chr>      <chr>  <chr>           #> 1 1083742829 5698833655 RAFAEL     JORGE       FORNARIS   NA     Inpatient reha… #> 2 1144429580 3577659580 LYSA       LEE         CURRY      NA     Inpatient reha… #> 3 1558595660 8921241142 JOHN       D           ALFONSO    NA     Inpatient reha… #> 4 1609973650 0840373239 GEORGE     KIMBELL     WILCOX     NA     Inpatient reha… #> 5 1710112370 9739337122 VIDYA      NA          VADDEMPUDI NA     Inpatient reha… #> 6 1720069859 7012947229 WILLIAM    WARREN      JANES      NA     Inpatient reha… #> 7 1740577212 0345473773 GEOFF      R           WEIKLE     NA     Inpatient reha… #> 8 1770861742 5193940997 AUSTON     J           MYERS      NA     Inpatient reha… #> 9 1912260464 5092036509 SAAD       MD          MANSOOR    NA     Inpatient reha… #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(first_name = \"John\",                        last_name = \"Hill\",                        facility_type = \"Home Health Agency\") #> # A tibble: 7 × 9 #>   npi        pac_id     first_name middle_name last_name suffix facility_type    #>   <chr>      <chr>      <chr>      <chr>       <chr>     <chr>  <chr>            #> 1 1174587588 7214998079 JOHN       C           HILL      III    Home health age… #> 2 1174587588 7214998079 JOHN       C           HILL      III    Home health age… #> 3 1174587588 7214998079 JOHN       C           HILL      III    Home health age… #> 4 1558380444 4789619362 JOHN       M           HILL      NA     Home health age… #> 5 1558380444 4789619362 JOHN       M           HILL      NA     Home health age… #> 6 1558380444 4789619362 JOHN       M           HILL      NA     Home health age… #> 7 1558380444 4789619362 JOHN       M           HILL      NA     Home health age… #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/facility-affiliations.html","id":"data-dictionary","dir":"Articles","previous_headings":"Search Examples","what":"Data Dictionary","title":"Facility Affiliations","text":"npi pac_id first_name middle_name last_name suffix facility_type facility_ccn parent_ccn","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/geocoding.html","id":"providers-current-practice-address","dir":"Articles","previous_headings":"","what":"Provider’s Current Practice Address","title":"Healthcare Providers: Why Geocode?","text":"","code":"geo_nppes <- nppes_npi(npi = 1760485387)  geo_nppes #> # A tibble: 4 × 29 #>   npi      entype enumeration_date enumeration_duration      last_updated status #>   <chr>    <chr>  <date>           <Duration>                <date>       <chr>  #> 1 1760485… Ind    2005-05-27       567734400s (~17.99 years) 2012-12-04   A      #> 2 1760485… Ind    2005-05-27       567734400s (~17.99 years) 2012-12-04   A      #> 3 1760485… Ind    2005-05-27       567734400s (~17.99 years) 2012-12-04   A      #> 4 1760485… Ind    2005-05-27       567734400s (~17.99 years) 2012-12-04   A      #> # ℹ 23 more variables: first_name <chr>, middle_name <chr>, last_name <chr>, #> #   credential <chr>, gender <chr>, sole_proprietor <lgl>, purpose <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, country <chr>, #> #   phone_number <chr>, fax_number <chr>, tx_code <chr>, tx_desc <chr>, #> #   tx_group <chr>, tx_state <chr>, tx_license <chr>, tx_primary <lgl>, #> #   id_issuer <chr>, id_identifier <chr>, id_state <chr> geo_add <- geo_nppes |>    dplyr::select(address_1, city, state, postal_code) |>   dplyr::filter(dplyr::row_number() %in% 1) |>    dplyr::mutate(address_1 = stringr::str_remove_all(address_1, \"\\\\.\")) #> Error in `dplyr::select()`: #> ! Can't subset columns that don't exist. #> ✖ Column `address_1` doesn't exist.  geo_add #> Error in eval(expr, envir, enclos): object 'geo_add' not found geo_ltlg <- geo_add |> tidygeocoder::geocode(street = address_1,                                              city = city,                                              state = state,                                              postalcode = postal_code,                                              method = \"census\",                                              lat = latitude,                                               long = longitude,                                               full_results = TRUE) #> Error in eval(expr, envir, enclos): object 'geo_add' not found geo_ltlg #> Error in eval(expr, envir, enclos): object 'geo_ltlg' not found leaflet::leaflet() |>    leaflet::addTiles() |>    leaflet::addMarkers(lng = geo_ltlg$longitude,                        lat = geo_ltlg$latitude) #> Error in eval(expr, envir, enclos): object 'geo_ltlg' not found"},{"path":"https://andrewallenbruce.github.io/provider/articles/hospital-enrollment.html","id":"search-examples","dir":"Articles","previous_headings":"","what":"Search Examples","title":"Hospital Enrollment","text":"","code":"hospital_enrollment(facility_ccn = \"060004\") #> # A tibble: 1 × 36 #>   npi        enroll_id   enroll_state specialty_code specialty_desc facility_ccn #>   <chr>      <chr>       <chr>        <chr>          <chr>          <chr>        #> 1 1629071758 O200706190… CO           00-09          PART A PROVID… 060004       #> # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #> #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #> #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #> #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #> #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #> #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, #> #   sg_childrens <lgl>, sg_long_term <lgl>, sg_short_term <lgl>, … hospital_enrollment(state = \"GA\", city = \"VALDOSTA\") #> # A tibble: 3 × 36 #>   npi        enroll_id   enroll_state specialty_code specialty_desc facility_ccn #>   <chr>      <chr>       <chr>        <chr>          <chr>          <chr>        #> 1 1306896253 O200803120… GA           00-09          PART A PROVID… 110122       #> 2 1467404046 O200803130… GA           00-09          PART A PROVID… 11T122       #> 3 1538417753 O201212130… GA           00-09          PART A PROVID… 114036       #> # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #> #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #> #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #> #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #> #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #> #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, #> #   sg_childrens <lgl>, sg_long_term <lgl>, sg_short_term <lgl>, … hospital_enrollment(enroll_state = \"GA\") #> # A tibble: 214 × 36 #>    npi        enroll_id  enroll_state specialty_code specialty_desc facility_ccn #>    <chr>      <chr>      <chr>        <chr>          <chr>          <chr>        #>  1 1588664007 O20020826… GA           00-09          PART A PROVID… 112011       #>  2 1376574277 O20021108… GA           00-09          PART A PROVID… 110005       #>  3 1912951963 O20030515… GA           00-09          PART A PROVID… 110177       #>  4 1063406684 O20030925… GA           00-09          PART A PROVID… 110043       #>  5 1447252044 O20040406… GA           00-09          PART A PROVID… 112016       #>  6 1679543672 O20040513… GA           00-09          PART A PROVID… 114008       #>  7 1508810565 O20040823… GA           00-09          PART A PROVID… 110168       #>  8 1922178789 O20041013… GA           00-09          PART A PROVID… 113301       #>  9 1194722389 O20041103… GA           00-09          PART A PROVID… 112013       #> 10 1811940976 O20041109… GA           00-09          PART A PROVID… 110201       #> # ℹ 204 more rows #> # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #> #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #> #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #> #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #> #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #> #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, … hospital_enrollment(pac_id_org = 6002723947) #> # A tibble: 1 × 36 #>   npi        enroll_id   enroll_state specialty_code specialty_desc facility_ccn #>   <chr>      <chr>       <chr>        <chr>          <chr>          <chr>        #> 1 1588664007 O200208260… GA           00-09          PART A PROVID… 112011       #> # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #> #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #> #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #> #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #> #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #> #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, #> #   sg_childrens <lgl>, sg_long_term <lgl>, sg_short_term <lgl>, …"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"medicare-multiple-chronic-conditions-api","dir":"Articles","previous_headings":"","what":"Medicare Multiple Chronic Conditions API","title":"Medicare Chronic Conditions APIs","text":"Multiple Chronic Conditions dataset provides information number chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories (0-1, 2-3, 4-5 6 ).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"examples","dir":"Articles","previous_headings":"Medicare Multiple Chronic Conditions API","what":"Examples","title":"Medicare Chronic Conditions APIs","text":"","code":"cc_multiple(year = 2018,              geo_lvl = \"State\",              geo_desc = \"California\") |>    dplyr::select(!c(bene_geo_lvl, bene_geo_cd)) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() #> Error in cc_multiple(year = 2018, geo_lvl = \"State\", geo_desc = \"California\"): unused arguments (geo_lvl = \"State\", geo_desc = \"California\") cc_multiple(year = 2007,              geo_lvl = \"National\",              demo_lvl = \"Race\") |>    dplyr::select(!c(bene_geo_desc, bene_geo_cd)) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() #> Error in cc_multiple(year = 2007, geo_lvl = \"National\", demo_lvl = \"Race\"): unused arguments (geo_lvl = \"National\", demo_lvl = \"Race\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"medicare-specific-chronic-conditions-api","dir":"Articles","previous_headings":"","what":"Medicare Specific Chronic Conditions API","title":"Medicare Chronic Conditions APIs","text":"Select Chronic Conditions dataset provides information 21 selected chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography distinct chronic conditions listed . Alcohol Abuse Drug Abuse / Substance Abuse Alzheimer’s Disease Related Dementia Arthritis (Osteoarthritis Rheumatoid) Asthma Atrial Fibrillation Autism Spectrum Disorders Cancer (Breast, Colorectal, Lung, Prostate) Chronic Kidney Disease Chronic Obstructive Pulmonary Disease Depression Diabetes Drug Abuse / Substance Abuse Heart Failure Hepatitis (Chronic Viral B & C) HIV/AIDS Hyperlipidemia (High cholesterol) Hypertension (High blood pressure) Ischemic Heart Disease Osteoporosis Schizophrenia Psychotic Disorders Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"examples-1","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Examples","title":"Medicare Chronic Conditions APIs","text":"","code":"cc_specific(year = 2018,              geo_lvl = \"State\",              geo_desc = \"California\") |>    dplyr::select(!c(bene_geo_lvl, bene_geo_cd)) |>    dplyr::arrange(dplyr::desc(bene_age_lvl), bene_demo_lvl) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() #> Error in cc_specific(year = 2018, geo_lvl = \"State\", geo_desc = \"California\"): unused arguments (geo_lvl = \"State\", geo_desc = \"California\") cc_specific(year = 2007,              geo_lvl = \"National\",              demo_lvl = \"Race\") |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() #> Error in cc_specific(year = 2007, geo_lvl = \"National\", demo_lvl = \"Race\"): unused arguments (geo_lvl = \"National\", demo_lvl = \"Race\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"data-dictionary","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Data Dictionary","title":"Medicare Chronic Conditions APIs","text":"Bene_Geo_Lvl Beneficiary Geographic Level Bene_Geo_Desc Beneficiary Geographic Description Bene_Geo_Cd Beneficiary Geographic Code Bene_Age_Lvl Beneficiary Age Level Bene_Demo_Lvl Beneficiary Demographic Level Bene_Demo_Desc Beneficiary Demographic Description Bene_MCC Beneficiary Chronic Condition Bene_Cond Beneficiary Multiple Chronic Condition Group Prvlnc Prevalence Tot_Mdcr_Stdzd_Pymt_PC1 Total Medicare Standardized Per Capita Spending Tot_Mdcr_Pymt_PC1 Total Medicare Per Capita Spending Hosp_Readmsn_Rate1 Hospital Readmission Rate ER_Visits_Per_1000_Benes1 Emergency Room Visits per 1,000 Beneficiaries","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"related-links","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Related Links","title":"Medicare Chronic Conditions APIs","text":"Medicare Multiple Chronic Conditions API Medicare Specific Chronic Conditions API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Medicare Public Provider Enrollment API","text":"","code":"provider_enrollment(npi = 1003026055) #> # A tibble: 1 × 11 #>   npi   pac_id enroll_id specialty_code specialty_desc state org_name first_name #>   <chr> <chr>  <chr>     <chr>          <chr>          <chr> <chr>    <chr>      #> 1 1003… 44868… I2017040… 14-46          PRACTITIONER … FL    NA       RADHIKA    #> # ℹ 3 more variables: middle_name <chr>, last_name <chr>, gender <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"data-dictionary","dir":"Articles","previous_headings":"Example","what":"Data Dictionary","title":"Medicare Public Provider Enrollment API","text":"npi pecos_asct_cntl_id enrlmt_id provider_type_cd provider_type_desc state_cd first_name mdl_name last_name org_name gndr_sw reasgn_bnft_enrlmt_id rcv_bnft_enrlmt_id city_name zip_cd","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"related-links","dir":"Articles","previous_headings":"Example","what":"Related Links","title":"Medicare Public Provider Enrollment API","text":"Medicare Fee--Service Public Provider Enrollment API Medicare Fee--Service Public Provider Enrollment - Data Dictionary Fee--Service Public Provider Enrollment Methodology","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"search-examples","dir":"Articles","previous_headings":"","what":"Search Examples","title":"Medicare Monthly Enrollment API","text":"Set level argument “National” period argument “Year” return year--year national data:  set just level argument include month--month data well:  Setting level “State” return data state:  Select particular state:  county state:  particular county:","code":"beneficiary_enrollment(level = \"National\",                         period = \"Year\") |>    dplyr::select(!c(period:fips)) #> # A tibble: 10 × 20 #>     year bene_total bene_orig bene_ma_oth bene_aged_total bene_aged_esrd #>    <int>      <int>     <int>       <int>           <int>          <int> #>  1  2013   52425659  37613096    14812563        43761388         234590 #>  2  2014   54013038  37790373    16222665        45216665         245705 #>  3  2015   55496222  38025274    17470948        46630952         258350 #>  4  2016   56981183  38610384    18370800        48143217         269019 #>  5  2017   58457244  38667830    19789414        49678033         278642 #>  6  2018   59989883  38665082    21324800        51303898         290243 #>  7  2019   61514510  38577012    22937498        52991455         301798 #>  8  2020   62840267  37776345    25063922        54531919         305080 #>  9  2021   63892626  36356380    27536246        55851321         305227 #> 10  2022   65027175  35197077    29830099        57300339         304390 #> # ℹ 14 more variables: bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(level = \"National\") |>    dplyr::select(!c(level:fips)) |>    dplyr::filter(period %in% month.name) #> # A tibble: 121 × 21 #>     year period  bene_total bene_orig bene_ma_oth bene_aged_total bene_aged_esrd #>    <int> <chr>        <int>     <int>       <int>           <int>          <int> #>  1  2013 January   51727774  37204960    14522814        43355761         257243 #>  2  2013 Februa…   51810690  37247253    14563437        43388016         252347 #>  3  2013 March     51946603  37336191    14610412        43467837         248322 #>  4  2013 April     52052091  37436020    14616071        43523878         244081 #>  5  2013 May       52166970  37475723    14691247        43592624         240089 #>  6  2013 June      52301688  37547041    14754647        43662467         236203 #>  7  2013 July      52466118  37618358    14847760        43772726         232469 #>  8  2013 August    52626340  37713161    14913179        43882570         228612 #>  9  2013 Septem…   52782073  37803887    14978186        43982185         224793 #> 10  2013 October   52940709  37908729    15031980        44091229         220966 #> # ℹ 111 more rows #> # ℹ 14 more variables: bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(period = \"Year\",                         level = \"State\") |>    dplyr::select(!c(period:state, county:fips)) #> # A tibble: 570 × 21 #>     year state_name           bene_total bene_orig bene_ma_oth bene_aged_total #>    <int> <chr>                     <int>     <int>       <int>           <int> #>  1  2013 Alabama                  921477    711448      210029          698720 #>  2  2013 Alaska                    76224     75676         549           63712 #>  3  2013 Arizona                 1050128    658948      391180          898705 #>  4  2013 Arkansas                 572713    467399      105315          438855 #>  5  2013 California              5300177   3318396     1981781         4582391 #>  6  2013 Colorado                 721035    468492      252542          620821 #>  7  2013 Connecticut              608512    467291      141221          526964 #>  8  2013 Delaware                 167686    155803       11883          141355 #>  9  2013 District of Columbia      83964     74946        9018           69193 #> 10  2013 Florida                 3753454   2402926     1350528         3239566 #> # ℹ 560 more rows #> # ℹ 15 more variables: bene_aged_esrd <int>, bene_aged_no_esrd <int>, #> #   bene_dsb_total <int>, bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, #> #   bene_ab_total <int>, bene_ab_orig <int>, bene_ab_ma_oth <int>, #> #   bene_rx_total <int>, bene_rx_pdp <int>, bene_rx_mapd <int>, #> #   bene_rx_elig <int>, bene_rx_full <int>, bene_rx_part <int>, #> #   bene_rx_none <int> beneficiary_enrollment(period = \"Year\",                         level = \"State\",                        state = \"GA\") #> # A tibble: 10 × 26 #>     year period level state state_name county fips  bene_total bene_orig #>    <int> <chr>  <chr> <chr> <chr>      <chr>  <chr>      <int>     <int> #>  1  2013 Year   State GA    Georgia    Total  13       1412936   1039767 #>  2  2014 Year   State GA    Georgia    Total  13       1470380   1046071 #>  3  2015 Year   State GA    Georgia    Total  13       1523200   1044530 #>  4  2016 Year   State GA    Georgia    Total  13       1573277   1049087 #>  5  2017 Year   State GA    Georgia    Total  13       1624056   1051459 #>  6  2018 Year   State GA    Georgia    Total  13       1676019   1046723 #>  7  2019 Year   State GA    Georgia    Total  13       1727412   1040090 #>  8  2020 Year   State GA    Georgia    Total  13       1773148   1012084 #>  9  2021 Year   State GA    Georgia    Total  13       1808944    953980 #> 10  2022 Year   State GA    Georgia    Total  13       1848723    916979 #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(period = \"Year\",                         level = \"County\",                        state = \"GA\") #> # A tibble: 1,590 × 26 #>     year period level  state state_name county   fips  bene_total bene_orig #>    <int> <chr>  <chr>  <chr> <chr>      <chr>    <chr>      <int>     <int> #>  1  2013 Year   County GA    Georgia    Appling  13001       3389      2686 #>  2  2013 Year   County GA    Georgia    Atkinson 13003       1248       991 #>  3  2013 Year   County GA    Georgia    Bacon    13005       1977      1552 #>  4  2013 Year   County GA    Georgia    Baker    13007        608       478 #>  5  2013 Year   County GA    Georgia    Baldwin  13009       7722      4660 #>  6  2013 Year   County GA    Georgia    Banks    13011       3239      2504 #>  7  2013 Year   County GA    Georgia    Barrow   13013       9738      7093 #>  8  2013 Year   County GA    Georgia    Bartow   13015      15446     11826 #>  9  2013 Year   County GA    Georgia    Ben Hill 13017       3463      2628 #> 10  2013 Year   County GA    Georgia    Berrien  13019       3442      2616 #> # ℹ 1,580 more rows #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(period = \"Year\",                         level = \"County\",                        state = \"GA\",                        county = \"Lowndes\") #> # A tibble: 10 × 26 #>     year period level  state state_name county  fips  bene_total bene_orig #>    <int> <chr>  <chr>  <chr> <chr>      <chr>   <chr>      <int>     <int> #>  1  2013 Year   County GA    Georgia    Lowndes 13185      14991     12192 #>  2  2014 Year   County GA    Georgia    Lowndes 13185      15604     12343 #>  3  2015 Year   County GA    Georgia    Lowndes 13185      16137     12549 #>  4  2016 Year   County GA    Georgia    Lowndes 13185      16644     12879 #>  5  2017 Year   County GA    Georgia    Lowndes 13185      17172     13007 #>  6  2018 Year   County GA    Georgia    Lowndes 13185      17806     13137 #>  7  2019 Year   County GA    Georgia    Lowndes 13185      18173     12964 #>  8  2020 Year   County GA    Georgia    Lowndes 13185      18736     12660 #>  9  2021 Year   County GA    Georgia    Lowndes 13185      19135     12134 #> 10  2022 Year   County GA    Georgia    Lowndes 13185      19770     11714 #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"visualizations","dir":"Articles","previous_headings":"","what":"Visualizations","title":"Medicare Monthly Enrollment API","text":"","code":"# National by Year tot_nation <- beneficiary_enrollment(level = \"National\",                                       period = \"Year\") |>   dplyr::select(year,                  level,                  total = bene_total,                 orig = bene_orig,                 ma = bene_ma_oth,                 aged = bene_aged_total,                  disabled = bene_dsb_total,                  partsAB = bene_ab_total,                  partD = bene_rx_total) # State by Year tot_state <- beneficiary_enrollment(level = \"State\",                                      period = \"Year\",                                      state = \"GA\") |>    dplyr::select(year,                  state_name,                  total = bene_total,                  orig = bene_orig,                 ma = bene_ma_oth,                 aged = bene_aged_total,                  disabled = bene_dsb_total,                  partsAB = bene_ab_total,                  partD = bene_rx_total) |>    dplyr::rename(level = state_name) # County by Year tot_county <- beneficiary_enrollment(level = \"County\",                                       period = \"Year\",                                       state = \"GA\",                                       county = \"Lowndes\") |>    dplyr::select(year,                  county,                  total = bene_total,                 orig = bene_orig,                 ma = bene_ma_oth,                 aged = bene_aged_total,                  disabled = bene_dsb_total,                  partsAB = bene_ab_total,                  partD = bene_rx_total) |>    dplyr::rename(level = county) # Bind together, calculate stats final <- dplyr::bind_rows(   tot_nation,    tot_state,    tot_county) |>    dplyr::group_by(level) |>    provider:::change_abs(total, year) |>    provider:::change_pct(total, total_chg, year) |>    dplyr::ungroup() |>    dplyr::mutate(orig_pct = orig / total,                 ma_pct = ma / total,                 aged_pct = aged / total,                 disabled_pct = disabled / total,                 ab_pct = partsAB / total,                 d_pct = partD / total) |>    dplyr::select(year,                  level,                  total_pct_chg = total_pct,                  orig_pct,                 ma_pct,                 aged_pct,                  disabled_pct,                  ab_pct,                  d_pct) ## gt Table gt_pct <- final |>      gt::gt() |>    gt::tab_style(style = gt::cell_text(     font = c(gt::google_font(name = \"Fira Code\"), gt::default_fonts())),     locations = gt::cells_body(columns = dplyr::contains(\"pct\"))) |>    gtExtras::gt_theme_538() |>    gt::fmt_percent(columns = dplyr::contains(\"pct\"), decimals = 1) |>    gt::fmt_percent(columns = c(total_pct_chg), decimals = 1, force_sign = TRUE) |>    gt::sub_missing(columns = dplyr::everything(), missing_text = \"--\") |>    gt::cols_label(total_pct_chg = \"% Change\",                  orig_pct = \"Original\",                  ma_pct = \"MA\",                  aged_pct = \"Aged\",                  disabled_pct = \"Disabled\",                   ab_pct = \"Pts A & B\",                  d_pct = \"Part D\") |>    gtExtras::gt_add_divider(     columns = c(\"level\",                  \"total_pct_chg\",                  \"ma_pct\",                  \"disabled_pct\"),      style = \"solid\",     color = \"black\",     weight = gt::px(3),     include_labels = FALSE) |>   gt::tab_header(     title = gt::md(\"Medicare Beneficiaries: **2013 - 2022**\"),     subtitle = gt::md(\"National, State, & County Percentage Comparisons for **Valdosta, Georgia**\")) |>    gt::tab_source_note(source_note = \"Source: data.cms.gov\") #|> gt::opt_table_font(font = gt::google_font(name = \"Karla\")) national <- beneficiary_enrollment(level = \"National\")  yr_nat_list <- national |>    dplyr::filter(period == \"Year\") |>    dplyr::select(year, bene_orig, bene_ma_oth) |>    dplyr::mutate(pct_orig = bene_orig / (bene_orig + bene_ma_oth),                 pct_ma = bene_ma_oth / (bene_orig + bene_ma_oth)) |>    tidyr::pivot_longer(cols = c(pct_orig, pct_ma),                        names_to = \"measure\",                        values_to = \"pct\") |>    dplyr::group_by(year) |>    dplyr::summarise(list_data = list(pct), .groups = \"drop\")  yr_nat_base <- national |>    dplyr::filter(period == \"Year\") |>    dplyr::select(year, bene_total) |>    provider:::change_abs(bene_total, year) |>    provider:::change_pct(bene_total, bene_total_chg, year)  nat <- dplyr::left_join(yr_nat_base, yr_nat_list, by = dplyr::join_by(year))  gt_nat <- nat |>      gt::gt() |>    gt::tab_style(     style = gt::cell_text(font = c(gt::google_font(name = \"Fira Code\"),                                     gt::default_fonts())),     locations = gt::cells_body(columns = c(bene_total,                                             bene_total_chg))) |>    gtExtras::gt_theme_538() |>    gt::fmt_number(bene_total,                   suffixing = TRUE,                   decimals = 2) |>    gt::fmt_number(bene_total_chg,                   suffixing = TRUE,                   force_sign = TRUE,                   decimals = 1) |>    gt::fmt_percent(columns = bene_total_pct,                    decimals = 1,                    force_sign = TRUE) |>    gt::sub_missing(columns = dplyr::everything(),                    missing_text = \"--\") |>    gt::cols_merge_n_pct(col_n = bene_total_chg,                        col_pct = bene_total_pct) |>   gt::cols_label(bene_total = \"Total\",                  bene_total_chg = gt::md(\"Change (%)\")) |>    gtExtras::gt_add_divider(columns = c(\"year\",                                         \"bene_total_chg\"),                             style = \"solid\",                            color = \"black\",                            weight = gt::px(2),                            include_labels = FALSE) |>    gtExtras::gt_plt_bar_stack(column = list_data,                               width = 80,                              labels = c(\"Original  \",                                          \" Advantage\"),                              palette = c(\"#ff4343\", \"black\"),                              fmt_fn = scales::label_percent(accuracy = 0.1,                                                              suffix = \" %\")) |>    gt::tab_header(title = gt::md(\"Medicare Beneficiary Enrollment: **2013 - 2022**\"),     subtitle = gt::md(\"National Totals, Year-Over-Year\")) |>    gt::tab_source_note(source_note = \"Source: data.cms.gov\")  #|> gt::opt_table_font(font = gt::google_font(name = \"Karla\")) gt_comp <- beneficiary_enrollment(level = \"National\",                                    period = \"Year\") |>    dplyr::select(!c(period:fips)) |>    tidyr::pivot_longer(cols = dplyr::starts_with(\"bene_\"),                        names_to = \"stat\",                        values_to = \"value\") |>    tidyr::pivot_wider(names_from = year,                       values_from = value) |>    gt::gt(rowname_col = \"stat\") |>    gt::tab_style(     style = gt::cell_text(font = c(gt::google_font(name = \"Fira Code\"),                                     gt::default_fonts())),     locations = gt::cells_body(columns = c(2:11))) |>    gtExtras::gt_theme_538() |>    gt::fmt_number(columns = c(2:11), suffixing = TRUE, decimals = 1) |>    gt::tab_row_group(label = gt::md(\"**Disabled Beneficiaries**\"),                      rows = c(\"bene_dsb_total\",                               \"bene_dsb_no_esrd\",                               \"bene_dsb_esrd\")) |>    gt::tab_row_group(label = gt::md(\"**Aged Beneficiaries**\"),                      rows = c(\"bene_aged_total\",                               \"bene_aged_no_esrd\",                               \"bene_aged_esrd\")) |>    gt::tab_row_group(label = gt::md(\"**Medicare Part D**\"),                      rows = c(\"bene_rx_total\",                               \"bene_rx_pdp\",                               \"bene_rx_mapd\",                               \"bene_rx_elig\",                               \"bene_rx_full\",                               \"bene_rx_part\",                               \"bene_rx_none\")) |>    gt::tab_row_group(label = gt::md(\"**Medicare Parts A & B**\"),                      rows = c(\"bene_ab_total\",                               \"bene_ab_orig\",                               \"bene_ab_ma_oth\")) |>    gt::tab_row_group(label = gt::md(\"**Original Medicare** / **Medicare Advantage**\"),                      rows = c(\"bene_orig\",                               \"bene_ma_oth\")) |>    gt::tab_row_group(label = gt::md(\"**Total Beneficiaries**\"),                      rows = c(\"bene_total\")) |>    gt::tab_header(title = gt::md(     \"Medicare Beneficiary Enrollment: **2013 - 2022**\"),     subtitle = gt::md(\"National Totals, Month-Over-Month\")) |>    gt::tab_source_note(source_note = \"Source: data.cms.gov\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"Medicare Monthly Enrollment API","text":"Year Month Bene_State Bene_County Tot_Benes Orgnl_Mdcr_Benes MA_and_Oth_Benes Aged_Tot_Benes Aged_ESRD_Benes Aged_No_ESRD_Benes Dsbld_Tot_Benes Dsbld_ESRD_and_ESRD_Only_Benes Dsbld_No_ESRD_Benes A_B_Tot_Benes A_B_Orgnl_Mdcr_Benes A_B_MA_and_Oth_Benes Prscrptn_Drug_Tot_Benes Prscrptn_Drug_PDP_Benes Prscrptn_Drug_MAPD_Benes","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"Medicare Monthly Enrollment API","text":"Medicare Monthly Enrollment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"search-examples","dir":"Articles","previous_headings":"","what":"Search Examples","title":"Medicare Opt Out Affidavits API","text":"","code":"opt_out(last = \"Aaron\") #> # A tibble: 1 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1427358282 Sheryl     Aaron     Clinical So… 2022-02-17        2024-02-17      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(specialty = \"Psychiatry\", zip = \"07626\") #> # A tibble: 3 × 13 #>   npi        first_name last_name  specialty  optout_start_date optout_end_date #>   <chr>      <chr>      <chr>      <chr>      <date>            <date>          #> 1 1235359019 Laura      Brenner    Psychiatry 2006-05-01        2024-05-01      #> 2 1356579841 Ruchi      Nadella    Psychiatry 2016-03-30        2024-03-30      #> 3 1508023920 Sireesha   Jathavedam Psychiatry 2018-01-22        2024-01-22      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(first = \"David\", last = \"Smith\") #> # A tibble: 6 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1649265760 David      Smith     Maxillofaci… 2012-06-25        2024-06-25      #> 2 1750565958 David      Smith     Oral Surgery 2013-05-07        2023-05-07      #> 3 1114058443 David      Smith     Psychiatry   2014-08-15        2024-08-15      #> 4 1023002375 David      Smith     Obstetrics/… 2012-10-01        2024-10-01      #> 5 1790853307 David      Smith     Oral Surgery 2015-03-26        2025-03-26      #> 6 1659300077 David      Smith     Dentist      2015-05-26        2023-05-26      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(npi = 1114974490) #> # A tibble: 1 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1114974490 David      Altchek   Orthopedic … 2012-07-01        2024-07-01      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(city = \"Los Angeles\", address = \"9201 W SUNSET BLVD\") #> # A tibble: 5 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1649484007 Ned        Cowan     Psychiatry   2012-12-30        2024-12-30      #> 2 1497783484 Geemee     Chung     Infectious … 2016-04-20        2024-04-20      #> 3 1598825309 Genise     Fraiman   Internal Me… 2016-10-13        2024-10-13      #> 4 1760448351 David      Salehani  Oral Surgery 2022-04-06        2024-04-06      #> 5 1952408007 Colleen    Ryan      Family Prac… 2022-09-21        2024-09-21      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"data-dictionary","dir":"Articles","previous_headings":"Search Examples","what":"Data Dictionary","title":"Medicare Opt Out Affidavits API","text":"first_name last_name npi specialty optout_effective_date optout_end_date first_line_street_address second_line_street_address city_name state_code zip_code eligible_to_order_and_refer","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"related-links","dir":"Articles","previous_headings":"Search Examples","what":"Related Links","title":"Medicare Opt Out Affidavits API","text":"Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"example-searchs","dir":"Articles","previous_headings":"","what":"Example Searchs","title":"Medicare Order and Referring API","text":"NPI:  Name, well filtering certain privileges:","code":"order_refer(npi = 1083879860) #> # A tibble: 1 × 7 #>   npi        first_name  last_name partb hha   dme   pmd   #>   <chr>      <chr>       <chr>     <lgl> <lgl> <lgl> <lgl> #> 1 1083879860 CHRISTOPHER AARON     TRUE  TRUE  TRUE  TRUE order_refer(last_name = \"Smith\",              partb = FALSE,             hha = TRUE,             pmd = FALSE) #> ✖ No results for last_name: Smith, partb: N, hha: Y, and pmd: N order_refer(last_name = \"Smith\",              partb = FALSE,             hha = FALSE,             pmd = FALSE) #> # A tibble: 151 × 7 #>    npi        first_name last_name partb hha   dme   pmd   #>    <chr>      <chr>      <chr>     <lgl> <lgl> <lgl> <lgl> #>  1 1063535672 AARON      SMITH     FALSE FALSE TRUE  FALSE #>  2 1891210431 ALAINA     SMITH     FALSE FALSE TRUE  FALSE #>  3 1962830570 ALESHA     SMITH     FALSE FALSE TRUE  FALSE #>  4 1922655521 ALLISON    SMITH     FALSE FALSE TRUE  FALSE #>  5 1942778188 ALYSSA     SMITH     FALSE FALSE TRUE  FALSE #>  6 1467902791 AMANDA     SMITH     FALSE FALSE TRUE  FALSE #>  7 1992203582 AMANDA     SMITH     FALSE FALSE TRUE  FALSE #>  8 1023475761 AMY        SMITH     FALSE FALSE TRUE  FALSE #>  9 1609219773 AMY        SMITH     FALSE FALSE TRUE  FALSE #> 10 1063878056 ANNA       SMITH     FALSE FALSE TRUE  FALSE #> # ℹ 141 more rows"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"visualizations","dir":"Articles","previous_headings":"","what":"Visualizations","title":"Medicare Order and Referring API","text":"","code":"order_refer(last_name = \"Smith\",              first_name = \"Aaron\") |>    provider:::gt_prov(divider = c(\"last_name\"),                       checkmark = c(\"partb\",                                     \"dme\",                                     \"hha\",                                     \"pmd\"),                      title = \"Medicare Order & Referring Eligibility\",                      source = \"Source: data.cms.gov\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"data-dictionary","dir":"Articles","previous_headings":"Visualizations","what":"Data Dictionary","title":"Medicare Order and Referring API","text":"npi last_name first_name partb dme hha pmd","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"related-links","dir":"Articles","previous_headings":"Visualizations","what":"Related Links","title":"Medicare Order and Referring API","text":"Medicare Order Referring API CMS.gov: Ordering & Certifying Order Referring Methodology","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"physician-other-practitioners-by-provider","dir":"Articles","previous_headings":"","what":"Physician & Other Practitioners: by Provider","title":"Medicare Physician & Other Practitioners APIs","text":"Provider data subset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI). dataset based information gathered CMS administrative claims data Original Medicare Part B beneficiaries available CMS Chronic Conditions Data Warehouse. Data update frequency: Annually Data source: Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"examples","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider","what":"Examples","title":"Medicare Physician & Other Practitioners APIs","text":"","code":"2013:2021 |>    purrr::map(\\(year) physician_by_provider(year, npi = 1003000423)) |>    purrr::list_rbind() #> # A tibble: 9 × 70 #>    year npi     first_name middle_name last_name credential gender entype street #>   <int> <chr>   <chr>      <chr>       <chr>     <chr>      <chr>  <chr>  <chr>  #> 1  2013 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 2  2014 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 3  2015 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 4  2016 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 5  2017 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 6  2018 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 7  2019 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 8  2020 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 9  2021 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> # ℹ 61 more variables: city <chr>, state <chr>, fips <chr>, zipcode <chr>, #> #   ruca <chr>, country <chr>, specialty <chr>, par <lgl>, tot_hcpcs <int>, #> #   tot_benes <int>, tot_srvcs <int>, tot_charges <dbl>, tot_allowed <dbl>, #> #   tot_payment <dbl>, tot_std_pymt <dbl>, drug_hcpcs <int>, drug_benes <int>, #> #   drug_srvcs <int>, drug_charges <dbl>, drug_allowed <dbl>, #> #   drug_payment <dbl>, drug_std_pymt <dbl>, med_hcpcs <int>, med_benes <int>, #> #   med_srvcs <int>, med_charges <dbl>, med_allowed <dbl>, med_payment <dbl>, … physician_by_provider(year = 2021,                        entype = \"I\",                        city = \"Hershey\",                        state = \"PA\",                        fips = 42,                        ruca = 1,                        gender = \"F\",                        credential = \"MD\",                        specialty = \"Anesthesiology\") #> # A tibble: 17 × 70 #>     year npi    first_name middle_name last_name credential gender entype street #>    <int> <chr>  <chr>      <chr>       <chr>     <chr>      <chr>  <chr>  <chr>  #>  1  2021 10232… Melissa    L           Coleman   MD         F      Ind    500 U… #>  2  2021 10634… Padmani    NA          Dhar      MD         F      Ind    500 U… #>  3  2021 11240… To-Nhu     NA          Vu        MD         F      Ind    500 U… #>  4  2021 12159… Cathy      D           Paige     MD         F      Ind    500 U… #>  5  2021 13062… Eileen     M           Micaroni  MD         F      Ind    500 U… #>  6  2021 14473… Anita      NA          Malhotra  MD         F      Ind    500 U… #>  7  2021 15482… Sonia      J           Vaida     MD         F      Ind    500 U… #>  8  2021 15583… Priti      G           Dalal     MD         F      Ind    500 U… #>  9  2021 16090… Zoulfira   NA          Nisnevit… MD         F      Ind    500 U… #> 10  2021 17503… Niraja     NA          Rajan     MD         F      Ind    500 U… #> 11  2021 18010… Sharon     NA          Lee       MD         F      Ind    500 U… #> 12  2021 18018… Jansie     NA          Prozesky  MD         F      Ind    500 U… #> 13  2021 18514… Kelly      S           Gidusko   MD         F      Ind    500 U… #> 14  2021 18717… Rochelle   NA          Sims      MD         F      Ind    500 U… #> 15  2021 18917… Elizabeth  H           Sinz      MD         F      Ind    500 U… #> 16  2021 19222… Kristin    B           Brennan   MD         F      Ind    500 U… #> 17  2021 19628… Sadie      E           Smith     MD         F      Ind    500 U… #> # ℹ 61 more variables: city <chr>, state <chr>, fips <chr>, zipcode <chr>, #> #   ruca <chr>, country <chr>, specialty <chr>, par <lgl>, tot_hcpcs <int>, #> #   tot_benes <int>, tot_srvcs <int>, tot_charges <dbl>, tot_allowed <dbl>, #> #   tot_payment <dbl>, tot_std_pymt <dbl>, drug_hcpcs <int>, drug_benes <int>, #> #   drug_srvcs <int>, drug_charges <dbl>, drug_allowed <dbl>, #> #   drug_payment <dbl>, drug_std_pymt <dbl>, med_hcpcs <int>, med_benes <int>, #> #   med_srvcs <int>, med_charges <dbl>, med_allowed <dbl>, med_payment <dbl>, …"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"examples-1","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Geography and Service","what":"Examples","title":"Medicare Physician & Other Practitioners APIs","text":"","code":"physician_by_geography(hcpcs_code = \"0002A\", year = 2020) #> # A tibble: 9 × 16 #>    year level sublevel fips  hcpcs hcpcs_desc hcpcs_drug place_of_srvc tot_provs #>   <int> <chr> <chr>    <chr> <chr> <chr>      <lgl>      <chr>             <int> #> 1  2020 Nati… National NA    0002A Adm sarsc… FALSE      Office               53 #> 2  2020 State Califor… 06    0002A Adm sarsc… FALSE      Office                3 #> 3  2020 State Florida  12    0002A Adm sarsc… FALSE      Office                5 #> 4  2020 State Illinois 17    0002A Adm sarsc… FALSE      Office                3 #> 5  2020 State Maine    23    0002A Adm sarsc… FALSE      Office                1 #> 6  2020 State Maryland 24    0002A Adm sarsc… FALSE      Office                3 #> 7  2020 State Massach… 25    0002A Adm sarsc… FALSE      Office                3 #> 8  2020 State New Jer… 34    0002A Adm sarsc… FALSE      Office                3 #> 9  2020 State Pennsyl… 42    0002A Adm sarsc… FALSE      Office                4 #> # ℹ 7 more variables: tot_benes <int>, tot_srvcs <int>, tot_day <int>, #> #   avg_charge <dbl>, avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> service <- purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x))"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"physician-other-practitioners-by-provider-and-service","dir":"Articles","previous_headings":"","what":"Physician & Other Practitioners: by Provider and Service","title":"Medicare Physician & Other Practitioners APIs","text":"spending utilization data Physician Practitioners Provider Service Dataset aggregated following:  NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility).  can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"examples-2","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Examples","title":"Medicare Physician & Other Practitioners APIs","text":"","code":"# Search by NPI physician_by_service(npi = 1003000126) #> Error in `physician_by_service()`: #> ! `year` is absent but must be supplied. # Search by Last Name for 2019 physician_by_service(npi = 1720392988, year = 2019) #> # A tibble: 20 × 28 #>     year npi        entype first_name middle_name last_name credential gender #>    <int> <chr>      <chr>  <chr>      <chr>       <chr>     <chr>      <chr>  #>  1  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #>  2  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #>  3  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #>  4  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #>  5  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #>  6  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #>  7  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #>  8  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #>  9  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 10  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 11  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 12  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 13  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 14  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 15  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 16  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 17  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 18  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 19  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> 20  2019 1720392988 Ind    Mustafa    NA          Abas      MD,        M      #> # ℹ 20 more variables: specialty <chr>, street <chr>, city <chr>, state <chr>, #> #   fips <chr>, zipcode <chr>, ruca <chr>, country <chr>, par <lgl>, #> #   hcpcs_cd <chr>, hcpcs_desc <chr>, hcpcs_drug <chr>, place_of_srvc <chr>, #> #   tot_benes <int>, tot_srvcs <int>, tot_day <int>, avg_charge <dbl>, #> #   avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> # Multiple NPIs c(1003026055,           1720392988,           1518184605,           1922056829,           1083879860) #> [1] 1003026055 1720392988 1518184605 1922056829 1083879860  #npis |> purrr::map_dfr(physician_by_service) # Retrieve All Provider Data, 2013-2020 purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x)) #> # A tibble: 78 × 28 #>     year npi        entype first_name middle_name last_name credential gender #>    <int> <chr>      <chr>  <chr>      <chr>       <chr>     <chr>      <chr>  #>  1  2013 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #>  2  2013 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #>  3  2013 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #>  4  2013 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #>  5  2013 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #>  6  2013 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #>  7  2013 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #>  8  2014 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #>  9  2014 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #> 10  2014 1003000126 Ind    Ardalan    NA          Enkeshafi MD         M      #> # ℹ 68 more rows #> # ℹ 20 more variables: specialty <chr>, street <chr>, city <chr>, state <chr>, #> #   fips <chr>, zipcode <chr>, ruca <chr>, country <chr>, par <lgl>, #> #   hcpcs_cd <chr>, hcpcs_desc <chr>, hcpcs_drug <chr>, place_of_srvc <chr>, #> #   tot_benes <int>, tot_srvcs <int>, tot_day <int>, avg_charge <dbl>, #> #   avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"provider-data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Provider Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_npi rndrng_prvdr_last_org_name rndrng_prvdr_first_name rndrng_prvdr_mi rndrng_prvdr_crdntls rndrng_prvdr_gndr rndrng_prvdr_ent_cd rndrng_prvdr_st1 rndrng_prvdr_st2 rndrng_prvdr_city rndrng_prvdr_state_abrvtn rndrng_prvdr_state_fips rndrng_prvdr_zip5 rndrng_prvdr_ruca rndrng_prvdr_ruca_desc rndrng_prvdr_cntry rndrng_prvdr_type rndrng_prvdr_mdcr_prtcptg_ind tot_hcpcs_cds tot_benes tot_srvcs tot_sbmtd_chrg tot_mdcr_alowd_amt tot_mdcr_pymt_amt tot_mdcr_stdzd_amt drug_sprsn_ind drug_tot_hcpcs_cds drug_tot_benes drug_tot_srvcs drug_sbmtd_chrg drug_mdcr_alowd_amt drug_mdcr_pymt_amt drug_mdcr_stdzd_amt med_sprsn_ind med_tot_hcpcs_cds med_tot_benes med_tot_srvcs med_sbmtd_chrg med_mdcr_alowd_amt med_mdcr_pymt_amt med_mdcr_stdzd_amt bene_avg_age bene_age_lt_65_cnt bene_age_65_74_cnt bene_age_75_84_cnt bene_age_gt_84_cnt bene_feml_cnt bene_male_cnt bene_race_wht_cnt bene_race_black_cnt bene_race_api_cnt bene_race_hspnc_cnt bene_race_natind_cnt bene_race_othr_cnt bene_dual_cnt bene_ndual_cnt bene_cc_af_pct bene_cc_alzhmr_pct bene_cc_asthma_pct bene_cc_cncr_pct bene_cc_chf_pct bene_cc_ckd_pct bene_cc_copd_pct bene_cc_dprssn_pct bene_cc_dbts_pct bene_cc_hyplpdma_pct bene_cc_hyprtnsn_pct bene_cc_ihd_pct bene_cc_opo_pct bene_cc_raoa_pct bene_cc_sz_pct bene_cc_strok_pct bene_avg_risk_scre","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"geography-data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Geography Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_prvdr_geo_lvl rndrng_prvdr_geo_cd rndrng_prvdr_geo_desc hcpcs_cd hcpcs_desc hcpcs_drug_ind place_of_srvc tot_rndrng_prvdrs tot_srvcs tot_benes tot_bene_day_srvcs avg_sbmtd_chrg avg_mdcr_alowd_amt avg_mdcr_pymt_amt avg_mdcr_stdzd_amt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"service-data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Service Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_npi rndrng_prvdr_last_org_name rndrng_prvdr_first_name rndrng_prvdr_mi rndrng_prvdr_crdntls rndrng_prvdr_gndr rndrng_prvdr_ent_cd rndrng_prvdr_st1 rndrng_prvdr_st2 rndrng_prvdr_city rndrng_prvdr_state_abrvtn rndrng_prvdr_state_fips rndrng_prvdr_zip5 rndrng_prvdr_ruca rndrng_prvdr_ruca_desc rndrng_prvdr_cntry rndrng_prvdr_type rndrng_prvdr_mdcr_prtcptg_ind hcpcs_cd hcpcs_desc hcpcs_drug_ind place_of_srvc tot_benes tot_srvcs tot_bene_day_srvcs avg_sbmtd_chrg avg_mdcr_alowd_amt avg_mdcr_pymt_amt avg_mdcr_stdzd_amt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"key-data-sources","dir":"Articles","previous_headings":"","what":"Key Data Sources","title":"Medicare Physician & Other Practitioners APIs","text":"data Physician Practitioners Dataset based upon CMS administrative claims data Medicare beneficiaries enrolled fee--service program. data available CMS Chronic Condition Data Warehouse (CCW), database 100% Medicare enrollment fee--service claims data. Service counts, beneficiary counts, provider charges, Medicare allowed amounts payments place service indicator summarized Part B non-institutional claims processed Medicare Administrative Contractor (MAC) Jurisdictions (NCH Claim Type Codes ‘71’, ‘72’). Please see CCW website additional information.  Physician Practitioners Dataset data years, provider demographics (name, credentials, gender, complete address entity type) included National Plan & Provider Enumeration System (NPPES). CMS developed NPPES assign unique identifiers, known National Provider Identifiers (NPIs), health care providers. health care provider’s demographic information collected time enrollment updated periodically. demographics information provided Physician Practitioners Dataset extracted NPPES end calendar year following reporting year (e.g. CY2017 reporting year, NPPES data extracted end calendar year 2018). Please visit NPPES website additional information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"population","dir":"Articles","previous_headings":"","what":"Population","title":"Medicare Physician & Other Practitioners APIs","text":"Physician Practitioners Dataset includes data providers valid NPI submitted Medicare Part B non-institutional claims (excluding DMEPOS) reporting period. protect privacy Medicare beneficiaries, aggregated records derived 10 fewer beneficiaries excluded Physician Practitioners Dataset.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"data-limitations","dir":"Articles","previous_headings":"","what":"Data Limitations","title":"Medicare Physician & Other Practitioners APIs","text":"Although Physician Practitioners Dataset wealth payment utilization information many Medicare Part B services, dataset also number limitations worth noting.  First, data Physician Practitioners Dataset may representative physician’s entire practice. data file information Medicare beneficiaries Part B FFS coverage, physicians typically treat many patients form coverage. Physician Practitioners Dataset information patients covered Medicare, coverage federal programs (like Federal Employees Health Benefits Program Tricare), private health insurance (individual policy employer-sponsored coverage), uninsured. Even within Medicare, Physician Practitioners Dataset include information patients enrolled form Medicare Advantage plan.  information presented file also indicate quality care provided individual physicians. file contains cost utilization information, reasons described preceding paragraph, volume procedures presented may fully inclusive procedures performed provider. Medicare allowed amounts Medicare payments given HCPCS code/place service can vary based number factors, including modifiers, geography, services performed day/visit. example, modifiers (two-character designators signal change HCPCS code procedure service applied) may included claim line service intensity increased decreased, additional physician administered services, service provided differs procedure definition. cases, modifiers impact allowed amounts payments. addition, allowed amounts payments vary geographically Medicare makes adjustments services based area’s cost living. Allowed amounts payments can also adjusted physician renders multiple services beneficiary day, referred multiple procedure payment reduction. standard payment allowed amount rates CPT/HCPCS code, please visit Physician fee schedule.  general, provider administers drugs patient, provider purchases drug Medicare pays provider 106% average sales price (ASP) drug. Although ASP list used datasets define drug services, drugs listed ASP fee schedule complete listing drugs paid part B, ASP fee schedule represents majority drugs used office. information payments drugs covered Part B, please visit ASP Drug Pricing.  Additionally, data risk adjusted thus account difference underlying severity disease patient populations treated providers. However, provided average beneficiary risk scores “Medicare Physician Practitioners Provider Dataset” (.e., one record per NPI) provide information health status beneficiaries providers serve. Also, since data presented summarized actual claims received providers attempts made modify data (.e., statistical outliers removed truncated), rare instances average submitted charge amount may reflect errors included claims submitted providers.  noted earlier, file include data services performed 10 fewer beneficiaries, users aware summing data file may underestimate true Part B FFS totals. addition, providers bill individual NPI organizational NPI. case, users determine provider’s actual total way identify individual’s portion billed organization.  Medicare pays differently services provided facility setting versus freestanding physicians’ office (non-facility setting). services delivered facility setting, Medicare makes two payments, one physician’s professional fee one facility. services delivered facility (Place_Of_Srvc = ”F”), data Physician Practitioners Dataset generally represents physician’s professional fee include facility payment. exception services delivered Ambulatory Surgical Centers (ASCs). cases, physician’s professional fee ASC’s fee represented Physician Practitioners Dataset. ASCs can identified using provider type. services delivered non-facility setting, physician’s office (Place_Of_Srvc = ”O”), Physician Practitioners Dataset represents complete payment service.  users try link data file public datasets, please aware particular Medicare populations included timeframes used file merged. example, efforts link Physician Practitioners Dataset data Part D prescription drug data need account fact beneficiaries FFS Part B coverage (thus included Physician Practitioners Dataset) Part D drug coverage (thus represented Part D data files). time, beneficiaries Part D coverage (thus included Part D data) FFS Part B coverage (thus included Physician Practitioners Dataset). Another example linking data constructed different non-aligning time periods, publically available data physician referral patterns, based 18-month period.  Finally, users aware payments CMS demonstration programs included Physician Practitioners Dataset. Since CMS demonstration programs utilize Medicare claims submission process, payments services demonstrations included data file may grouped specific demonstration HCPCS codes aggregated non-demonstration specific HCPCS codes. Demonstration programs paid outside Medicare claims submission process included Physician Practitioners Dataset.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"additional-information","dir":"Articles","previous_headings":"","what":"Additional Information","title":"Medicare Physician & Other Practitioners APIs","text":"Data Sources CMS also releases “Medicare Fee--Service Public Provider Enrollment Data” include provider name address information Provider Enrollment Chain Ownership System (PECOS). data updated quarterly basis available data.cms.gov.  Medicare Standardized Spending Users can find information Medicare payment standardization referring Geographic Variation Methodology available within “Risk adjustment standardization” section following web page: Geographic Variation Methodology.  HCCs (Hierarchical Condition Categories) CMS developed risk-adjustment model uses HCCs (hierarchical condition categories) assign risk scores. scores estimate beneficiaries’ FFS spending compare overall average entire Medicare population. summary average risk scores beneficiaries represented calendar year Medicare Physician & Practitioners - Provider dataset located “Resources’” section following web page: Medicare Physician & Practitioners - Provider. Beneficiaries scores greater average risk score expected -average spending, vice versa. Risk scores based beneficiary’s age sex; whether beneficiary eligible Medicaid, first qualified Medicare basis disability, lives institution (usually nursing home); beneficiary’s diagnoses previous year.  HCC model designed risk adjustment larger populations, enrollees MA plan, generates accurate results used compare groups beneficiaries rather individuals. Please visit HCC risk score information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-due-date-list-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Due Date List API","title":"Medicare Revalidation APIs","text":"Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet. lists refreshed every two months two months’ worth due dates appended list.  Revalidation Due Date List dataset contains revalidation due dates Medicare providers due revalidate following six months. provider’s due date fall within ensuing six months, due date marked ‘TBD’. addition dataset also includes subfiles reassignment information given provider well due date listings clinics group practices providers. dataset based information gathered Provider Enrollment, Chain Ownership System (PECOS).  Medicare Revalidation Due Date API Medicare Revalidation Due Date - Data Dictionary","code":"revalidation_date(enroll_id = \"I20031110000070\",                    npi = 1184699621) |> terse::terse() #> $npi                    c1 1184699621        #> $enroll_id              c1 I20031110000070   #> $first_name             c1 Eric              #> $last_name              c1 Byrd              #> $org_name               c1 NA                #> $enroll_state           c1 NC                #> $enroll_type            c1 3                 #> $enroll_desc            c1 Non-DME Part B    #> $enroll_specialty       c1 Internal Medicine #> $revalidation_due_date  D1 NA                #> $adjusted_due_date      D1 2022-11-30        #> $indiv_total_reassigned c1 NA                #> $rec_bene_reassign      i1 2 revalidation_date(first_name = \"Eric\",                    last_name = \"Byrd\") |> terse::terse() #> $npi                    c2 1184699621       , 1598792285       #> $enroll_id              c2 I20031110000070  , I20090128000461  #> $first_name             c2 Eric             , Eric             #> $last_name              c2 Byrd             , Byrd             #> $org_name               c2 NA               , NA               #> $enroll_state           c2 NC               , SC               #> $enroll_type            c2 3                , 3                #> $enroll_desc            c2 Non-DME Part B   , Non-DME Part B   #> $enroll_specialty       c2 Internal Medicine, General Practice #> $revalidation_due_date  D2 NA               , NA               #> $adjusted_due_date      D2 2022-11-30       , NA               #> $indiv_total_reassigned c2 NA               , NA               #> $rec_bene_reassign      i2 2                , 2 revalidation_date(state = \"FL\",                    type_code = \"3\",                    specialty = \"General Practice\") |> terse::terse() #> $npi                    c1523 1184693400      , 1356436786      , 146749928 ... #> $enroll_id              c1523 I20031104000582 , I20031105000008 , I20031105 ... #> $first_name             c1523 John            , Humberto        , Jorge     ... #> $last_name              c1523 Abt             , Fernandez Miro  , Santander ... #> $org_name               c1523 NA              , NA              , NA        ... #> $enroll_state           c1523 FL              , FL              , FL        ... #> $enroll_type            c1523 3               , 3               , 3         ... #> $enroll_desc            c1523 Non-DME Part B  , Non-DME Part B  , Non-DME P ... #> $enroll_specialty       c1523 General Practice, General Practice, General P ... #> $revalidation_due_date  D1523 NA              , NA              , NA        ... #> $adjusted_due_date      D1523 NA              , NA              , NA        ... #> $indiv_total_reassigned c1523 NA              , NA              , NA        ... #> $rec_bene_reassign      c1523 3               , 2               , 1         ..."},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"data-dictionary","dir":"Articles","previous_headings":"Medicare Revalidation Due Date List API","what":"Data Dictionary","title":"Medicare Revalidation APIs","text":"enrollment_id national_provider_identifier first_name last_name organization_name enrollment_state_code enrollment_type provider_type_text enrollment_specialty revalidation_due_date adjusted_due_date individual_total_reassign_to receiving_benefits_reassignment","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-clinic-group-practice-reassignment-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Clinic Group Practice Reassignment API","title":"Medicare Revalidation APIs","text":"","code":"revalidation_group(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\") |> terse::terse() #> Error in revalidation_group(ind_enroll_id = \"I20200929003184\", ind_npi = 1962026229, : unused arguments (ind_enroll_id = \"I20200929003184\", ind_npi = 1962026229, ind_first = \"Rashadda\", ind_last = \"Wong\", ind_state = \"CT\", ind_specialty = \"Physician Assistant\") revalidation_group(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") |> terse::terse() #> Error in revalidation_group(group_pac_id = 9436483807, group_enroll_id = \"O20190619002165\", : unused arguments (group_pac_id = 9436483807, group_enroll_id = \"O20190619002165\", group_bus_name = \"1st Call Urgent Care\", group_state = \"FL\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"data-dictionary-1","dir":"Articles","previous_headings":"Medicare Revalidation Clinic Group Practice Reassignment API","what":"Data Dictionary","title":"Medicare Revalidation APIs","text":"group_pac_id group_enrollment_id group_legal_business_name group_state_code group_due_date group_reassignments_and_physician_assistants record_type individual_enrollment_id individual_npi individual_first_name individual_last_name individual_state_code individual_specialty_description individual_due_date individual_total_employer_associations","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-reassignment-list-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Reassignment List API","title":"Medicare Revalidation APIs","text":"Reassignments Providers due Revalidation.  Revalidation Reassignment List dataset provides information reassignments providers due revalidation. Section 6401 () Affordable Care Act established requirement enrolled providers/suppliers revalidate Medicare enrollment information new enrollment screening criteria. CMS completed initial round revalidations resuming regular revalidation cycles accordance 42 CFR §424.515. effort streamline revalidation process reduce provider/supplier burden, CMS implemented several revalidation processing improvements one established due dates Providers must revalidate. Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet.","code":"revalidation_reassign(ind_enroll_id = \"I20200929003184\",                     ind_npi = 1962026229,                     ind_first = \"Rashadda\",                     ind_last = \"Wong\",                     ind_state = \"CT\",                     ind_specialty = \"Physician Assistant\") |> terse::terse() #> Error in revalidation_reassign(ind_enroll_id = \"I20200929003184\", ind_npi = 1962026229, : unused arguments (ind_enroll_id = \"I20200929003184\", ind_npi = 1962026229, ind_first = \"Rashadda\", ind_last = \"Wong\", ind_state = \"CT\", ind_specialty = \"Physician Assistant\")"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"Medicare Revalidation APIs","text":"Medicare Revalidation Reassignment List API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"medicare-provider-and-supplier-taxonomy-crosswalk-api","dir":"Articles","previous_headings":"","what":"Medicare Provider and Supplier Taxonomy Crosswalk API","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"Medicare Provider Supplier Taxonomy Crosswalk dataset lists providers suppliers eligible enroll Medicare programs proper healthcare provider taxonomy code. data includes Medicare speciality codes, available, provider/supplier type description, taxonomy code, taxonomy description. dataset derived information gathered National Plan Provider Enumerator System (NPPES) Provider Enrollment, Chain Ownership System (PECOS). Medicare Provider Supplier Taxonomy Crosswalk","code":"taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") #> # A tibble: 1 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 2086S0102X    Allopathic & Osteopathic Physicia… 2              Physician/Gen… provider::nucc_taxonomy_230 #> # A tibble: 873 × 8 #>    code     grouping classification specialization definition notes display_name #>    <chr>    <chr>    <chr>          <chr>          <chr>      <chr> <chr>        #>  1 1932000… Group    Multi-Special… NA             A busines… [7/1… Multi-Speci… #>  2 1934000… Group    Single Specia… NA             A busines… [7/1… Single Spec… #>  3 207K000… Allopat… Allergy & Imm… NA             An allerg… Sour… Allergy & I… #>  4 207KA02… Allopat… Allergy & Imm… Allergy        A physici… Sour… Allergy Phy… #>  5 207KI00… Allopat… Allergy & Imm… Clinical & La… An allerg… Sour… Clinical & … #>  6 207L000… Allopat… Anesthesiology NA             An anesth… Sour… Anesthesiol… #>  7 207LA04… Allopat… Anesthesiology Addiction Med… An anesth… Sour… Addiction M… #>  8 207LC02… Allopat… Anesthesiology Critical Care… An anesth… Sour… Critical Ca… #>  9 207LH00… Allopat… Anesthesiology Hospice and P… An anesth… Sour… Hospice and… #> 10 207LP29… Allopat… Anesthesiology Pain Medicine  An anesth… Sour… Pain Medici… #> # ℹ 863 more rows #> # ℹ 1 more variable: section <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"api-data-dictionary","dir":"Articles","previous_headings":"Medicare Provider and Supplier Taxonomy Crosswalk API","what":"API Data Dictionary","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"medicare_specialty_code medicare_provider_supplier_type_description provider_taxonomy_code provider_taxonomy_description_type_classification_specialization","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"further-reading","dir":"Articles","previous_headings":"Medicare Provider and Supplier Taxonomy Crosswalk API","what":"Further Reading","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"Endpoints Information CMS Public Reporting Missing Digital Contact Information","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"search-examples","dir":"Articles","previous_headings":"","what":"Search Examples","title":"NPPES NPI Registry API","text":"","code":"nppes_npi(npi = 1114499340) #> # A tibble: 3 × 25 #>   npi        entype enumeration_date enumeration_duration    last_updated #>   <chr>      <chr>  <date>           <Duration>              <date>       #> 1 1114499340 Ind    2018-12-28       138931200s (~4.4 years) 2020-06-15   #> 2 1114499340 Ind    2018-12-28       138931200s (~4.4 years) 2020-06-15   #> 3 1114499340 Ind    2018-12-28       138931200s (~4.4 years) 2020-06-15   #> # ℹ 20 more variables: certification_date <date>, status <chr>, #> #   first_name <chr>, last_name <chr>, credential <chr>, gender <chr>, #> #   sole_proprietor <lgl>, purpose <chr>, street <chr>, city <chr>, #> #   state <chr>, zipcode <chr>, country <chr>, phone_number <chr>, #> #   tx_code <chr>, tx_desc <chr>, tx_group <chr>, tx_state <chr>, #> #   tx_license <chr>, tx_primary <lgl> nppes_npi(npi = 1528060837) #> # A tibble: 16 × 29 #>    npi     entype enumeration_date enumeration_duration      last_updated status #>    <chr>   <chr>  <date>           <Duration>                <date>       <chr>  #>  1 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #>  2 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #>  3 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #>  4 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #>  5 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #>  6 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #>  7 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #>  8 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #>  9 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #> 10 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #> 11 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #> 12 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #> 13 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #> 14 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #> 15 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #> 16 152806… Ind    2005-06-01       567302400s (~17.98 years) 2007-07-09   A      #> # ℹ 23 more variables: first_name <chr>, middle_name <chr>, last_name <chr>, #> #   credential <chr>, gender <chr>, sole_proprietor <lgl>, purpose <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, country <chr>, #> #   phone_number <chr>, fax_number <chr>, tx_code <chr>, tx_desc <chr>, #> #   tx_group <chr>, tx_state <chr>, tx_license <chr>, tx_primary <lgl>, #> #   id_issuer <chr>, id_identifier <chr>, id_state <chr> # City, state, country nppes_npi(city = \"Atlanta\",           state = \"GA\",           country = \"US\") #> # A tibble: 701 × 66 #>    npi        entype enumeration_date enumeration_duration      last_updated #>    <chr>      <chr>  <date>           <Duration>                <date>       #>  1 1881942746 Org    2012-08-27       338860800s (~10.74 years) 2012-08-27   #>  2 1881942746 Org    2012-08-27       338860800s (~10.74 years) 2012-08-27   #>  3 1881942746 Org    2012-08-27       338860800s (~10.74 years) 2012-08-27   #>  4 1881942746 Org    2012-08-27       338860800s (~10.74 years) 2012-08-27   #>  5 1598140279 Org    2015-07-23       247276800s (~7.84 years)  2016-12-03   #>  6 1598140279 Org    2015-07-23       247276800s (~7.84 years)  2016-12-03   #>  7 1801411459 Org    2020-06-10       93139200s (~2.95 years)   2020-06-10   #>  8 1801411459 Org    2020-06-10       93139200s (~2.95 years)   2020-06-10   #>  9 1639793664 Org    2020-06-05       93571200s (~2.97 years)   2020-06-05   #> 10 1639793664 Org    2020-06-05       93571200s (~2.97 years)   2020-06-05   #> # ℹ 691 more rows #> # ℹ 61 more variables: certification_date <date>, status <chr>, #> #   organization_name <chr>, first_name <chr>, middle_name <chr>, #> #   last_name <chr>, credential <chr>, gender <chr>, #> #   organizational_subpart <lgl>, sole_proprietor <lgl>, purpose <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, country <chr>, #> #   phone_number <chr>, fax_number <chr>, … # First name, city, state nppes_npi(first = \"John\",           city = \"Baltimore\",           state = \"MD\") #> # A tibble: 889 × 53 #>    npi        entype enumeration_date enumeration_duration      last_updated #>    <chr>      <chr>  <date>           <Duration>                <date>       #>  1 1700934569 Ind    2007-01-08       516672000s (~16.37 years) 2012-03-07   #>  2 1700934569 Ind    2007-01-08       516672000s (~16.37 years) 2012-03-07   #>  3 1700934569 Ind    2007-01-08       516672000s (~16.37 years) 2012-03-07   #>  4 1700934569 Ind    2007-01-08       516672000s (~16.37 years) 2012-03-07   #>  5 1396825477 Ind    2006-10-16       523929600s (~16.6 years)  2007-07-08   #>  6 1396825477 Ind    2006-10-16       523929600s (~16.6 years)  2007-07-08   #>  7 1033595855 Ind    2015-08-04       246240000s (~7.8 years)   2018-06-16   #>  8 1033595855 Ind    2015-08-04       246240000s (~7.8 years)   2018-06-16   #>  9 1033595855 Ind    2015-08-04       246240000s (~7.8 years)   2018-06-16   #> 10 1033595855 Ind    2015-08-04       246240000s (~7.8 years)   2018-06-16   #> # ℹ 879 more rows #> # ℹ 48 more variables: certification_date <date>, status <chr>, #> #   first_name <chr>, middle_name <chr>, last_name <chr>, credential <chr>, #> #   gender <chr>, sole_proprietor <lgl>, purpose <chr>, street <chr>, #> #   city <chr>, state <chr>, zipcode <chr>, country <chr>, phone_number <chr>, #> #   fax_number <chr>, tx_code <chr>, tx_desc <chr>, tx_group <chr>, #> #   tx_state <chr>, tx_license <chr>, tx_primary <lgl>, id_issuer <chr>, … nppes_npi(npi = 1336413418) # NPI-2 #> # A tibble: 2 × 28 #>   npi        entype enumeration_date enumeration_duration      last_updated #>   <chr>      <chr>  <date>           <Duration>                <date>       #> 1 1336413418 Org    2012-03-07       353808000s (~11.21 years) 2020-01-07   #> 2 1336413418 Org    2012-03-07       353808000s (~11.21 years) 2020-01-07   #> # ℹ 23 more variables: certification_date <date>, status <chr>, #> #   organization_name <chr>, organizational_subpart <lgl>, purpose <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, country <chr>, #> #   phone_number <chr>, fax_number <chr>, authorized_official_first_name <chr>, #> #   authorized_official_middle_name <chr>, authorized_official_last_name <chr>, #> #   authorized_official_title_or_position <chr>, #> #   authorized_official_telephone_number <chr>, tx_code <chr>, tx_desc <chr>, … nppes_npi(npi = 1710975040) # NPI-1 #> # A tibble: 4 × 29 #>   npi      entype enumeration_date enumeration_duration      last_updated status #>   <chr>    <chr>  <date>           <Duration>                <date>       <chr>  #> 1 1710975… Ind    2005-10-11       555897600s (~17.62 years) 2007-07-08   A      #> 2 1710975… Ind    2005-10-11       555897600s (~17.62 years) 2007-07-08   A      #> 3 1710975… Ind    2005-10-11       555897600s (~17.62 years) 2007-07-08   A      #> 4 1710975… Ind    2005-10-11       555897600s (~17.62 years) 2007-07-08   A      #> # ℹ 23 more variables: first_name <chr>, middle_name <chr>, last_name <chr>, #> #   credential <chr>, gender <chr>, sole_proprietor <lgl>, purpose <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, country <chr>, #> #   phone_number <chr>, fax_number <chr>, tx_code <chr>, tx_desc <chr>, #> #   tx_group <chr>, tx_state <chr>, tx_license <chr>, tx_primary <lgl>, #> #   id_issuer <chr>, id_identifier <chr>, id_state <chr> nppes_npi(npi = 1659781227) # Deactivated"},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"advanced-usage","dir":"Articles","previous_headings":"","what":"Advanced Usage","title":"NPPES NPI Registry API","text":"","code":"# Vector of NPIs c(1003026055,    1316405939,    1720392988) |>    purrr::map(nppes_npi) |>    purrr::list_rbind() #> # A tibble: 12 × 49 #>    npi     entype enumeration_date enumeration_duration      last_updated status #>    <chr>   <chr>  <date>           <Duration>                <date>       <chr>  #>  1 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  2 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  3 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  4 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  5 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  6 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  7 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  8 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  9 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> 10 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> 11 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> 12 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> # ℹ 43 more variables: first_name <chr>, middle_name <chr>, last_name <chr>, #> #   credential <chr>, gender <chr>, sole_proprietor <lgl>, purpose <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, country <chr>, #> #   phone_number <chr>, fax_number <chr>, tx_code <chr>, tx_desc <chr>, #> #   tx_group <chr>, tx_state <chr>, tx_license <chr>, tx_primary <lgl>, #> #   id_issuer <chr>, id_identifier <chr>, id_state <chr>, #> #   certification_date <date>, other_type <chr>, other_code <chr>, … # List of NPIs list(1003026055,       1316405939,       1720392988) |>    purrr::map(nppes_npi) |>    purrr::list_rbind() #> # A tibble: 12 × 49 #>    npi     entype enumeration_date enumeration_duration      last_updated status #>    <chr>   <chr>  <date>           <Duration>                <date>       <chr>  #>  1 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  2 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  3 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  4 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  5 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  6 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  7 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  8 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  9 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> 10 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> 11 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> 12 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> # ℹ 43 more variables: first_name <chr>, middle_name <chr>, last_name <chr>, #> #   credential <chr>, gender <chr>, sole_proprietor <lgl>, purpose <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, country <chr>, #> #   phone_number <chr>, fax_number <chr>, tx_code <chr>, tx_desc <chr>, #> #   tx_group <chr>, tx_state <chr>, tx_license <chr>, tx_primary <lgl>, #> #   id_issuer <chr>, id_identifier <chr>, id_state <chr>, #> #   certification_date <date>, other_type <chr>, other_code <chr>, … # Data frame of NPIs data.frame(npi = c(1003026055,                     1316405939,                     1720392988)) |>    dplyr::pull(npi) |>    purrr::map(nppes_npi) |>    purrr::list_rbind() #> # A tibble: 12 × 49 #>    npi     entype enumeration_date enumeration_duration      last_updated status #>    <chr>   <chr>  <date>           <Duration>                <date>       <chr>  #>  1 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  2 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  3 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  4 100302… Ind    2007-05-22       505094400s (~16.01 years) 2017-04-28   A      #>  5 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  6 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  7 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  8 131640… Ind    2019-03-04       133228800s (~4.22 years)  2023-04-06   A      #>  9 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> 10 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> 11 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> 12 172039… Ind    2010-07-29       404524800s (~12.82 years) 2021-01-08   A      #> # ℹ 43 more variables: first_name <chr>, middle_name <chr>, last_name <chr>, #> #   credential <chr>, gender <chr>, sole_proprietor <lgl>, purpose <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, country <chr>, #> #   phone_number <chr>, fax_number <chr>, tx_code <chr>, tx_desc <chr>, #> #   tx_group <chr>, tx_state <chr>, tx_license <chr>, tx_primary <lgl>, #> #   id_issuer <chr>, id_identifier <chr>, id_state <chr>, #> #   certification_date <date>, other_type <chr>, other_code <chr>, …"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"enumeration-type","dir":"Articles","previous_headings":"API Documentation","what":"Enumeration Type","title":"NPPES NPI Registry API","text":"Two categories health care providers exist NPI enumeration purposes: Entity Type 1 (Individual) Entity Type 2 (Organizational).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"npi-1-individual","dir":"Articles","previous_headings":"API Documentation > Enumeration Type","what":"NPI-1: Individual","title":"NPPES NPI Registry API","text":"Individual health care providers (including sole proprietors) may get NPI Entity Type 1. sole proprietor, must apply NPI using SSN, Employer Identification Number (EIN) even EIN. sole proprietor, may get one NPI, just like individual. following factors affect whether sole proprietor Entity Type 1: Number different office locations Whether employees Whether IRS issued EIN. incorporated individual single health care provider forms conducts business corporation. sole proprietor incorporated individual sole proprietor didn’t form corporation. ’re sole/solo practitioner, doesn’t necessarily mean ’re sole proprietor, vice versa. ’re individual health care provider ’s incorporated, may need get NPI (Entity Type 1) NPI corporation LLC (Entity Type 2).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"npi-2-organizational","dir":"Articles","previous_headings":"API Documentation > Enumeration Type","what":"NPI-2: Organizational","title":"NPPES NPI Registry API","text":"Organizational health care providers group health care providers eligible NPIs Entity Type 2. Organization health care providers may single employee thousands employees. example incorporated individual organization’s employee. organization health care providers made parts work somewhat independently parent organization. parts may offer different types health care offer health care separate physical locations. parts physical locations aren’t legal entities part organization health care provider (legal entity). NPI Final Rule refers parts locations subparts. organization health care provider can get subparts NPIs. subpart conducts HIPAA standard transactions (separately parent), must get NPI. Subpart determination makes sure entities within covered organization uniquely identified HIPAA standard transactions conduct Medicare covered entities. example, hospital offers acute care, laboratory, pharmacy, rehabilitation services. subparts may need NPI sends standard transactions one health plans. Subpart delegation doesn’t affect Entity Type 1 health care providers. individuals, health care providers can’t choose subparts subparts.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"authorized-official","dir":"Articles","previous_headings":"API Documentation > Enumeration Type","what":"Authorized Official","title":"NPPES NPI Registry API","text":"appointed official (e.g., chief executive officer, chief financial officer, general partner, chairman board, direct owner) organization granted legal authority enroll Medicare program, make changes updates organization’s status Medicare program, commit organization fully abide statutes, regulations, program instructions Medicare program. See 42 CFR 424.502 additional information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/pending-applications.html","id":"search-examples","dir":"Articles","previous_headings":"","what":"Search Examples","title":"Pending Applications","text":"","code":"pending_applications(last_name = \"Smith\",                       type = \"physician\") |>    provider:::gt_prov() pending_applications(last_name = \"Bruce\",                       type = \"non-physician\") |>    provider:::gt_prov()"},{"path":"https://andrewallenbruce.github.io/provider/articles/pending-applications.html","id":"links","dir":"Articles","previous_headings":"Search Examples","what":"Links","title":"Pending Applications","text":"Medicare Pending Initial Logging Tracking Physicians API Medicare Pending Initial Logging Tracking Non-Physicians API","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-geography.html","id":"search-examples","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Geography and Service","what":"Search Examples","title":"Physician by Geography","text":"","code":"physician_by_geography(hcpcs_code = \"0002A\", year = 2020) #> # A tibble: 9 × 16 #>    year level sublevel fips  hcpcs hcpcs_desc hcpcs_drug place_of_srvc tot_provs #>   <int> <chr> <chr>    <chr> <chr> <chr>      <lgl>      <chr>             <int> #> 1  2020 Nati… National NA    0002A Adm sarsc… FALSE      Office               53 #> 2  2020 State Califor… 06    0002A Adm sarsc… FALSE      Office                3 #> 3  2020 State Florida  12    0002A Adm sarsc… FALSE      Office                5 #> 4  2020 State Illinois 17    0002A Adm sarsc… FALSE      Office                3 #> 5  2020 State Maine    23    0002A Adm sarsc… FALSE      Office                1 #> 6  2020 State Maryland 24    0002A Adm sarsc… FALSE      Office                3 #> 7  2020 State Massach… 25    0002A Adm sarsc… FALSE      Office                3 #> 8  2020 State New Jer… 34    0002A Adm sarsc… FALSE      Office                3 #> 9  2020 State Pennsyl… 42    0002A Adm sarsc… FALSE      Office                4 #> # ℹ 7 more variables: tot_benes <int>, tot_srvcs <int>, tot_day <int>, #> #   avg_charge <dbl>, avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl>"},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-geography.html","id":"data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Geography and Service","what":"Data Dictionary","title":"Physician by Geography","text":"level fips sublevel hcpcs_cd hcpcs_desc hcpcs_drug place_of_srvc tot_provs tot_srvcs tot_benes tot_day avg_charge avg_allowed avg_payment avg_std_pymt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-provider.html","id":"physician-other-practitioners-by-provider","dir":"Articles","previous_headings":"","what":"Physician & Other Practitioners: by Provider","title":"Physician by Provider","text":"Provider data subset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI). dataset based information gathered CMS administrative claims data Original Medicare Part B beneficiaries available CMS Chronic Conditions Data Warehouse. Data update frequency: Annually Data source: Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-provider.html","id":"search-examples","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider","what":"Search Examples","title":"Physician by Provider","text":"bene_cc_af: Atrial Fibrillation bene_cc_alz: Alzheimer’s Disease Dementia bene_cc_asth: Asthma bene_cc_canc: Cancer bene_cc_chf: Heart Failure bene_cc_ckd: Chronic Kidney Disease bene_cc_copd: Chronic Obstructive Pulmonary Disease bene_cc_dep: Depression bene_cc_diab: Diabetes bene_cc_hplip: Hyperlipidemia bene_cc_hpten: Hypertension bene_cc_ihd: Ischemic Heart Disease bene_cc_opo: Osteoporosis bene_cc_raoa: Rheumatoid Arthritis / Osteoarthritis bene_cc_sz: Schizophrenia / Psychotic Disorders bene_cc_strk: Stroke","code":"sh <- 2014:2021 |>    purrr::map(\\(year) physician_by_provider(year, npi = 1043477615)) |>    purrr::list_rbind() sh |>    dplyr::select(npi:par) |>    dplyr::filter(dplyr::row_number() %in% c(8)) |>    provider:::display_long() |>    gt::gt() |>    gtExtras::gt_theme_538() gt_1 <- sh |>    dplyr::select(year, tot_benes:tot_payment) |>    provider:::change_abs(tot_benes, year) |>    provider:::change_pct(tot_benes, tot_benes_chg, year) |>    provider:::change_abs(tot_srvcs, year) |>    provider:::change_pct(tot_srvcs, tot_srvcs_chg, year) |>    provider:::change_abs(tot_charges, year) |>    provider:::change_pct(tot_charges, tot_charges_chg, year) |>    provider:::change_abs(tot_allowed, year) |>    provider:::change_pct(tot_allowed, tot_allowed_chg, year) |>    provider:::change_abs(tot_payment, year) |>    provider:::change_pct(tot_payment, tot_payment_chg, year) |>    gt::gt() |>    gtExtras::gt_theme_538() |>    gt::fmt_currency(     columns = c(     tot_charges,      tot_charges_chg,     tot_allowed,     tot_allowed_chg,     tot_payment,     tot_payment_chg),      currency = \"USD\",      suffixing = TRUE,      sep_mark = \",\",      incl_space = FALSE) |>    gt::cols_hide(columns = c(dplyr::contains(\"chg\"))) |>    gt::cols_label(tot_benes = \"Beneficiaries\",                  tot_benes_pct = \"Change\",                  tot_srvcs = \"Procedures\",                  tot_srvcs_pct = \"Change\",                  tot_charges = \"Charges\",                  tot_charges_pct = \"Change\",                  tot_allowed = \"Allowed\",                  tot_allowed_pct = \"Change\",                  tot_payment = \"Payment\",                  tot_payment_pct = \"Change\") |>    gt::fmt_percent(columns = dplyr::contains(\"pct\"), decimals = 0, force_sign = TRUE) |>    gt::sub_missing(columns = dplyr::everything(), missing_text = \"--\") |>    gt::cols_merge_n_pct(col_n = tot_benes,                        col_pct = tot_benes_pct) |>   gt::cols_merge_n_pct(col_n = tot_srvcs,                        col_pct = tot_srvcs_pct) |>   gt::cols_merge_n_pct(col_n = tot_charges,                        col_pct = tot_charges_pct) |>   gt::cols_merge_n_pct(col_n = tot_allowed,                        col_pct = tot_allowed_pct) |>   gt::cols_merge_n_pct(col_n = tot_payment,                        col_pct = tot_payment_pct) |>   gt::tab_style(style = gt::cell_text(     font = c(gt::google_font(name = \"Fira Code\"), gt::default_fonts())),     locations = gt::cells_body(columns = dplyr::contains(c(\"tot\")))) |>    gtExtras::gt_add_divider(     columns = c(\"year\", \"tot_benes\",                  \"tot_srvcs\",                  \"tot_charges\",                  \"tot_allowed\"),      style = \"solid\",     color = \"black\",     weight = gt::px(3),     include_labels = FALSE) |>   gt::tab_header(     title = gt::md(\"Medicare Provider Summary: **2014 - 2021**\"),     subtitle = gt::md(\"Provider: Sarah K. Hussein, MD (NPI: 1043477615)\")) |>    gt::tab_source_note(source_note = \"Source: data.cms.gov\") sh |>    dplyr::select(year, tot_benes,                  bene_age_avg:bene_age_gt84) |>    dplyr::mutate(pct_lt65 = bene_age_lt65 / tot_benes,                 pct_6574 = bene_age_65_74 / tot_benes,                 pct_7584 = bene_age_75_84 / tot_benes,                 pct_gt84 = bene_age_gt84 / tot_benes) #> # A tibble: 8 × 11 #>    year tot_benes bene_age_avg bene_age_lt65 bene_age_65_74 bene_age_75_84 #>   <int>     <int>        <int>         <int>          <int>          <int> #> 1  2014       598           73            92            231            183 #> 2  2015      1042           72           191            398            313 #> 3  2016       619           73            95            235            211 #> 4  2017       606           73            85            246            179 #> 5  2018       505           74            63            206            167 #> 6  2019       532           74            59            222            173 #> 7  2020       650           75            65            270            205 #> 8  2021       748           75            57            333            232 #> # ℹ 5 more variables: bene_age_gt84 <int>, pct_lt65 <dbl>, pct_6574 <dbl>, #> #   pct_7584 <dbl>, pct_gt84 <dbl> sh |> dplyr::select(year, tot_benes, bene_female:bene_male) #> # A tibble: 8 × 4 #>    year tot_benes bene_female bene_male #>   <int>     <int>       <int>     <int> #> 1  2014       598         285       313 #> 2  2015      1042         498       544 #> 3  2016       619         306       313 #> 4  2017       606         287       319 #> 5  2018       505         221       284 #> 6  2019       532         226       306 #> 7  2020       650         278       372 #> 8  2021       748         343       405 sh |> dplyr::select(year, tot_benes, bene_race_wht:bene_race_oth) #> # A tibble: 8 × 8 #>    year tot_benes bene_race_wht bene_race_blk bene_race_api bene_race_span #>   <int>     <int>         <int>         <int>         <int>          <int> #> 1  2014       598           558            14            NA             13 #> 2  2015      1042           963            35            NA             28 #> 3  2016       619           572            19            NA             NA #> 4  2017       606           558            20            NA             13 #> 5  2018       505           478            NA            NA             NA #> 6  2019       532           494            15            NA             11 #> 7  2020       650           611            13            NA             NA #> 8  2021       748           692            17            NA             NA #> # ℹ 2 more variables: bene_race_nat <int>, bene_race_oth <int> sh |> dplyr::select(year, tot_benes, bene_dual:bene_ndual) #> # A tibble: 8 × 4 #>    year tot_benes bene_dual bene_ndual #>   <int>     <int>     <int>      <int> #> 1  2014       598        84        514 #> 2  2015      1042       181        861 #> 3  2016       619       104        515 #> 4  2017       606        81        525 #> 5  2018       505        65        440 #> 6  2019       532        61        471 #> 7  2020       650        62        588 #> 8  2021       748        62        686 sh |> dplyr::select(year, tot_benes, bene_cc_af:bene_risk_avg) |>    dplyr::mutate(     tot_af = round(tot_benes * bene_cc_af),     tot_alz = round(tot_benes * bene_cc_alz),     tot_asth = round(tot_benes * bene_cc_asth),     tot_canc = round(tot_benes * bene_cc_canc),     tot_chf = round(tot_benes * bene_cc_chf),     tot_ckd = round(tot_benes * bene_cc_ckd),     tot_copd = round(tot_benes * bene_cc_copd),     tot_dep = round(tot_benes * bene_cc_dep),     tot_diab = round(tot_benes * bene_cc_diab),     tot_hplip = round(tot_benes * bene_cc_hplip),     tot_hpten = round(tot_benes * bene_cc_hpten),     tot_ihd = round(tot_benes * bene_cc_ihd),     tot_opo = round(tot_benes * bene_cc_opo),     tot_raoa = round(tot_benes * bene_cc_raoa),     tot_sz = round(tot_benes * bene_cc_sz),     tot_strk = round(tot_benes * bene_cc_strk)) #> # A tibble: 8 × 35 #>    year tot_benes bene_cc_af bene_cc_alz bene_cc_asth bene_cc_canc bene_cc_chf #>   <int>     <int>      <dbl>       <dbl>        <dbl>        <dbl>       <dbl> #> 1  2014       598       0.29        0.1          0.1          0.12        0.4  #> 2  2015      1042       0.3         0.12         0.09         0.15        0.4  #> 3  2016       619       0.4         0.13         0.1          0.16        0.44 #> 4  2017       606       0.41        0.14         0.1          0.1         0.41 #> 5  2018       505       0.45        0.13         0.09         0.13        0.49 #> 6  2019       532       0.46        0.14         0.06         0.12        0.49 #> 7  2020       650       0.43        0.15         0.08         0.12        0.44 #> 8  2021       748       0.37        0.13         0.06         0.14        0.39 #> # ℹ 28 more variables: bene_cc_ckd <dbl>, bene_cc_copd <dbl>, #> #   bene_cc_dep <dbl>, bene_cc_diab <dbl>, bene_cc_hplip <dbl>, #> #   bene_cc_hpten <dbl>, bene_cc_ihd <dbl>, bene_cc_opo <dbl>, #> #   bene_cc_raoa <dbl>, bene_cc_sz <dbl>, bene_cc_strk <dbl>, #> #   bene_risk_avg <dbl>, tot_af <dbl>, tot_alz <dbl>, tot_asth <dbl>, #> #   tot_canc <dbl>, tot_chf <dbl>, tot_ckd <dbl>, tot_copd <dbl>, #> #   tot_dep <dbl>, tot_diab <dbl>, tot_hplip <dbl>, tot_hpten <dbl>, … physician_by_provider(year = 2021,                        entype = \"I\",                        city = \"Hershey\",                        state = \"PA\",                        fips = 42,                        ruca = 1,                        gender = \"F\",                        credential = \"MD\") #> # A tibble: 139 × 70 #>     year npi    first_name middle_name last_name credential gender entype street #>    <int> <chr>  <chr>      <chr>       <chr>     <chr>      <chr>  <chr>  <chr>  #>  1  2021 10030… Kristin    A           Riley     MD         F      Ind    35 Ho… #>  2  2021 10030… Hiroko     NA          Shike     MD         F      Ind    500 U… #>  3  2021 10039… Rebecca    NA          Phaeton   MD         F      Ind    500 U… #>  4  2021 10039… Karen      L           Krok      MD         F      Ind    500 U… #>  5  2021 10133… Rashmi     NA          Banjade   MD         F      Ind    500 U… #>  6  2021 10232… Melissa    L           Coleman   MD         F      Ind    500 U… #>  7  2021 10334… Sheila     P           Nguyen    MD         F      Ind    500 U… #>  8  2021 10434… Sarah      K           Hussain   MD         F      Ind    500 U… #>  9  2021 10533… Shelley    R           Hankins   MD         F      Ind    500 U… #> 10  2021 10536… Maria      C           Castello… MD         F      Ind    500 U… #> # ℹ 129 more rows #> # ℹ 61 more variables: city <chr>, state <chr>, fips <chr>, zipcode <chr>, #> #   ruca <chr>, country <chr>, specialty <chr>, par <lgl>, tot_hcpcs <int>, #> #   tot_benes <int>, tot_srvcs <int>, tot_charges <dbl>, tot_allowed <dbl>, #> #   tot_payment <dbl>, tot_std_pymt <dbl>, drug_hcpcs <int>, drug_benes <int>, #> #   drug_srvcs <int>, drug_charges <dbl>, drug_allowed <dbl>, #> #   drug_payment <dbl>, drug_std_pymt <dbl>, med_hcpcs <int>, …"},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-provider.html","id":"data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider","what":"Data Dictionary","title":"Physician by Provider","text":"npi last_name first_name middle_name credential gender entype street city state fips zipcode ruca ruca_desc country specialty par tot_hcpcs tot_benes tot_srvcs tot_charges tot_allowed tot_payment tot_std_pymt drug_hcpcs drug_benes drug_srvcs drug_charges drug_allowed drug_payment drug_std_pymt med_hcpcs med_benes med_srvcs med_charges med_allowed med_payment med_std_pymt bene_avg_age bene_age_lt65 bene_age_65_74 bene_age_75_84 bene_age_gt84 bene_female bene_male bene_race_wht bene_race_blk bene_race_api bene_race_hsp bene_race_nat bene_race_oth bene_dual bene_ndual bene_cc_af bene_cc_alz bene_cc_asth bene_cc_canc bene_cc_chf bene_cc_ckd bene_cc_copd bene_cc_dep bene_cc_diab bene_cc_hplp bene_cc_hpten bene_cc_ihd bene_cc_opo bene_cc_raoa bene_cc_sz bene_cc_strk bene_risk_avg","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-service.html","id":"physician-other-practitioners-by-provider","dir":"Articles","previous_headings":"","what":"Physician & Other Practitioners: by Provider","title":"Physician by Service","text":"Provider data subset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI). dataset based information gathered CMS administrative claims data Original Medicare Part B beneficiaries available CMS Chronic Conditions Data Warehouse. Data update frequency: Annually Data source: Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-service.html","id":"examples","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider","what":"Examples","title":"Physician by Service","text":"","code":"2013:2021 |>    purrr::map(\\(year) physician_by_provider(year, npi = 1003000423)) |>    purrr::list_rbind() #> # A tibble: 9 × 70 #>    year npi     first_name middle_name last_name credential gender entype street #>   <int> <chr>   <chr>      <chr>       <chr>     <chr>      <chr>  <chr>  <chr>  #> 1  2013 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 2  2014 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 3  2015 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 4  2016 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 5  2017 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 6  2018 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 7  2019 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 8  2020 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> 9  2021 100300… Jennifer   A           Velotta   MD         F      Ind    11100… #> # ℹ 61 more variables: city <chr>, state <chr>, fips <chr>, zipcode <chr>, #> #   ruca <chr>, country <chr>, specialty <chr>, par <lgl>, tot_hcpcs <int>, #> #   tot_benes <int>, tot_srvcs <int>, tot_charges <dbl>, tot_allowed <dbl>, #> #   tot_payment <dbl>, tot_std_pymt <dbl>, drug_hcpcs <int>, drug_benes <int>, #> #   drug_srvcs <int>, drug_charges <dbl>, drug_allowed <dbl>, #> #   drug_payment <dbl>, drug_std_pymt <dbl>, med_hcpcs <int>, med_benes <int>, #> #   med_srvcs <int>, med_charges <dbl>, med_allowed <dbl>, med_payment <dbl>, … physician_by_provider(year = 2021,                        entype = \"I\",                        city = \"Hershey\",                        state = \"PA\",                        fips = 42,                        ruca = 1,                        gender = \"F\",                        credential = \"MD\",                        specialty = \"Anesthesiology\") #> # A tibble: 17 × 70 #>     year npi    first_name middle_name last_name credential gender entype street #>    <int> <chr>  <chr>      <chr>       <chr>     <chr>      <chr>  <chr>  <chr>  #>  1  2021 10232… Melissa    L           Coleman   MD         F      Ind    500 U… #>  2  2021 10634… Padmani    NA          Dhar      MD         F      Ind    500 U… #>  3  2021 11240… To-Nhu     NA          Vu        MD         F      Ind    500 U… #>  4  2021 12159… Cathy      D           Paige     MD         F      Ind    500 U… #>  5  2021 13062… Eileen     M           Micaroni  MD         F      Ind    500 U… #>  6  2021 14473… Anita      NA          Malhotra  MD         F      Ind    500 U… #>  7  2021 15482… Sonia      J           Vaida     MD         F      Ind    500 U… #>  8  2021 15583… Priti      G           Dalal     MD         F      Ind    500 U… #>  9  2021 16090… Zoulfira   NA          Nisnevit… MD         F      Ind    500 U… #> 10  2021 17503… Niraja     NA          Rajan     MD         F      Ind    500 U… #> 11  2021 18010… Sharon     NA          Lee       MD         F      Ind    500 U… #> 12  2021 18018… Jansie     NA          Prozesky  MD         F      Ind    500 U… #> 13  2021 18514… Kelly      S           Gidusko   MD         F      Ind    500 U… #> 14  2021 18717… Rochelle   NA          Sims      MD         F      Ind    500 U… #> 15  2021 18917… Elizabeth  H           Sinz      MD         F      Ind    500 U… #> 16  2021 19222… Kristin    B           Brennan   MD         F      Ind    500 U… #> 17  2021 19628… Sadie      E           Smith     MD         F      Ind    500 U… #> # ℹ 61 more variables: city <chr>, state <chr>, fips <chr>, zipcode <chr>, #> #   ruca <chr>, country <chr>, specialty <chr>, par <lgl>, tot_hcpcs <int>, #> #   tot_benes <int>, tot_srvcs <int>, tot_charges <dbl>, tot_allowed <dbl>, #> #   tot_payment <dbl>, tot_std_pymt <dbl>, drug_hcpcs <int>, drug_benes <int>, #> #   drug_srvcs <int>, drug_charges <dbl>, drug_allowed <dbl>, #> #   drug_payment <dbl>, drug_std_pymt <dbl>, med_hcpcs <int>, med_benes <int>, #> #   med_srvcs <int>, med_charges <dbl>, med_allowed <dbl>, med_payment <dbl>, …"},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-service.html","id":"physician-other-practitioners-by-provider-and-service","dir":"Articles","previous_headings":"","what":"Physician & Other Practitioners: by Provider and Service","title":"Physician by Service","text":"spending utilization data Physician Practitioners Provider Service Dataset aggregated following:  NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility).  can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-service.html","id":"examples-1","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Examples","title":"Physician by Service","text":"","code":"pbs <- 2013:2021 |>    purrr::map(\\(year) physician_by_service(year, npi = 1003000126)) |>    purrr::list_rbind() pbs |>    dplyr::select(year:zipcode) |>    dplyr::filter(dplyr::row_number() %in% c(1, 70)) |>    janitor::remove_empty(c(\"rows\", \"cols\")) #> # A tibble: 2 × 13 #>    year npi       entype first_name last_name credential gender specialty street #>   <int> <chr>     <chr>  <chr>      <chr>     <chr>      <chr>  <chr>     <chr>  #> 1  2013 10030001… Ind    Ardalan    Enkeshafi MD         M      Internal… 900 S… #> 2  2020 10030001… Ind    Ardalan    Enkeshafi MD         M      Internal… 6410 … #> # ℹ 4 more variables: city <chr>, state <chr>, fips <chr>, zipcode <chr> gt1 <- pbs |>    dplyr::select(year, hcpcs_cd:avg_std_pymt) |>    dplyr::group_by(year) |>    dplyr::summarise(unique_hcpcs = dplyr::n(),                    tot_benes = sum(tot_benes),                    tot_srvcs = sum(tot_srvcs),                    tot_benes = sum(tot_benes),                    avg_charge = mean(avg_charge),                    avg_allowed = mean(avg_allowed),                    avg_payment = mean(avg_payment)) |>    gt::gt() |>    gtExtras::gt_theme_538() |>    gt::fmt_currency(     columns = c(     avg_charge,      avg_allowed,     avg_payment),      currency = \"USD\",      suffixing = TRUE,      sep_mark = \",\",      incl_space = TRUE) |>    gt::cols_label(unique_hcpcs = \"Unique HCPCS\",                  tot_benes = \"Beneficiaries\",                  tot_srvcs = \"Services\",                  avg_charge = \"Avg. Charge\",                  avg_allowed = \"Avg. Allowed\",                  avg_payment = \"Avg. Payment\") |>    gtExtras::gt_color_rows(columns = dplyr::contains(c(\"avg\"))) |>    gt::tab_style(style = gt::cell_text(     font = c(gt::google_font(name = \"Fira Code\"), gt::default_fonts())),     locations = gt::cells_body(columns = dplyr::contains(c(\"avg\")))) |>    gtExtras::gt_add_divider(     columns = c(\"year\",                  \"tot_srvcs\"),      style = \"solid\",     color = \"black\",     weight = gt::px(3),     include_labels = FALSE) |>   gt::tab_header(     title = gt::md(\"Medicare Provider Summary: **2013 - 2021**\"),     subtitle = gt::md(\"Provider: Ardalan Enkeshafi, MD (NPI: 1003000126)\")) |>    gt::tab_source_note(source_note = \"Source: data.cms.gov\") |>    gt::tab_options(table.width = gt::pct(100)) df <- pbs |>    dplyr::select(year,                  hcpcs_cd,                 place_of_srvc)  # Individual level individual <- pbs |>    dplyr::select(year,                  hcpcs_cd:avg_std_pymt)  individual <- individual |>    dplyr::select(year,                  hcpcs = hcpcs_cd,                  hcpcs_desc,                  place_of_srvc,                  avg_charge,                  avg_allowed,                  avg_payment) |>    dplyr::mutate(sublevel = \"Individual\",                  .after = year)     # State level state <- purrr::map2_dfr(   df$year,    df$hcpcs_cd, ~physician_by_geography(sublevel = \"Maryland\",                                         year = .x,                                         hcpcs_code = .y))  state <- state |>    dplyr::select(year,                  sublevel,                  hcpcs,                  hcpcs_desc,                  place_of_srvc,                  avg_charge,                  avg_allowed,                  avg_payment) |>    dplyr::right_join(df,                      by = dplyr::join_by(                       year == year,                        hcpcs == hcpcs_cd,                        place_of_srvc == place_of_srvc)) |>    dplyr::mutate(level = NULL)  # National level national <- purrr::map2_dfr(   df$year,    df$hcpcs_cd, ~physician_by_geography(sublevel = \"National\",                                         year = .x,                                         hcpcs_code = .y))  national <- national |>    dplyr::select(year,                   sublevel,                  hcpcs,                  hcpcs_desc,                  place_of_srvc,                  avg_charge,                  avg_allowed,                  avg_payment) |>    dplyr::right_join(df,                      by = dplyr::join_by(                       year == year,                        hcpcs == hcpcs_cd,                        place_of_srvc == place_of_srvc))  bind <- dplyr::bind_rows(individual, state, national)  gt2 <- bind |>    dplyr::arrange(year, hcpcs) |>    dplyr::select(!place_of_srvc) |>    gt::gt(groupname_col = \"year\", rowname_col = \"sublevel\") |>    gtExtras::gt_merge_stack(col1 = hcpcs,                             col2 = hcpcs_desc,                            small_cap = FALSE,                            font_size = c(\"16px\", \"14px\"),                            font_weight = c(\"bold\", \"normal\"),                            palette = c(\"black\", \"darkgray\")) |>    gtExtras::gt_theme_538() |>    gt::fmt_currency(     columns = c(     avg_charge,      avg_allowed,     avg_payment),      currency = \"USD\",      suffixing = TRUE,      sep_mark = \",\",      incl_space = TRUE) |>    gt::cols_width(hcpcs ~ gt::px(200)) |>    gt::cols_label(     #sublevel = \"Level\",                  hcpcs = \"HCPCS Code\",                  #place_of_srvc = \"POS\",                  avg_charge = \"Avg. Charge\",                  avg_allowed = \"Avg. Allowed\",                  avg_payment = \"Avg. Payment\") |>    gt::tab_options(table.width = gt::pct(100),                   data_row.padding = gt::px(7)) |>    gtExtras::gt_color_rows(columns = dplyr::contains(c(\"avg\"))) |>    gt::tab_style(style = gt::cell_text(     font = c(gt::google_font(name = \"Fira Code\"), gt::default_fonts())),     locations = gt::cells_body(columns = dplyr::contains(c(\"avg\")))) |>    gtExtras::gt_add_divider(     columns = c(\"year\",                  \"hcpcs\"),      style = \"solid\",     color = \"black\",     weight = gt::px(3),     include_labels = FALSE) |>   gt::tab_header(     title = gt::md(\"Medicare Provider Summary: **2013 - 2021**\"),     subtitle = gt::md(\"Provider: Ardalan Enkeshafi, MD (NPI: 1003000126)\")) |>    gt::tab_source_note(source_note = \"Source: data.cms.gov\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/physician-by-service.html","id":"data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Data Dictionary","title":"Physician by Service","text":"npi last_name first_name middle_name credential gender entype street rndrng_prvdr_st2 city state fips zipcode ruca rndrng_prvdr_ruca_desc country specialty par hcpcs_cd hcpcs_desc hcpcs_drug place_of_srvc tot_benes tot_srvcs tot_day avg_charges avg_allowed avg_payment avg_std_pymt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"general-information","dir":"Articles","previous_headings":"","what":"General Information","title":"Overview of Provider","text":"","code":"info <- nppes_npi(npi = 1043477615) info_1 <- info |>    dplyr::slice_head() |>    dplyr::select(npi:entype,                  enumeration_duration,                  first_name:phone_number)  info_2 <- info_1 |>    provider:::gt_prov(source = \"Source: NPPES NPI Public Registry.\",                       checkmark = c(\"sole_proprietor\")) |>    gt::tab_header(title = paste0(\"General Information for: \",                                  info_1$first_name, \" \",                                  info_1$middle_name, \". \",                                  info_1$last_name, \", \",                                  info_1$credential),                  subtitle = paste0(\"Practice Location at: \",                                    info_1$street, \" \",                                    info_1$city, \", \",                                    info_1$state, \" \",                                    info_1$zipcode)) |>    gt::cols_hide(columns = c(first_name,                              middle_name,                              last_name,                              credential,                             street,                             city,                             state,                             zipcode,                             purpose,                             country)) info_3 <- info |>    dplyr::slice_head(n = 3) |>    dplyr::select(tx_code:tx_desc, tx_state:tx_primary) |>    provider:::gt_prov(source = \"Source: NPPES NPI Public Registry.\",                       checkmark = c(\"tx_primary\")) |>    gt::tab_header(title = paste0(\"Taxonomy Information: \",                                  info_1$first_name, \" \",                                  info_1$middle_name, \". \",                                  info_1$last_name, \", \",                                  info_1$credential),                  subtitle = paste0(\"Practice Location at: \",                                    info_1$street, \" \",                                    info_1$city, \", \",                                    info_1$state, \" \",                                    info_1$zipcode)) |>    gt::cols_label(tx_code = \"Taxonomy\",                  tx_desc = \"Description\",                  tx_state = \"State\",                  tx_license = \"License\",                  tx_primary = \"Primary\") order_refer(npi = 1043477615) |>    provider:::gt_prov(divider = c(\"last_name\"),                       checkmark = c(\"partb\", \"dme\", \"hha\", \"pmd\"),                      title = \"Medicare Order & Referring Eligibility\",                      source = \"Source: data.cms.gov\") doctors_and_clinicians(npi = 1043477615) #> # A tibble: 1 × 25 #>   npi        pac_id     enroll_id first_name middle_name last_name suffix gender #>   <chr>      <chr>      <chr>     <chr>      <chr>       <chr>     <chr>  <chr>  #> 1 1043477615 9739318551 I2014090… SARAH      K           HUSSAIN   NA     F      #> # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #> #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #> #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #> #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone <chr>, #> #   ind_assn <chr>, group_assn <chr> facility_affiliations(npi = 1043477615) #> # A tibble: 3 × 9 #>   npi        pac_id     first_name middle_name last_name suffix facility_type #>   <chr>      <chr>      <chr>      <chr>       <chr>     <chr>  <chr>         #> 1 1043477615 9739318551 SARAH      K           HUSSAIN   NA     Hospital      #> 2 1043477615 9739318551 SARAH      K           HUSSAIN   NA     Hospital      #> 3 1043477615 9739318551 SARAH      K           HUSSAIN   NA     Hospital      #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(npi = 1043477615) |>    dplyr::pull(facility_ccn) |>    purrr::map(\\(x) hospital_enrollment(facility_ccn = x)) |>    purrr::list_rbind() #> # A tibble: 2 × 36 #>   npi        enroll_id   enroll_state specialty_code specialty_desc facility_ccn #>   <chr>      <chr>       <chr>        <chr>          <chr>          <chr>        #> 1 1902804552 O200712100… PA           00-09          PART A PROVID… 390151       #> 2 1407813603 O200712040… PA           00-09          PART A PROVID… 390067       #> # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #> #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #> #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #> #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #> #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #> #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, #> #   sg_childrens <lgl>, sg_long_term <lgl>, sg_short_term <lgl>, … revalidation_date(npi = 1043477615) #> # A tibble: 1 × 13 #>   npi        enroll_id    first_name last_name org_name enroll_state enroll_type #>   <chr>      <chr>        <chr>      <chr>     <chr>    <chr>        <chr>       #> 1 1043477615 I2014090500… Sarah      Hussain   NA       PA           3           #> # ℹ 6 more variables: enroll_desc <chr>, enroll_specialty <chr>, #> #   revalidation_due_date <date>, adjusted_due_date <date>, #> #   indiv_total_reassigned <chr>, rec_bene_reassign <int> revalidation_reassign(npi = 1043477615) #> # A tibble: 1 × 16 #>   npi        pac_id  enroll_id first_name last_name state specialty due_date_ind #>   <chr>      <chr>   <chr>     <chr>      <chr>     <chr> <chr>     <date>       #> 1 1043477615 973931… I2014090… Sarah      Hussain   PA    Cardiac … 2019-08-31   #> # ℹ 8 more variables: ind_tot_emp_assn <int>, pac_id_group <chr>, #> #   enroll_id_group <chr>, business_name <chr>, state_group <chr>, #> #   due_date_group <date>, group_reassign_and_phys_assist <int>, #> #   record_type <chr> revalidation_group(npi = 1043477615) #> # A tibble: 1 × 15 #>   npi        enroll_id       first_name last_name state specialty   due_date_ind #>   <chr>      <chr>           <chr>      <chr>     <chr> <chr>       <date>       #> 1 1043477615 I20140905002053 Sarah      Hussain   PA    Cardiac El… 2019-08-31   #> # ℹ 8 more variables: ind_tot_emp_assn <int>, pac_id_group <chr>, #> #   enroll_id_group <chr>, business_name <chr>, state_group <chr>, #> #   due_date_group <date>, group_reassign_and_phys_assist <int>, #> #   record_type <chr> provider_enrollment(npi = 1043477615) #> # A tibble: 1 × 11 #>   npi   pac_id enroll_id specialty_code specialty_desc state org_name first_name #>   <chr> <chr>  <chr>     <chr>          <chr>          <chr> <chr>    <chr>      #> 1 1043… 97393… I2014090… 14-21          PRACTITIONER … PA    NA       SARAH      #> # ℹ 3 more variables: middle_name <chr>, last_name <chr>, gender <chr> taxonomy_crosswalk(taxonomy_code = \"207RC0000X\") #> # A tibble: 2 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 207RC0000X    Allopathic & Osteopathic Physicia… 6              Physician/Car… #> 2 207RC0000X    Allopathic & Osteopathic Physicia… 11             Physician/Int… missing_information(npi = 1043477615) #> # A tibble: 1 × 3 #>   npi        last_name first_name #>   <chr>      <chr>     <chr>      #> 1 1043477615 Hussain   Sarah opt_out(npi = 1043477615) order_refer(npi = 1043477615) #> # A tibble: 1 × 7 #>   npi        first_name last_name partb hha   dme   pmd   #>   <chr>      <chr>      <chr>     <lgl> <lgl> <lgl> <lgl> #> 1 1043477615 SARAH      HUSSAIN   TRUE  TRUE  TRUE  TRUE 2014:2021 |>    purrr::map(\\(x) physician_by_service(year = x, npi = 1043477615)) |>    purrr::list_rbind() #> # A tibble: 130 × 28 #>     year npi        entype first_name middle_name last_name credential gender #>    <int> <chr>      <chr>  <chr>      <chr>       <chr>     <chr>      <chr>  #>  1  2014 1043477615 Ind    Sarah      NA          Hussain   MD         F      #>  2  2014 1043477615 Ind    Sarah      NA          Hussain   MD         F      #>  3  2014 1043477615 Ind    Sarah      NA          Hussain   MD         F      #>  4  2014 1043477615 Ind    Sarah      NA          Hussain   MD         F      #>  5  2014 1043477615 Ind    Sarah      NA          Hussain   MD         F      #>  6  2015 1043477615 Ind    Sarah      NA          Hussain   MD         F      #>  7  2015 1043477615 Ind    Sarah      NA          Hussain   MD         F      #>  8  2015 1043477615 Ind    Sarah      NA          Hussain   MD         F      #>  9  2015 1043477615 Ind    Sarah      NA          Hussain   MD         F      #> 10  2015 1043477615 Ind    Sarah      NA          Hussain   MD         F      #> # ℹ 120 more rows #> # ℹ 20 more variables: specialty <chr>, street <chr>, city <chr>, state <chr>, #> #   fips <chr>, zipcode <chr>, ruca <chr>, country <chr>, par <lgl>, #> #   hcpcs_cd <chr>, hcpcs_desc <chr>, hcpcs_drug <chr>, place_of_srvc <chr>, #> #   tot_benes <int>, tot_srvcs <int>, tot_day <int>, avg_charge <dbl>, #> #   avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> 2014:2021 |>    purrr::map(\\(x) physician_by_provider(year = x, npi = 1043477615)) |>    purrr::list_rbind() #> # A tibble: 8 × 70 #>    year npi     first_name middle_name last_name credential gender entype street #>   <int> <chr>   <chr>      <chr>       <chr>     <chr>      <chr>  <chr>  <chr>  #> 1  2014 104347… Sarah      NA          Hussain   MD         F      Ind    500 U… #> 2  2015 104347… Sarah      NA          Hussain   MD         F      Ind    500 U… #> 3  2016 104347… Sarah      NA          Hussain   MD         F      Ind    500 U… #> 4  2017 104347… Sarah      K           Hussain   MD         F      Ind    500 U… #> 5  2018 104347… Sarah      K           Hussain   MD         F      Ind    500 U… #> 6  2019 104347… Sarah      K           Hussain   MD         F      Ind    500 U… #> 7  2020 104347… Sarah      K           Hussain   MD         F      Ind    500 U… #> 8  2021 104347… Sarah      K           Hussain   MD         F      Ind    500 U… #> # ℹ 61 more variables: city <chr>, state <chr>, fips <chr>, zipcode <chr>, #> #   ruca <chr>, country <chr>, specialty <chr>, par <lgl>, tot_hcpcs <int>, #> #   tot_benes <int>, tot_srvcs <int>, tot_charges <dbl>, tot_allowed <dbl>, #> #   tot_payment <dbl>, tot_std_pymt <dbl>, drug_hcpcs <int>, drug_benes <int>, #> #   drug_srvcs <int>, drug_charges <dbl>, drug_allowed <dbl>, #> #   drug_payment <dbl>, drug_std_pymt <dbl>, med_hcpcs <int>, med_benes <int>, #> #   med_srvcs <int>, med_charges <dbl>, med_allowed <dbl>, med_payment <dbl>, …"},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2023). provider: Access Public Healthcare Provider Data. https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider.","code":"@Manual{,   title = {provider: Access Public Healthcare Provider Data},   author = {Andrew Bruce},   year = {2023},   note = {https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider}, }"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"provider-","dir":"","previous_headings":"","what":"Access Public Healthcare Provider Data","title":"Access Public Healthcare Provider Data","text":"Providing easy access healthcare provider-centric data publicly available APIs & sources.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access Public Healthcare Provider Data","text":"can install development version provider GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"andrewallenbruce/provider\") # install.packages(\"remotes\") remotes::install_github(\"andrewallenbruce/provider\")"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Access Public Healthcare Provider Data","text":"goal provider make experience accessing publicly-available Medicare provider data easier consistent across variety CMS sources.","code":"library(provider)"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"beneficiary-enrollment","dir":"","previous_headings":"Motivation","what":"Beneficiary Enrollment","title":"Access Public Healthcare Provider Data","text":"","code":"beneficiary_enrollment(year = 2021,                         period = \"Year\",                         level = \"State\",                         fips = \"01\") # A tibble: 1 × 26    year period level state state_name county fips  bene_total bene_orig   <int> <chr>  <chr> <chr> <chr>      <chr>  <chr>      <int>     <int> 1  2021 Year   State AL    Alabama    Total  01       1070474    528983 # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(period = \"Year\",                         level = \"County\",                         state = \"AL\",                         county = \"Autauga\") # A tibble: 10 × 26     year period level  state state_name county  fips  bene_total bene_orig    <int> <chr>  <chr>  <chr> <chr>      <chr>   <chr>      <int>     <int>  1  2013 Year   County AL    Alabama    Autauga 01001       9323      6484  2  2014 Year   County AL    Alabama    Autauga 01001       9589      6565  3  2015 Year   County AL    Alabama    Autauga 01001       9938      6711  4  2016 Year   County AL    Alabama    Autauga 01001      10214      6799  5  2017 Year   County AL    Alabama    Autauga 01001      10510      5784  6  2018 Year   County AL    Alabama    Autauga 01001      10645      5700  7  2019 Year   County AL    Alabama    Autauga 01001      11059      5761  8  2020 Year   County AL    Alabama    Autauga 01001      11251      5596  9  2021 Year   County AL    Alabama    Autauga 01001      11396      5338 10  2022 Year   County AL    Alabama    Autauga 01001      11578      5186 # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(year = 2017,                         level = \"County\",                         state = \"GA\",                         county = \"Lowndes\") # A tibble: 13 × 26     year period    level  state state_name county  fips  bene_total bene_orig    <int> <chr>     <chr>  <chr> <chr>      <chr>   <chr>      <int>     <int>  1  2017 Year      County GA    Georgia    Lowndes 13185      17172     13007  2  2017 January   County GA    Georgia    Lowndes 13185      17035     12940  3  2017 February  County GA    Georgia    Lowndes 13185      17064     12952  4  2017 March     County GA    Georgia    Lowndes 13185      17083     12961  5  2017 April     County GA    Georgia    Lowndes 13185      17096     12963  6  2017 May       County GA    Georgia    Lowndes 13185      17112     12968  7  2017 June      County GA    Georgia    Lowndes 13185      17141     12978  8  2017 July      County GA    Georgia    Lowndes 13185      17161     12990  9  2017 August    County GA    Georgia    Lowndes 13185      17218     13039 10  2017 September County GA    Georgia    Lowndes 13185      17272     13085 11  2017 October   County GA    Georgia    Lowndes 13185      17258     13057 12  2017 November  County GA    Georgia    Lowndes 13185      17293     13069 13  2017 December  County GA    Georgia    Lowndes 13185      17333     13077 # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"chronic-conditions","dir":"","previous_headings":"Motivation","what":"Chronic Conditions","title":"Access Public Healthcare Provider Data","text":"","code":"# Multiple Chronic Conditions cc_multiple(year = 2018,              level = \"National\",              age_group = \"All\",              demographic = \"All\") # A tibble: 4 × 13    year level    sublevel fips  age_group demographic subdemo mcc     prevalence   <int> <chr>    <chr>    <chr> <chr>     <chr>       <chr>   <ord>        <dbl> 1  2018 National National <NA>  All       All         All     [0,1]        0.311 2  2018 National National <NA>  All       All         All     [2,3]        0.291 3  2018 National National <NA>  All       All         All     [4,5]        0.221 4  2018 National National <NA>  All       All         All     [6, In…      0.177 # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl> cc_multiple(year = 2018,              level = \"State\",              sublevel = \"Alabama\",              age_group = \"All\",              demographic = \"All\") # A tibble: 4 × 13    year level sublevel fips  age_group demographic subdemo mcc      prevalence   <int> <chr> <chr>    <chr> <chr>     <chr>       <chr>   <ord>         <dbl> 1  2018 State Alabama  01    All       All         All     [0,1]         0.258 2  2018 State Alabama  01    All       All         All     [2,3]         0.285 3  2018 State Alabama  01    All       All         All     [4,5]         0.250 4  2018 State Alabama  01    All       All         All     [6, Inf)      0.207 # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl> cc_multiple(year = 2018,              level = \"County\",              sublevel = \"Alabama : Autauga\",              fips = \"01001\",              age_group = \"All\",              demographic = \"All\") # A tibble: 4 × 13    year level  sublevel     fips  age_group demographic subdemo mcc   prevalence   <int> <chr>  <chr>        <chr> <chr>     <chr>       <chr>   <ord>      <dbl> 1  2018 County Alabama : A… 01001 All       All         All     [0,1]      0.266 2  2018 County Alabama : A… 01001 All       All         All     [2,3]      0.281 3  2018 County Alabama : A… 01001 All       All         All     [4,5]      0.248 4  2018 County Alabama : A… 01001 All       All         All     [6, …      0.205 # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl> # Specific Chronic Conditions cc_specific(year = 2018,              level = \"State\",              sublevel = \"California\",              demographic = \"All\") # A tibble: 63 × 13     year level sublevel fips  age_group demographic subdemo condition prevalence    <int> <chr> <chr>    <chr> <chr>     <chr>       <chr>   <chr>          <dbl>  1  2018 State Califor… 06    All       All         All     Alcohol …     0.0215  2  2018 State Califor… 06    All       All         All     Alzheime…     0.105   3  2018 State Califor… 06    All       All         All     Arthritis     0.312   4  2018 State Califor… 06    All       All         All     Asthma        0.053   5  2018 State Califor… 06    All       All         All     Atrial F…     0.0749  6  2018 State Califor… 06    All       All         All     Autism S…     0.0022  7  2018 State Califor… 06    All       All         All     COPD          0.0952  8  2018 State Califor… 06    All       All         All     Cancer        0.0784  9  2018 State Califor… 06    All       All         All     Chronic …     0.243  10  2018 State Califor… 06    All       All         All     Depressi…     0.162  # ℹ 53 more rows # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl> cc_specific(year = 2011,              level = \"County\",              fips = \"01001\") # A tibble: 63 × 13     year level sublevel fips  age_group demographic subdemo condition prevalence    <int> <chr> <chr>    <chr> <chr>     <chr>       <chr>   <chr>          <dbl>  1  2011 Coun… Alabama… 01001 All       All         All     Alcohol …     0.0116  2  2011 Coun… Alabama… 01001 All       All         All     Alzheime…     0.100   3  2011 Coun… Alabama… 01001 All       All         All     Arthritis     0.274   4  2011 Coun… Alabama… 01001 All       All         All     Asthma        0.037   5  2011 Coun… Alabama… 01001 All       All         All     Atrial F…     0.0748  6  2011 Coun… Alabama… 01001 All       All         All     Autism S…    NA       7  2011 Coun… Alabama… 01001 All       All         All     COPD          0.122   8  2011 Coun… Alabama… 01001 All       All         All     Cancer        0.0792  9  2011 Coun… Alabama… 01001 All       All         All     Chronic …     0.137  10  2011 Coun… Alabama… 01001 All       All         All     Depressi…     0.134  # ℹ 53 more rows # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"doctors-and-clinicians","dir":"","previous_headings":"Motivation","what":"Doctors and Clinicians","title":"Access Public Healthcare Provider Data","text":"","code":"doctors_and_clinicians(npi = 1720081441) ✖ No results for npi: 1720081441 doctors_and_clinicians(npi = 1407263999) # A tibble: 2 × 25   npi        pac_id     enroll_id first_name middle_name last_name suffix gender   <chr>      <chr>      <chr>     <chr>      <chr>       <chr>     <chr>  <chr>  1 1407263999 8729208152 I2014100… ROBIN      A           AVERY     <NA>   F      2 1407263999 8729208152 I2014100… ROBIN      A           AVERY     <NA>   F      # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone <chr>, #   ind_assn <chr>, group_assn <chr> doctors_and_clinicians(school = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\",                         grad_year = 2000,                         state = \"FL\") # A tibble: 68 × 25    npi        pac_id    enroll_id first_name middle_name last_name suffix gender    <chr>      <chr>     <chr>     <chr>      <chr>       <chr>     <chr>  <chr>   1 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F       2 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F       3 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F       4 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F       5 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F       6 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F       7 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F       8 1073549895 24664809… I2007112… ALAN       B           BENNIE    <NA>   M       9 1073549895 24664809… I2007112… ALAN       B           BENNIE    <NA>   M      10 1073575403 86280744… I2006101… DANIEL     J           GASSERT   <NA>   M      # ℹ 58 more rows # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone <chr>, #   ind_assn <chr>, group_assn <chr> #doctors_and_clinicians(state = \"GA\", city = \"VALDOSTA\")"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"facility-affiliations","dir":"","previous_headings":"Motivation","what":"Facility Affiliations","title":"Access Public Healthcare Provider Data","text":"","code":"facility_affiliations(npi = 1003019563) # A tibble: 4 × 9   npi        pac_id     first_name middle_name last_name suffix facility_type   <chr>      <chr>      <chr>      <chr>       <chr>     <chr>  <chr>         1 1003019563 4688707060 JOHN       JOSEPH      FRANK     <NA>   Hospital      2 1003019563 4688707060 JOHN       JOSEPH      FRANK     <NA>   Hospital      3 1003019563 4688707060 JOHN       JOSEPH      FRANK     <NA>   Hospital      4 1003019563 4688707060 JOHN       JOSEPH      FRANK     <NA>   Hospital      # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(facility_ccn = \"060004\") # A tibble: 188 × 9    npi        pac_id     first_name middle_name last_name   suffix facility_type    <chr>      <chr>      <chr>      <chr>       <chr>       <chr>  <chr>          1 1003002890 6002953973 DANIEL     RICHARD     HAMMAN      <NA>   Hospital       2 1003019563 4688707060 JOHN       JOSEPH      FRANK       <NA>   Hospital       3 1003045022 5890926059 ARTHUR     H           DONAHUE     <NA>   Hospital       4 1003105636 6507182847 JAMES      CHARLES     HIGHAM KES… <NA>   Hospital       5 1003234162 4284940248 MATTHEW    <NA>        MCDIARMID   <NA>   Hospital       6 1003845249 1254326994 GARETH     R           WEINER      <NA>   Hospital       7 1013069566 7810096328 AMITY      D           HELZER      <NA>   Hospital       8 1013115989 4385891712 ASHLEY     L           PYLE        <NA>   Hospital       9 1013979566 1557374014 FIRAS      <NA>        MUWALLA     <NA>   Hospital      10 1023261963 2860687431 CHAD       MICHAEL     LUCCI       <NA>   Hospital      # ℹ 178 more rows # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(parent_ccn = 670055) # A tibble: 9 × 9   npi        pac_id     first_name middle_name last_name  suffix facility_type     <chr>      <chr>      <chr>      <chr>       <chr>      <chr>  <chr>           1 1083742829 5698833655 RAFAEL     JORGE       FORNARIS   <NA>   Inpatient reha… 2 1144429580 3577659580 LYSA       LEE         CURRY      <NA>   Inpatient reha… 3 1558595660 8921241142 JOHN       D           ALFONSO    <NA>   Inpatient reha… 4 1609973650 0840373239 GEORGE     KIMBELL     WILCOX     <NA>   Inpatient reha… 5 1710112370 9739337122 VIDYA      <NA>        VADDEMPUDI <NA>   Inpatient reha… 6 1720069859 7012947229 WILLIAM    WARREN      JANES      <NA>   Inpatient reha… 7 1740577212 0345473773 GEOFF      R           WEIKLE     <NA>   Inpatient reha… 8 1770861742 5193940997 AUSTON     J           MYERS      <NA>   Inpatient reha… 9 1912260464 5092036509 SAAD       MD          MANSOOR    <NA>   Inpatient reha… # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(first_name = \"John\",                        last_name = \"Hill\",                        facility_type = \"Home Health Agency\") # A tibble: 7 × 9   npi        pac_id     first_name middle_name last_name suffix facility_type      <chr>      <chr>      <chr>      <chr>       <chr>     <chr>  <chr>            1 1174587588 7214998079 JOHN       C           HILL      III    Home health age… 2 1174587588 7214998079 JOHN       C           HILL      III    Home health age… 3 1174587588 7214998079 JOHN       C           HILL      III    Home health age… 4 1558380444 4789619362 JOHN       M           HILL      <NA>   Home health age… 5 1558380444 4789619362 JOHN       M           HILL      <NA>   Home health age… 6 1558380444 4789619362 JOHN       M           HILL      <NA>   Home health age… 7 1558380444 4789619362 JOHN       M           HILL      <NA>   Home health age… # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"hospital-enrollments","dir":"","previous_headings":"Motivation","what":"Hospital Enrollments","title":"Access Public Healthcare Provider Data","text":"","code":"hospital_enrollment(facility_ccn = \"060004\") # A tibble: 1 × 36   npi        enroll_id   enroll_state specialty_code specialty_desc facility_ccn   <chr>      <chr>       <chr>        <chr>          <chr>          <chr>        1 1629071758 O200706190… CO           00-09          PART A PROVID… 060004       # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, #   sg_childrens <lgl>, sg_long_term <lgl>, sg_short_term <lgl>, … hospital_enrollment(state = \"GA\", city = \"VALDOSTA\") # A tibble: 3 × 36   npi        enroll_id   enroll_state specialty_code specialty_desc facility_ccn   <chr>      <chr>       <chr>        <chr>          <chr>          <chr>        1 1306896253 O200803120… GA           00-09          PART A PROVID… 110122       2 1467404046 O200803130… GA           00-09          PART A PROVID… 11T122       3 1538417753 O201212130… GA           00-09          PART A PROVID… 114036       # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, #   sg_childrens <lgl>, sg_long_term <lgl>, sg_short_term <lgl>, … hospital_enrollment(enroll_state = \"GA\") # A tibble: 216 × 36    npi        enroll_id  enroll_state specialty_code specialty_desc facility_ccn    <chr>      <chr>      <chr>        <chr>          <chr>          <chr>         1 1588664007 O20020826… GA           00-09          PART A PROVID… 112011        2 1376574277 O20021108… GA           00-09          PART A PROVID… 110005        3 1912951963 O20030515… GA           00-09          PART A PROVID… 110177        4 1063406684 O20030925… GA           00-09          PART A PROVID… 110043        5 1447252044 O20040406… GA           00-09          PART A PROVID… 112016        6 1679543672 O20040513… GA           00-09          PART A PROVID… 114008        7 1508810565 O20040823… GA           00-09          PART A PROVID… 110168        8 1922178789 O20041013… GA           00-09          PART A PROVID… 113301        9 1194722389 O20041103… GA           00-09          PART A PROVID… 112013       10 1811940976 O20041109… GA           00-09          PART A PROVID… 110201       # ℹ 206 more rows # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, … hospital_enrollment(enroll_id = \"O20030404000017\") ✖ No results for enroll_id: O20030404000017"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"missing-contact-information","dir":"","previous_headings":"Motivation","what":"Missing Contact Information","title":"Access Public Healthcare Provider Data","text":"","code":"missing_information(npi = 1144224569) # A tibble: 1 × 3   npi        last_name first_name   <chr>      <chr>     <chr>      1 1144224569 Clouse    John missing_information(npi = 11111122222) Error in `npi_check()`: ! NPI may be incorrect or invalid ℹ NPIs are 10 characters long. ✖ NPI: 11111122222 is 11 characters long."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"npi-registry","dir":"","previous_headings":"Motivation","what":"NPI Registry","title":"Access Public Healthcare Provider Data","text":"","code":"nppes_npi(npi = 13164059391) Error in `npi_check()`: ! NPI may be incorrect or invalid ℹ NPIs are 10 characters long. ✖ NPI: 13164059391 is 11 characters long. nppes_npi(npi = \"155836427a\") Error in `npi_check()`: ! NPI may be incorrect or invalid ℹ NPIs must be numeric. ✖ NPI: \"155836427a\" has non-numeric characters. nppes_npi(1720081442) Error in `npi_check()`: ! NPI may be incorrect or invalid ℹ NPIs must pass Luhn algorithm. ✖ NPI 1720081442 fails Luhn check. nppes_npi(1710983663) ✖ No results for npi: 1710983663 nppes_npi(city = \"Valdosta\", org_name = \"AIRPORT CLINIC INC\") # A tibble: 2 × 28   npi      entype enumeration_date enumeration_duration      last_updated status   <chr>    <chr>  <date>           <Duration>                <date>       <chr>  1 1730354… Org    2008-04-30       474768000s (~15.04 years) 2013-11-21   A      2 1730354… Org    2008-04-30       474768000s (~15.04 years) 2013-11-21   A      # ℹ 22 more variables: organization_name <chr>, organizational_subpart <lgl>, #   purpose <chr>, street <chr>, city <chr>, state <chr>, zipcode <chr>, #   country <chr>, phone_number <chr>, authorized_official_first_name <chr>, #   authorized_official_last_name <chr>, #   authorized_official_title_or_position <chr>, #   authorized_official_telephone_number <chr>, tx_code <chr>, tx_desc <chr>, #   tx_group <chr>, tx_state <lgl>, tx_license <lgl>, tx_primary <lgl>, … provider_enrollment(specialty_code = \"00-17\", state = \"GA\") |>    dplyr::pull(npi) |>    purrr::map(nppes_npi) |>    purrr::list_rbind() # A tibble: 424 × 36    npi        entype enumeration_date enumeration_duration     last_updated    <chr>      <chr>  <date>           <Duration>               <date>        1 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28    2 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28    3 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28    4 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28    5 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28    6 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28    7 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28    8 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28    9 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28   10 1992710610 Org    2006-07-30       530064000s (~16.8 years) 2021-04-28   # ℹ 414 more rows # ℹ 31 more variables: certification_date <date>, status <chr>, #   organization_name <chr>, organizational_subpart <lgl>, purpose <chr>, #   street <chr>, city <chr>, state <chr>, zipcode <chr>, country <chr>, #   phone_number <chr>, fax_number <chr>, authorized_official_first_name <chr>, #   authorized_official_last_name <chr>, #   authorized_official_title_or_position <chr>, … c(13164059391, 1558364273) |>    purrr::map(nppes_npi) |>    purrr::list_rbind() Error in `purrr::map()`: ℹ In index: 1. Caused by error in `npi_check()`: ! NPI may be incorrect or invalid ℹ NPIs are 10 characters long. ✖ NPI: 13164059391 is 11 characters long."},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"open-payments","dir":"","previous_headings":"Motivation","what":"Open Payments","title":"Access Public Healthcare Provider Data","text":"","code":"open_payments(npi = 1043218118, year = 2021) |>    dplyr::filter(!is.na(covered)) |>    janitor::remove_empty(which = c(\"rows\", \"cols\")) # A tibble: 105 × 42    year  npi      profile_id changed cov_type first_name last_name address city     <chr> <chr>    <chr>      <lgl>   <chr>    <chr>      <chr>     <chr>   <chr>  1 2021  1043218… 92058      FALSE   Physici… Ahad       Mahootchi 6739 G… Zeph…  2 2021  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH…  3 2021  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH…  4 2021  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH…  5 2021  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH…  6 2021  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH…  7 2021  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH…  8 2021  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH…  9 2021  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… 10 2021  1043218… 92058      FALSE   Physici… AHAD       MAHOOTCHI 6739 G… ZEPH… # ℹ 95 more rows # ℹ 33 more variables: state <chr>, zipcode <chr>, country <chr>, #   primary_type <chr>, primary_other <chr>, specialty <chr>, #   specialty_other <chr>, license_state <chr>, license_state_other <chr>, #   payer_id <chr>, payer_sub <chr>, payer_name <chr>, payer_state <chr>, #   payer_country <chr>, pay_total <dbl>, pay_date <date>, pay_count <chr>, #   pay_form <chr>, pay_nature <chr>, phys_ownship <lgl>, third_pay <chr>, …"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"opt-out-affidavits","dir":"","previous_headings":"Motivation","what":"Opt-Out Affidavits","title":"Access Public Healthcare Provider Data","text":"","code":"opt_out(first_name = \"David\", last_name = \"Smith\") # A tibble: 6 × 13   npi        first_name last_name specialty    optout_start_date optout_end_date   <chr>      <chr>      <chr>     <chr>        <date>            <date>          1 1649265760 David      Smith     Maxillofaci… 2012-06-25        2024-06-25      2 1750565958 David      Smith     Oral Surgery 2013-05-07        2023-05-07      3 1114058443 David      Smith     Psychiatry   2014-08-15        2024-08-15      4 1023002375 David      Smith     Obstetrics/… 2012-10-01        2024-10-01      5 1790853307 David      Smith     Oral Surgery 2015-03-26        2025-03-26      6 1659300077 David      Smith     Dentist      2015-05-26        2023-05-26      # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #   zipcode <chr> opt_out(specialty = \"Psychiatry\",          city = \"Brooklyn\",          state = \"NY\",          order_and_refer = FALSE) # A tibble: 4 × 13   npi        first_name last_name specialty  optout_start_date optout_end_date   <chr>      <chr>      <chr>     <chr>      <date>            <date>          1 1538251731 Robert     Katz      Psychiatry 2021-10-01        2023-10-01      2 1114239761 Adriel     Gerard    Psychiatry 2019-12-30        2023-12-30      3 1740635804 Joseph     Mouallem  Psychiatry 2020-07-22        2024-07-22      4 1932442191 Cecilia    Lipira    Psychiatry 2020-08-14        2024-08-14      # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #   zipcode <chr> opt_out(specialty = \"Tsychiatry\") ✖ No results for specialty: Tsychiatry opt_out(city = \"Valdosta\", state = \"GA\") # A tibble: 3 × 13   npi        first_name last_name specialty    optout_start_date optout_end_date   <chr>      <chr>      <chr>     <chr>        <date>            <date>          1 1992848659 Jeffery    Wood      Maxillofaci… 2016-01-11        2024-01-11      2 1073632659 Fernando   Alvarado  Oral Surgery 2017-07-01        2023-07-01      3 1811005655 Sonya      Merriman  Plastic And… 2022-01-01        2024-01-01      # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #   zipcode <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"order-and-referring-privileges","dir":"","previous_headings":"Motivation","what":"Order and Referring Privileges","title":"Access Public Healthcare Provider Data","text":"","code":"order_refer(npi = 1083879860) # A tibble: 1 × 7   npi        first_name  last_name partb hha   dme   pmd     <chr>      <chr>       <chr>     <lgl> <lgl> <lgl> <lgl> 1 1083879860 CHRISTOPHER AARON     TRUE  TRUE  TRUE  TRUE order_refer(last_name = \"Smith\",              partb = FALSE,              pmd = FALSE) # A tibble: 150 × 7    npi        first_name last_name partb hha   dme   pmd      <chr>      <chr>      <chr>     <lgl> <lgl> <lgl> <lgl>  1 1063535672 AARON      SMITH     FALSE FALSE TRUE  FALSE  2 1891210431 ALAINA     SMITH     FALSE FALSE TRUE  FALSE  3 1962830570 ALESHA     SMITH     FALSE FALSE TRUE  FALSE  4 1922655521 ALLISON    SMITH     FALSE FALSE TRUE  FALSE  5 1942778188 ALYSSA     SMITH     FALSE FALSE TRUE  FALSE  6 1467902791 AMANDA     SMITH     FALSE FALSE TRUE  FALSE  7 1992203582 AMANDA     SMITH     FALSE FALSE TRUE  FALSE  8 1023475761 AMY        SMITH     FALSE FALSE TRUE  FALSE  9 1609219773 AMY        SMITH     FALSE FALSE TRUE  FALSE 10 1659973295 ANDREW     SMITH     FALSE FALSE TRUE  FALSE # ℹ 140 more rows"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"pending-applications","dir":"","previous_headings":"Motivation","what":"Pending Applications","title":"Access Public Healthcare Provider Data","text":"","code":"pending_applications(last_name = \"Smith\", type = \"non-physician\") # A tibble: 16 × 4    npi        last_name first_name type             <chr>      <chr>     <chr>      <chr>          1 1700588621 SMITH     AMANDA     NON-PHYSICIAN  2 1073234282 SMITH     ANGELA     NON-PHYSICIAN  3 1790408185 SMITH     ARIELLE    NON-PHYSICIAN  4 1548969413 SMITH     ASHLEY     NON-PHYSICIAN  5 1659967966 SMITH     ASHLEY     NON-PHYSICIAN  6 1952009805 SMITH     BALEY      NON-PHYSICIAN  7 1801992912 SMITH     BRIDGET    NON-PHYSICIAN  8 1902527641 SMITH     HEATHER    NON-PHYSICIAN  9 1356079727 SMITH     JARED      NON-PHYSICIAN 10 1891169751 SMITH     JEANA      NON-PHYSICIAN 11 1033538152 SMITH     JOANNA     NON-PHYSICIAN 12 1851916803 SMITH     KENZIE     NON-PHYSICIAN 13 1467159426 SMITH     PATRICE    NON-PHYSICIAN 14 1730741174 SMITH     TIMOTHY    NON-PHYSICIAN 15 1649967704 SMITH     TYPHANI    NON-PHYSICIAN 16 1063126522 SMITH     ZACHARY    NON-PHYSICIAN pending_applications(first_name = \"John\", type = \"physician\") # A tibble: 36 × 4    npi        last_name  first_name type         <chr>      <chr>      <chr>      <chr>      1 1881791739 ADAMS      JOHN       PHYSICIAN  2 1841280963 BIGBEE     JOHN       PHYSICIAN  3 1619996378 BODDEN     JOHN       PHYSICIAN  4 1801545900 BRAZIL     JOHN       PHYSICIAN  5 1588744569 BRUNO      JOHN       PHYSICIAN  6 1861142556 BURKE      JOHN       PHYSICIAN  7 1942863451 CASNOVSKY  JOHN       PHYSICIAN  8 1306817531 COMBS      JOHN       PHYSICIAN  9 1730349580 ECHEVARRIA JOHN       PHYSICIAN 10 1376571554 FLYNN      JOHN       PHYSICIAN # ℹ 26 more rows pending_applications(first_name = \"John\", type = \"dentist\") Error in `pending_applications()`: ! `type` must be one of \"physician\" or \"non-physician\", not \"dentist\". pending_applications(npi = \"1083879860\",                       first_name = \"Gaelic\",                       last_name = \"Garlic\",                      type = \"physician\") ✖ No results for npi: 1083879860, last_name: Garlic, first_name: Gaelic, and type: physician"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"physician--other-practitioners","dir":"","previous_headings":"Motivation","what":"Physician & Other Practitioners","title":"Access Public Healthcare Provider Data","text":"","code":"# by Geography and Service physician_by_geography(sublevel = \"Georgia\", year = 2020) |>    dplyr::slice_max(avg_payment, n = 10) # A tibble: 10 × 16     year level sublevel fips  hcpcs hcpcs_desc          hcpcs_drug place_of_srvc    <int> <chr> <chr>    <chr> <chr> <chr>               <lgl>      <chr>          1  2020 State Georgia  13    Q2043 Sipuleucel-t, mini… TRUE       Office         2  2020 State Georgia  13    37227 Removal of plaque … FALSE      Office         3  2020 State Georgia  13    G2170 Percutaneous arter… FALSE      Facility       4  2020 State Georgia  13    37229 Removal of plaque … FALSE      Office         5  2020 State Georgia  13    37231 Removal of plaque … FALSE      Office         6  2020 State Georgia  13    37226 Insertion of stent… FALSE      Office         7  2020 State Georgia  13    37225 Removal of plaque … FALSE      Office         8  2020 State Georgia  13    37230 Insertion of stent… FALSE      Office         9  2020 State Georgia  13    63685 Insertion of spina… FALSE      Facility      10  2020 State Georgia  13    C9740 Cystourethroscopy,… FALSE      Facility      # ℹ 8 more variables: tot_provs <int>, tot_benes <int>, tot_srvcs <int>, #   tot_day <int>, avg_charge <dbl>, avg_allowed <dbl>, avg_payment <dbl>, #   avg_std_pymt <dbl> # by Provider and Service physician_by_service(year = 2020, npi = 1083879860) # A tibble: 6 × 28    year npi        entype first_name  middle_name last_name credential gender   <int> <chr>      <chr>  <chr>       <chr>       <chr>     <chr>      <chr>  1  2020 1083879860 Ind    Christopher <NA>        Aaron     <NA>       M      2  2020 1083879860 Ind    Christopher <NA>        Aaron     <NA>       M      3  2020 1083879860 Ind    Christopher <NA>        Aaron     <NA>       M      4  2020 1083879860 Ind    Christopher <NA>        Aaron     <NA>       M      5  2020 1083879860 Ind    Christopher <NA>        Aaron     <NA>       M      6  2020 1083879860 Ind    Christopher <NA>        Aaron     <NA>       M      # ℹ 20 more variables: specialty <chr>, street <chr>, city <chr>, state <chr>, #   fips <chr>, zipcode <chr>, ruca <chr>, country <chr>, par <lgl>, #   hcpcs_cd <chr>, hcpcs_desc <chr>, hcpcs_drug <chr>, place_of_srvc <chr>, #   tot_benes <int>, tot_srvcs <int>, tot_day <int>, avg_charge <dbl>, #   avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> # by Provider physician_by_provider(npi = 1083879860, year = 2020) # A tibble: 1 × 70    year npi     first_name middle_name last_name credential gender entype street   <int> <chr>   <chr>      <chr>       <chr>     <chr>      <chr>  <chr>  <chr>  1  2020 108387… Christoph… <NA>        Aaron     <NA>       M      Ind    792 G… # ℹ 61 more variables: city <chr>, state <chr>, fips <chr>, zipcode <chr>, #   ruca <chr>, country <chr>, specialty <chr>, par <lgl>, tot_hcpcs <int>, #   tot_benes <int>, tot_srvcs <int>, tot_charges <dbl>, tot_allowed <dbl>, #   tot_payment <dbl>, tot_std_pymt <dbl>, drug_hcpcs <int>, drug_benes <int>, #   drug_srvcs <int>, drug_charges <dbl>, drug_allowed <dbl>, #   drug_payment <dbl>, drug_std_pymt <dbl>, med_hcpcs <int>, med_benes <int>, #   med_srvcs <int>, med_charges <dbl>, med_allowed <dbl>, med_payment <dbl>, …"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"provider-enrollment","dir":"","previous_headings":"Motivation","what":"Provider Enrollment","title":"Access Public Healthcare Provider Data","text":"","code":"provider_enrollment(npi = 1083879860) # A tibble: 1 × 11   npi   pac_id enroll_id specialty_code specialty_desc state org_name first_name   <chr> <chr>  <chr>     <chr>          <chr>          <chr> <chr>    <chr>      1 1083… 84263… I2020061… 14-08          PRACTITIONER … PA    <NA>     CHRISTOPH… # ℹ 3 more variables: middle_name <chr>, last_name <chr>, gender <chr> provider_enrollment(specialty_code = \"00-17\", state = \"GA\") # GA RHCs # A tibble: 92 × 11    npi        pac_id     enroll_id  specialty_code specialty_desc state org_name    <chr>      <chr>      <chr>      <chr>          <chr>          <chr> <chr>     1 1992710610 8729997846 O20030404… 00-17          PART A PROVID… GA    TMC HAR…  2 1497760243 0042129074 O20030407… 00-17          PART A PROVID… GA    TMC TAL…  3 1285706879 1557271731 O20030610… 00-17          PART A PROVID… GA    HIAWASS…  4 1982631321 5991616039 O20030918… 00-17          PART A PROVID… GA    TMC WES…  5 1821017831 1850294034 O20040421… 00-17          PART A PROVID… GA    BACON C…  6 1750339511 2264415538 O20040608… 00-17          PART A PROVID… GA    BOWDON-…  7 1366472003 6002724598 O20041109… 00-17          PART A PROVID… GA    HOSPITA…  8 1891863569 2062493083 O20050222… 00-17          PART A PROVID… GA    THE MED…  9 1578682696 3779490503 O20070601… 00-17          PART A PROVID… GA    UNION C… 10 1922211515 6002724598 O20070830… 00-17          PART A PROVID… GA    HOSPITA… # ℹ 82 more rows # ℹ 4 more variables: first_name <chr>, middle_name <chr>, last_name <chr>, #   gender <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"revalidation-lists","dir":"","previous_headings":"Motivation","what":"Revalidation Lists","title":"Access Public Healthcare Provider Data","text":"","code":"# Revalidation Due Date List revalidation_date(npi = 1710912209) # A tibble: 1 × 13   npi        enroll_id    first_name last_name org_name enroll_state enroll_type   <chr>      <chr>        <chr>      <chr>     <chr>    <chr>        <chr>       1 1710912209 I2004060200… Yelena     Voronova  <NA>     NY           3           # ℹ 6 more variables: enroll_desc <chr>, enroll_specialty <chr>, #   revalidation_due_date <date>, adjusted_due_date <date>, #   indiv_total_reassigned <chr>, rec_bene_reassign <int> # Revalidation Reassignment List revalidation_reassign(npi = 1710912209) # A tibble: 5 × 16   npi        pac_id  enroll_id first_name last_name state specialty due_date_ind   <chr>      <chr>   <chr>     <chr>      <chr>     <chr> <chr>     <date>       1 1710912209 286047… I2004060… Yelena     Voronova  NY    Podiatry  2019-10-31   2 1710912209 286047… I2004060… Yelena     Voronova  NY    Podiatry  2019-10-31   3 1710912209 286047… I2004060… Yelena     Voronova  NY    Podiatry  2019-10-31   4 1710912209 286047… I2004060… Yelena     Voronova  NY    Podiatry  2019-10-31   5 1710912209 286047… I2004060… Yelena     Voronova  NY    Podiatry  2019-10-31   # ℹ 8 more variables: ind_tot_emp_assn <int>, pac_id_group <chr>, #   enroll_id_group <chr>, business_name <chr>, state_group <chr>, #   due_date_group <date>, group_reassign_and_phys_assist <int>, #   record_type <chr> # Revalidation Clinic Group Practice Reassignment revalidation_group(npi = 1710912209) # A tibble: 5 × 15   npi        enroll_id       first_name last_name state specialty due_date_ind   <chr>      <chr>           <chr>      <chr>     <chr> <chr>     <date>       1 1710912209 I20040602001711 Yelena     Voronova  NY    Podiatry  2019-10-31   2 1710912209 I20040602001711 Yelena     Voronova  NY    Podiatry  2019-10-31   3 1710912209 I20040602001711 Yelena     Voronova  NY    Podiatry  2019-10-31   4 1710912209 I20040602001711 Yelena     Voronova  NY    Podiatry  2019-10-31   5 1710912209 I20040602001711 Yelena     Voronova  NY    Podiatry  2019-10-31   # ℹ 8 more variables: ind_tot_emp_assn <int>, pac_id_group <chr>, #   enroll_id_group <chr>, business_name <chr>, state_group <chr>, #   due_date_group <date>, group_reassign_and_phys_assist <int>, #   record_type <chr> revalidation_group(enroll_id_group = \"O20080205000002\") # A tibble: 1 × 15   npi        enroll_id       first_name last_name state specialty due_date_ind   <chr>      <chr>           <chr>      <chr>     <chr> <chr>     <date>       1 1710912209 I20040602001711 Yelena     Voronova  NY    Podiatry  2019-10-31   # ℹ 8 more variables: ind_tot_emp_assn <int>, pac_id_group <chr>, #   enroll_id_group <chr>, business_name <chr>, state_group <chr>, #   due_date_group <date>, group_reassign_and_phys_assist <int>, #   record_type <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"taxonomy-crosswalk","dir":"","previous_headings":"Motivation","what":"Taxonomy Crosswalk","title":"Access Public Healthcare Provider Data","text":"","code":"taxonomy_crosswalk(specialty_desc = \"Rehabilitation Agency\") # A tibble: 2 × 4   taxonomy_code taxonomy_desc                      specialty_code specialty_desc   <chr>         <chr>                              <chr>          <chr>          1 261QR0400X    Ambulatory Health Care Facilities… B4[14]         Rehabilitatio… 2 315D00000X    Nursing & Custodial Care Faciliti… B4[14]         Rehabilitatio… taxonomy_crosswalk(specialty_code = \"B4[14]\") # A tibble: 13 × 4    taxonomy_code taxonomy_desc                     specialty_code specialty_desc    <chr>         <chr>                             <chr>          <chr>           1 261QR0400X    Ambulatory Health Care Facilitie… B4[14]         Rehabilitatio…  2 335U00000X    Suppliers/Organ Procurement Orga… B4[14]         Organ Procure…  3 261QM0801X    Ambulatory Health Care Facilitie… B4[14]         Community Men…  4 261QR0401X    Ambulatory Health Care Facilitie… B4[14]         Comprehensive…  5 261QE0700X    Ambulatory Health Care Facilitie… B4[14]         End-Stage Ren…  6 261QF0400X    Ambulatory Health Care Facilitie… B4[14]         Federally Qua…  7 251G00000X    Agencies/Hospice Care Community … B4[14]         Hospice         8 291U00000X    Laboratories/Clinical Medical La… B4[14]         Histocompatib…  9 291900000X    Laboratories/Military Clinical M… B4[14]         <NA>           10 261QR0400X    Ambulatory Health Care Facilitie… B4[14]         Outpatient Ph… 11 315D00000X    Nursing & Custodial Care Facilit… B4[14]         Rehabilitatio… 12 282J00000X    Hospitals/Religious Non-medical … B4[14]         Religious Non… 13 261QR1300X    Ambulatory Health Care Facilitie… B4[14]         Rural Health … taxonomy_crosswalk(specialty_code = \"8\") # A tibble: 9 × 4   taxonomy_code taxonomy_desc                      specialty_code specialty_desc   <chr>         <chr>                              <chr>          <chr>          1 207Q00000X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… 2 207QA0401X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… 3 207QA0000X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… 4 207QA0505X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… 5 207QB0002X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… 6 207QG0300X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… 7 207QH0002X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… 8 207QS0010X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… 9 207QS1201X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… taxonomy_crosswalk(taxonomy_code = \"207Q00000X\") # A tibble: 1 × 4   taxonomy_code taxonomy_desc                      specialty_code specialty_desc   <chr>         <chr>                              <chr>          <chr>          1 207Q00000X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… # taxonomy_crosswalk() |>  #   dplyr::full_join(nucc_taxonomy_230,  #   dplyr::join_by(taxonomy_code == code))"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access Public Healthcare Provider Data","text":"Please note provider project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/asc_ifed_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","title":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","text":"Information Medicare Enrolled Ambulatory Surgical Center (ASC) Providers Independent Free Standing Emergency Departments (IFEDs) COVID-19 public health emergency.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/asc_ifed_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","text":"","code":"asc_ifed_enrollment(   npi = NULL,   enroll_id = NULL,   enroll_state = NULL,   enroll_type = NULL,   org_name = NULL,   address = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/asc_ifed_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/asc_ifed_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","text":"npi NPI Provider enroll_id Unique number assigned PECOS provider enroll_state State provider enrolled enroll_type Type enrollment - ASC Hospital IFED org_name Organizational name enrolled provider address description city City enrolled provider located state State provider located zipcode Zip code provider's location tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/asc_ifed_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/asc_ifed_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","text":"Ambulatory Surgical Centers (ASCs) Independent Free Standing Emergency Departments (IFEDs) Enrolled Medicare Hospital Providers dataset includes Medicare enrolled Ambulatory Surgical Centers (ASC) converted Hospitals COVID-19 public health emergency. Additionally, list includes Independent Free Standing Emergency Departments (IFEDs) temporarily certified Hospitals COVID-19 public health emergency.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/asc_ifed_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","text":"ASCs IFEDs Enrolled Medicare Hospital Providers","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/asc_ifed_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/asc_ifed_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Ambulatory Surgical Centers and Independent Free Standing\nEmergency Departments Enrolled in Medicare As Hospital Providers — asc_ifed_enrollment","text":"","code":"if (FALSE) { # interactive() asc_ifed_enrollment(city = \"Atlanta\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Current information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographical areas.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"","code":"beneficiary_enrollment(   year = NULL,   period = NULL,   level = NULL,   state = NULL,   state_name = NULL,   county = NULL,   fips = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"year Calendar year Medicare enrollment; current options 2017 - 2022 period Time frame Medicare enrollment; options Year month within 12-month time span month data set's version name (listed ) level Geographic level data; options National, State, County state Two-letter state abbreviation beneficiary residence state_name Full state name beneficiary residence county County beneficiary residence fips FIPS code beneficiary residence tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Medicare Monthly Enrollment data provides current monthly information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographic areas including national, state/territory, county. hospital/medical coverage data can broken health care delivery (Original Medicare versus Medicare Advantage Health Plans) prescription drug coverage data can examined enrolled stand-alone Prescription Drug Plans enrolled Medicare Advantage Prescription Drug plans. dataset includes enrollee counts rolling 12 month basis also provides information yearly trends. dataset based information gathered CMS administrative enrollment data beneficiaries enrolled Medicare program available CMS Chronic Conditions Data Warehouse.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Medicare Monthly Enrollment","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"","code":"if (FALSE) { # interactive() beneficiary_enrollment(year = NULL,                        period = \"Year\",                        level = \"County\",                        state = \"AL\",                        county = \"Autauga\")  beneficiary_enrollment(year = 2021, level = \"County\", fips = \"01001\")  beneficiary_enrollment(year = 2022,                        period = \"July\",                        level = \"State\",                        state_name = \"Georgia\")  beneficiary_enrollment(level = \"State\", fips = \"10\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"cc_multiple(   year,   level = NULL,   sublevel = NULL,   fips = NULL,   age_group = NULL,   demographic = NULL,   subdemo = NULL,   tidy = TRUE )"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"in-addition-to-the-searchable-columns-","dir":"Reference","previous_headings":"","what":"In addition to the searchable columns:","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"mcc classify MCC Medicare beneficiary, 21 chronic conditions counted grouped four categories (0-1, 2-3, 4-5 6 ). prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. tot_std_pymt_percap Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. tot_pymt_percap Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). hosp_readmsn_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits_per_1k Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"year integer, YYYY, calendar year Medicare enrollment. Run helper function years_ccmult() return vector currently available years. level Geographic level data; options National, State, County sublevel state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. fips FIPS state /county code Medicare beneficiary resides. column blank data aggregated National level Puerto Rico Virgin Islands. age_group Identifies age level population data aggregated. value indicates data row represents Fee--Service Medicare Beneficiaries. value <65 65+ indicates data aggregated age Medicare Beneficiaries end calendar year. demographic Identifies demographic level population data aggregated. value indicates data row represents Fee--Service Medicare beneficiaries. value Sex indicates data aggregated Medicare beneficiary's sex. value Race indicates data aggregated Medicare beneficiary's race. value Dual Status indicates data aggregated Medicare beneficiary's dual eligibility status. subdemo Sex, beneficiary’s sex classified Male Female identified using information CMS enrollment database. Race, race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. Dual Status, beneficiaries can classified 'Medicare Medicaid' 'Medicare '. Beneficiaries enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Multiple Chronic Conditions dataset provides information number chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories (0-1, 2-3, 4-5 6 ).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Medicare Multiple Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"if (FALSE) { cc_multiple(year = 2018, level  = \"State\", sublevel = \"California\") cc_multiple(year = 2007, level = \"National\", demographic = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Specific Chronic Conditions API — cc_specific","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"cc_specific(   year,   level = NULL,   sublevel = NULL,   fips = NULL,   age_group = NULL,   demographic = NULL,   subdemo = NULL,   condition = NULL,   tidy = TRUE )"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"in-addition-to-the-searchable-columns-","dir":"Reference","previous_headings":"","what":"In addition to the searchable columns:","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. tot_std_pymt_percap Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. tot_pymt_percap Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). hosp_readmsn_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits_per_1k Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"year integer, YYYY, calendar year Medicare enrollment. Run helper function years_ccspec() return vector currently available years. level Geographic level data; options National, State, County sublevel state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. fips FIPS state /county code Medicare beneficiary resides. column blank data aggregated National level Puerto Rico Virgin Islands. age_group Identifies age level population data aggregated. value indicates data row represents Fee--Service Medicare Beneficiaries. value <65 65+ indicates data aggregated age Medicare Beneficiaries end calendar year. demographic Identifies demographic level population data aggregated. value indicates data row represents Fee--Service Medicare beneficiaries. value Sex indicates data aggregated Medicare beneficiary's sex. value Race indicates data aggregated Medicare beneficiary's race. value Dual Status indicates data aggregated Medicare beneficiary's dual eligibility status. subdemo Sex, beneficiary’s sex classified Male Female identified using information CMS enrollment database. Race, race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. Dual Status, beneficiaries can classified 'Medicare Medicaid' 'Medicare '. Beneficiaries enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. condition Identifies chronic condition prevalence utilization compiled. 21 chronic conditions identified using Medicare administrative claims. Medicare beneficiary considered chronic condition CMS administrative data claim indicating beneficiary received service treatment specific condition. Beneficiaries may one chronic conditions listed. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Select Chronic Conditions dataset provides information 21 selected chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography distinct chronic conditions listed . Alcohol Abuse Drug Abuse/ Substance Abuse Alzheimer’s Disease Related Dementia Arthritis (Osteoarthritis Rheumatoid) Asthma Atrial Fibrillation Autism Spectrum Disorders Cancer (Breast, Colorectal, Lung, Prostate) Chronic Kidney Disease Chronic Obstructive Pulmonary Disease Depression Diabetes Drug Abuse/ Substance Abuse Heart Failure Hepatitis (Chronic Viral B & C) HIV/AIDS Hyperlipidemia (High cholesterol) Hypertension (High blood pressure) Ischemic Heart Disease Osteoporosis Schizophrenia Psychotic Disorders Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Medicare Specific Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"if (FALSE) { cc_specific(year = 2018, level = \"State\", sublevel = \"CA\") cc_specific(year = 2007, level  = \"National\", demographic = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Dataset providers' facility affiliations","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"","code":"doctors_and_clinicians(   npi = NULL,   pac_id = NULL,   enroll_id = NULL,   first_name = NULL,   middle_name = NULL,   last_name = NULL,   gender = NULL,   school = NULL,   grad_year = NULL,   specialty = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   ind_assn = NULL,   group_assn = NULL,   offset = 0,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"npi Unique clinician ID assigned NPPES pac_id Unique individual clinician ID assigned PECOS enroll_id Unique ID clinician enrollment source data observation first_name Individual clinician first name middle_name Individual clinician middle name last_name Individual clinician last name gender Individual clinician gender school Individual clinician’s medical school grad_year Individual clinician’s medical school graduation year specialty Primary medical specialty reported individual clinician selected enrollment city Group individual's city state Group individual's state zipcode Group individual's ZIP code (9 digits available) ind_assn Indicator whether clinician accepts Medicare approved amount payment full. Y = Clinician accepts Medicare approved amount payment full. M = Clinician may accept Medicare Assignment. group_assn Indicator whether group accepts Medicare approved amount payment full. Y = Clinician accepts Medicare approved amount payment full. M = Clinician may accept Medicare Assignment. offset offset; API pagination tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Doctors Clinicians national downloadable file organized line unique clinician/enrollment record/group/address level. Clinicians multiple Medicare enrollment records /single enrollments linking multiple practice locations listed multiple lines.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Doctors Clinicians National Downloadable File","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"","code":"if (FALSE) { # interactive() doctors_and_clinicians(npi = 1407263999) doctors_and_clinicians(enroll_id = \"I20081002000549\") doctors_and_clinicians(first_name = \"John\") doctors_and_clinicians(school = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\") doctors_and_clinicians(grad_year = 2003) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Physician Facility Affiliations API — facility_affiliations","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"Dataset providers' facility affiliations","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"","code":"facility_affiliations(   npi = NULL,   pac_id = NULL,   first_name = NULL,   middle_name = NULL,   last_name = NULL,   facility_type = NULL,   facility_ccn = NULL,   parent_ccn = NULL,   offset = 0,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"npi Unique clinician ID assigned NPPES pac_id Unique individual clinician ID assigned PECOS first_name Individual clinician first name middle_name Individual clinician middle name last_name Individual clinician last name facility_type Facilities can fall following type categories: Hospital, Long-term Care Hospital, Nursing Home, Inpatient Rehabilitation Facility, Home Health Agency, Hospice, Dialysis Facility facility_ccn alphanumeric; Medicare CCN (CMS Certification Number) facility type unit within hospital individual clinician provides service. Effective 2007, CCN replaced terms Medicare Provider Number, Medicare Identification Number OSCAR Number. CCN used verify Medicare/Medicaid certification survey certification, assessment-related activities communications. parent_ccn numeric; Medicare CCN primary hospital individual clinician provides service, clinician provide services unit within hospital. offset offset; API pagination tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"file lists clinicians' facility affiliations, expanded include Long-term Care Hospitals (LTCHs), Skilled Nursing Facilities (SNFs), Inpatient Rehabilitation Facility (IRFs), Home Health Agencies, Hospices, /Dialysis Facilities, addition hospitals.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"CMS Physician Facility Affiliations Certification Number (CCN) State Codes","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"","code":"if (FALSE) { # interactive() facility_affiliations(npi = 1003019563) facility_affiliations(facility_ccn = \"060004\") facility_affiliations(parent_ccn = 670055) facility_affiliations(first_name = \"John\") facility_affiliations(facility_type = \"Home Health Agency\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Hospital Enrollments API — hospital_enrollment","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Information hospitals currently enrolled Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"","code":"hospital_enrollment(   npi = NULL,   facility_ccn = NULL,   enroll_id = NULL,   enroll_state = NULL,   specialty_code = NULL,   pac_id_org = NULL,   org_name = NULL,   dba_name = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"npi Hospital’s National Provider Identifier (NPI) facility_ccn Hospital’s CMS Certification Number (CCN), formerly called OSCAR Number enroll_id Hospital’s enrollment ID enroll_state Hospital’s enrollment state specialty_code Enrollment application specialty type code pac_id_org Hospital’s PECOS Associate Control (PAC) ID org_name Hospital’s legal business name dba_name Hospital’s -business-name city City hospital’s practice location address state State hospital’s practice location address. zipcode Zip code hospital’s practice location address tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Hospital Enrollments dataset provides enrollment information Hospitals currently enrolled Medicare. data includes information Hospital's sub-group type, legal business name, business name, organization type address.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Hospital Enrollments","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"","code":"if (FALSE) { # interactive() hospital_enrollment(npi = 1689653487) hospital_enrollment(facility_ccn = \"440058\") hospital_enrollment(pac_id_org = 6103733050) hospital_enrollment(city = \"Atlanta\") hospital_enrollment(zipcode = 117771928) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Information providers missing digital contact information NPPES.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"","code":"missing_information(npi = NULL, tidy = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"npi provider’s National Provider Identifier tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"May 2020 CMS Interoperability Patient Access final rule, CMS finalized policy publicly report names NPIs providers digital contact information included NPPES system (85 FR 25584). data includes NPI provider name providers clinicians without digital contact information NPPES.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"CMS Public Reporting Missing Digital Contact Information API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"","code":"missing_information(npi = 1134122013) #> # A tibble: 1 × 3 #>   npi        last_name first_name #>   <chr>      <chr>     <chr>      #> 1 1134122013 Henry     Timothy    missing_information(npi = 1386128379) #> ✖ No results for npi: 1386128379"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the NPPES National Provider Identifier Registry API — nppes_npi","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"nppes_npi() allows search NPPES NPI Registry's public API many parameters defined API's documentation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"","code":"nppes_npi(   npi = NULL,   entype = NULL,   first_name = NULL,   last_name = NULL,   org_name = NULL,   taxonomy_desc = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   country = NULL,   limit = 1200,   skip = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"npi 10-digit National Provider Identifier (NPI). entype Choices either Individual provider (NPI-1 Type 1) O Organizational provider (NPI-2 Type 2.). specified, Type 1 Type 2 NPIs returned. Entype criteria entered. first_name Individual provider's (NPI-1) first name. Trailing wildcard entries permitted requiring least two characters entered (e.g. jo* ). last_name Individual provider's (NPI-1) last name. Trailing wildcard entries permitted requiring least two characters entered (e.g. jo* ). org_name Healthcare organization's name (NPI-2). Trailing wildcard entries permitted requiring least two characters entered. types Organization Names (LBN, DBA, Former LBN, Name) associated NPI examined matching contents, therefore, results might contain organization name different one entered Organization Name criterion. taxonomy_desc Search providers taxonomy entering taxonomy description. city City associated provider's address. search Military Address, enter either APO FPO. state State abbreviation associated provider's address. field used, least one field, besides entype country, must populated. Valid values state abbreviations: State Abbreviations. zipcode Postal Code associated provider's address identified Address Purpose. enter 5 digit postal code, match appropriate 9 digit (zip+4) codes data. Trailing wildcard entries permitted requiring least two characters entered (e.g., 21*). country Country abbreviation associated provider's address. field can used input criterion, long value selected US (United States). Valid values country abbreviations: Country Abbreviations. limit Maximum number results return; default 1200. skip Number results skip searching previous number; set limit. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"NPPES NPI Registry Public Search free directory active National Provider Identifier (NPI) records. Healthcare providers acquire unique 10-digit NPIs identify standard way throughout industry. CMS supplies NPI, publish parts NPI record public relevance, including provider’s name, taxonomy practice address. enables search providers NPPES (National Plan Provider Enumeration System.) information produced NPI Registry provided accordance NPPES Data Dissemination Notice. charge use NPI Registry.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"NPPES NPI Registry API Documentation NPPES NPI Registry API Demo","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"","code":"if (FALSE) { # interactive() nppes_full(npi = 1528060837) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":null,"dir":"Reference","previous_headings":"","what":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. code set structured three distinct \"Levels\":","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"","code":"nucc_taxonomy_230"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"nucc-taxonomy-a-data-frame-with-rows-and-columns-","dir":"Reference","previous_headings":"","what":"nucc_taxonomy_230 A data frame with 873 rows and 8 columns:","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"code Taxonomy Code grouping Level , Provider Grouping classification Level II, Classification specialization Level III, Area Specialization definition Definition Taxonomy notes Notes pertaining Taxonomy, e.g. sources, date modified, date implemented, etc. display_name consumer-friendly name taxonomy code; combination code name Level code nested. section Indicates whether Taxonomy Individual Non-Individual, .e., group taxonomy","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"https://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"Level (Provider Grouping): major grouping service(s) occupation(s) health care providers. example: Allopathic & Osteopathic Physicians, Dental Providers, Hospitals, etc. Level II: (Classification): specific service occupation related Provider Grouping. example, Classification Allopathic & Osteopathic Physicians based upon General Specialty Certificates issued appropriate national boards. following boards however, general certificates appear Level III areas specialization strictly due display limitations code set Boards multiple general certificates: Medical Genetics, Preventive Medicine, Psychiatry & Neurology, Radiology, Surgery, Otolaryngology, Pathology. Level III: (Area Specialization): specialized area Classification provider chooses practice make services available. example, Area Specialization provider type Allopathic & Osteopathic Physicians based upon Subspecialty Certificates issued appropriate national boards. Health Care Provider Taxonomy code set Levels organized allow drilling provider's specific level specialization. ten digit codes provider category unique contain embedded logic. codes categories used exactly assigned Taxonomy list. time codes separated form new codes, parsed apart, edited one position within code.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"\"230\" designation indicates version code set. NUCC updates set every six months. \"23\" indicates year \"0\" indicates first update year. taxonomy code display name consumer-friendly name code. display name combination code name Level code nested, precisely identifies code.  example, Addiction Medicine physician subspecialty Anesthesiology, Family Medicine, Internal Medicine, Preventive Medicine, Psychiatry & Neurology. Seeing “Addiction Medicine” identify specialty physician, display name “Addiction Medicine (Internal Medicine) Physician” clearly . another example, code “Radiology” confused several codes, “Radiology Chiropractor” specifies exact provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"how-many-categories-are-there-","dir":"Reference","previous_headings":"","what":"How Many Categories are There?","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. Health Care Provider Taxonomy code set includes specialty categories individuals, Groups individuals, non-individuals. Individual Category includes: Allopathic & Osteopathic Physicians Behavioral Health Social Service Providers Chiropractic Providers Dental Providers Dietary Nutritional Service Providers Emergency Medical Service Providers Eye Vision Service Providers Nursing Service Providers Nursing Service Related Providers Service Providers Pharmacy Service Providers Physician Assistants Advanced Practice Nursing Providers Podiatric Medicine Surgery Service Providers Respiratory, Developmental, Rehabilitative Restorative Service Providers Speech, Language Hearing Service Providers Student, Health Care Technologists, Technicians, Technical Service Providers Group (Individuals) Category includes: Multi-Specialty Single Specialty Non-Individual Category includes: Agencies Ambulatory Health Care Facilities Hospital Units Hospitals Laboratories Managed Care Organizations Nursing Custodial Care Facilities Service Providers Residential Treatment Facilities Respite Care Facilities Suppliers Transportation Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":null,"dir":"Reference","previous_headings":"","what":"Search CMS' Open Payments Program API — open_payments","title":"Search CMS' Open Payments Program API — open_payments","text":"open_payments() allows search CMS' Open Payments Program API.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search CMS' Open Payments Program API — open_payments","text":"","code":"open_payments(   year,   npi = NULL,   profile_id = NULL,   covered_type = NULL,   first_name = NULL,   last_name = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   teaching_hospital = NULL,   payer_name = NULL,   payer_id = NULL,   payment_form = NULL,   payment_nature = NULL,   offset = 0,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search CMS' Open Payments Program API — open_payments","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search CMS' Open Payments Program API — open_payments","text":"year Program reporting year. Run helper function years_openpay() return vector currently available years. npi Covered recipient's National Provider Identifier (NPI). profile_id Covered recipient's  unique Open Payments ID covered_type Type covered recipient, e.g., Covered Recipient Physician Covered Recipient Non-Physician Practitioner Covered Recipient Teaching Hospital first_name Covered recipient's first name last_name Covered recipient's last name city City state State, abbreviation zipcode Zip code teaching_hospital Name teaching hospital, e.g. Vanderbilt University Medical Center payer_name Paying entity's name. Examples: Pharmacosmos Therapeutics Inc. Getinge USA Sales, LLC Agiliti Health, Inc. OrthoScan, Inc. payer_id Paying entity's unique Open Payments ID payment_form Form payment, examples: Stock option Cash cash equivalent -kind items services payment_nature Nature payment transfer value, examples: Royalty License Charitable Contribution Current prospective ownership investment interest Food Beverage offset offset; API pagination tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search CMS' Open Payments Program API — open_payments","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search CMS' Open Payments Program API — open_payments","text":"Open Payments program national disclosure program promotes transparent accountable health care system. Open Payments houses publicly accessible database payments reporting entities, including drug medical device companies, make covered recipients like physicians. Please note CMS comment relationships may beneficial potential conflicts interest. CMS publishes data attested reporting entities. data open individual interpretation. Open Payments national transparency program collects publishes information financial relationships drug medical device companies (referred \"reporting entities\") certain health care providers (referred \"covered recipients\"). relationships may involve payments providers things including limited research, meals, travel, gifts speaking fees. purpose program provide public transparent health care system. information available Open Payments database open personal interpretation questions data means, patients advocates speak directly health care provider better understanding.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search CMS' Open Payments Program API — open_payments","text":"Open Payments Program? OpenPaymentsData.cms.gov 2021 General Payment Data 2020 General Payment Data 2019 General Payment Data 2018 General Payment Data 2017 General Payment Data 2016 General Payment Data 2015 General Payment Data","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search CMS' Open Payments Program API — open_payments","text":"Update Frequency: Yearly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search CMS' Open Payments Program API — open_payments","text":"","code":"if (FALSE) { # interactive() open_payments(npi = 1043218118, year = 2021) open_payments(payment_nature = \"Royalty or License\") open_payments(payment_form = \"Stock option\") open_payments(payer_name = \"Adaptive Biotechnologies Corporation\") open_payments(teaching_hospital = \"Nyu Langone Hospitals\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Opt Out Affidavits API — opt_out","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"list practitioners currently opted Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"","code":"opt_out(   npi = NULL,   first_name = NULL,   last_name = NULL,   specialty = NULL,   address = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   order_and_refer = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"npi National Provider Identifier (NPI) number Opt Provider first_name First Name Opt Provider last_name Last Name Opt Provider specialty Specialty Opt Provider address Provider's Street Address city Provider's City state Provider's State Abbreviation zipcode Provider's Zip Code order_and_refer Flag indicating whether Provider eligible Order Refer tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Opt Affidavits dataset provides information providers decided participate Medicare. contains provider's NPI, specialty, address, effective dates.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"","code":"if (FALSE) { opt_out(specialty = \"Psychiatry\", zipcode = \"07626\") opt_out(first = \"David\", last = \"Smith\") opt_out(npi = 1114974490) opt_out(city = \"Los Angeles\", address = \"9201 W SUNSET BLVD\")  opt_out(state = \"NY\", order_and_refer = FALSE) # Returns empty list i.e., provider is not in the database opt_out(npi = 1326011057)  # Example of possible data cleaning psych <- opt_out(specialty = \"Psychiatry\")  psych |> dplyr::mutate(last_updated = as.Date(parsedate::parse_date(last_updated)), optout_effective_date = as.Date(parsedate::parse_date(optout_effective_date)), optout_end_date = as.Date(parsedate::parse_date(optout_end_date))) |> age_days(date, optout_end_date, colname = \"days_until_end\") |> age_days(last_updated, date, colname = \"days_since_update\") |> age_days(optout_effective_date, date, colname = \"days_since_optout\") |> dplyr::mutate(zip_code = purrr::map_chr(zip_code, format_zipcode)) |> dplyr::mutate(address_full = full_address(.data, \"first_line_street_address\", \"second_line_street_address\", \"city_name\", \"state_code\",\"zip_code\")) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Order and Referring API — order_refer","title":"Search the Medicare Order and Referring API — order_refer","text":"physicians non-physician practitioners legally eligible order refer Medicare program current enrollment records Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Order and Referring API — order_refer","text":"","code":"order_refer(   npi = NULL,   first_name = NULL,   last_name = NULL,   partb = NULL,   dme = NULL,   hha = NULL,   pmd = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Order and Referring API — order_refer","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Order and Referring API — order_refer","text":"npi 10-digit National Provider Identifier (NPI) first_name Provider's first name last_name Provider's last name partb logical dme logical hha logical pmd logical tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Order and Referring API — order_refer","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Order and Referring API — order_refer","text":"Medicare Order Referring dataset provides information physicians non-physician practitioners, National Provider Identifier (NPI), type/specialty legally eligible order refer Medicare program current enrollment records Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Order and Referring API — order_refer","text":"Medicare Order Referring API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Order and Referring API — order_refer","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Order and Referring API — order_refer","text":"","code":"if (FALSE) { # interactive() order_refer(npi = 1003026055)  order_refer(last_name = \"phadke\",             first_name = \"radhika\")  # Unnamed List of NPIs c(1003026055, 1316405939, 1720392988,   1518184605, 1922056829, 1083879860) |>   purrr::map(order_refer) |>   purrr::list_rbind()  # Data frame of NPIs data.frame(npi = c(1003026055, 1316405939, 1720392988,                    1518184605, 1922056829, 1083879860)) |>                    dplyr::pull(npi) |>                    purrr::map(order_refer) |>                    purrr::list_rbind() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"list enrollment applications pending CMS contractor review physicians & non-physicians.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"","code":"pending_applications(   npi = NULL,   last_name = NULL,   first_name = NULL,   type,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"npi National Provider Identifier (NPI) number last_name Last name provider first_name First name provider type physician non-physician tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Pending Initial Logging Tracking (L & T) dataset provides list pending applications processed CMS contractors.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Medicare Pending Initial Logging Tracking Physicians API Medicare Pending Initial Logging Tracking Non-Physicians API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"","code":"pending_applications(last_name = \"Smith\", type = \"non-physician\") #> # A tibble: 18 × 4 #>    npi        last_name first_name type          #>    <chr>      <chr>     <chr>      <chr>         #>  1 1700588621 SMITH     AMANDA     NON-PHYSICIAN #>  2 1073234282 SMITH     ANGELA     NON-PHYSICIAN #>  3 1790408185 SMITH     ARIELLE    NON-PHYSICIAN #>  4 1548969413 SMITH     ASHLEY     NON-PHYSICIAN #>  5 1659967966 SMITH     ASHLEY     NON-PHYSICIAN #>  6 1952009805 SMITH     BALEY      NON-PHYSICIAN #>  7 1962889709 SMITH     BRANDY     NON-PHYSICIAN #>  8 1801992912 SMITH     BRIDGET    NON-PHYSICIAN #>  9 1194005306 SMITH     EVELYN     NON-PHYSICIAN #> 10 1902527641 SMITH     HEATHER    NON-PHYSICIAN #> 11 1407550668 SMITH     JACQUITA   NON-PHYSICIAN #> 12 1356079727 SMITH     JARED      NON-PHYSICIAN #> 13 1891169751 SMITH     JEANA      NON-PHYSICIAN #> 14 1033538152 SMITH     JOANNA     NON-PHYSICIAN #> 15 1790774081 SMITH     SHERIEE    NON-PHYSICIAN #> 16 1730741174 SMITH     TIMOTHY    NON-PHYSICIAN #> 17 1649967704 SMITH     TYPHANI    NON-PHYSICIAN #> 18 1063126522 SMITH     ZACHARY    NON-PHYSICIAN pending_applications(first_name = \"John\", type = \"physician\") #> # A tibble: 43 × 4 #>    npi        last_name  first_name type      #>    <chr>      <chr>      <chr>      <chr>     #>  1 1881791739 ADAMS      JOHN       PHYSICIAN #>  2 1841280963 BIGBEE     JOHN       PHYSICIAN #>  3 1619996378 BODDEN     JOHN       PHYSICIAN #>  4 1154079499 BRODERICK  JOHN       PHYSICIAN #>  5 1588744569 BRUNO      JOHN       PHYSICIAN #>  6 1861142556 BURKE      JOHN       PHYSICIAN #>  7 1306817531 COMBS      JOHN       PHYSICIAN #>  8 1649890864 CRESENZO   JOHN       PHYSICIAN #>  9 1932632775 DEIS       JOHN       PHYSICIAN #> 10 1730349580 ECHEVARRIA JOHN       PHYSICIAN #> # ℹ 33 more rows"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated geography service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"","code":"physician_by_geography(   year,   level = NULL,   sublevel = NULL,   fips = NULL,   hcpcs_code = NULL,   hcpcs_desc = NULL,   hcpcs_drug = NULL,   place_of_srvc = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"year Year YYYY format.  Run helper function years_pbg() return vector currently available years. level Identifies level geography data row aggregated. value 'State' indicates data row aggregated single state identified Rendering Provider State column given HCPCS Code Level. value 'National' indicates data row aggregated across states given HCPCS Code Level. sublevel state name provider located, reported NPPES. values include 50 United States, District Columbia, U.S. territories, Armed Forces areas, Unknown Foreign Country. Data aggregated National level identified word 'National'. fips FIPS code referring provider state. variable blank reported national level. hcpcs_code HCPCS code used identify specific medical service furnished provider. hcpcs_desc Description HCPCS code specific medical service furnished provider. HCPCS descriptions associated CPT codes consumer friendly descriptions provided AMA. CPT Consumer Friendly Descriptors lay synonyms CPT descriptors intended help healthcare consumers medical professionals understand clinical procedures bills patient portals. CPT Consumer Friendly Descriptors used clinical coding documentation. descriptions CMS Level II descriptions provided long form. Due variable length restrictions, CMS Level II descriptions truncated 256 bytes. result, HCPCS description can associated one HCPCS code. hcpcs_drug Flag identifies whether HCPCS code specific service furnished provider HCPCS listed Medicare Part B Drug Average Sales Price (ASP) File. place_of_srvc Identifies whether place service submitted claims facility (facility) non-facility (office). Non-facility generally office setting; however entities included non-facility. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Geography Service dataset contains information utilization, payment (allowed amount Medicare payment), submitted charges organized HCPCS place service national table organized provider state, HCPCS place service state table. national state tables also include HCPCS drug indicator identify whether HCPCS product/service drug defined Medicare Part B Drug ASP list.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Medicare Physician & Practitioners: Geography Service API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"","code":"if (FALSE) { # interactive() physician_by_geography(hcpcs_code = \"0002A\", year = 2020) service <- purrr::map_dfr(as.character(2013:2020),            ~physician_by_service(npi = 1003000126, year = .x))  procedures <- service |>               dplyr::distinct(hcpcs_cd) |>               tibble::deframe()  arg_cross <- purrr::cross_df(list(              x = as.character(2013:2020),              y = procedures))  # National Level purrr::map2_dfr(arg_cross$x, arg_cross$y, ~physician_by_geography(geo_level = \"National\", year = .x, hcpcs_code = .y))  # State Level purrr::map2_dfr(arg_cross$x, arg_cross$y, ~physician_by_geography(geo_level = \"Georgia\", year = .x, hcpcs_code = .y)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"","code":"physician_by_provider(   year,   npi = NULL,   first_name = NULL,   last_name = NULL,   credential = NULL,   gender = NULL,   entype = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"year Year YYYY format. Run helper function years_pbp() return vector currently available years. npi National Provider Identifier (NPI) rendering provider claim. provider NPI numeric identifier registered NPPES. first_name individual provider's (entity type code ) first name. organization's (entity type code O) blank. last_name Last name/Organization name provider. provider registered NPPES individual (entity type code ), provider’s last name. provider registered organization (entity type code O), organization name. credential individual provider's (entity type code ) credentials. organization's blank. gender individual provider's gender. organization's blank. entype Type entity reported NPPES. entity code identifies providers registered individuals entity type code O identifies providers registered organizations. city city provider located, reported NPPES. state state provider located, reported NPPES. zipcode provider’s zip code, reported NPPES. fips FIPS code rendering provider's state. ruca Rural-Urban Commuting Area Code (RUCA); Census tract-based classification scheme utilizes standard Bureau Census Urbanized Area Urban Cluster definitions combination work commuting information characterize nation's Census tracts regarding rural urban status relationships. Referring Provider ZIP code cross walked United States Department Agriculture (USDA) 2010 Rural-Urban Commuting Area Codes. country country provider located, reported NPPES. specialty Derived provider specialty code reported claim. providers reported one specialty code claims, specialty code associated largest number services. par Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts. value Y provider least one claim identifying provider participating Medicare accepting assignment Medicare allowed amounts within HCPCS code place service. non-participating provider may elect accept Medicare allowed amounts services accept Medicare allowed amounts services. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Provider dataset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Medicare Physician & Practitioners: Provider API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Update Frequency: *Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"","code":"if (FALSE) { physician_by_provider(npi = 1003000423,                       year = 2020)  physician_by_provider(entype = \"I\",                       city = \"Hershey\",                       state = \"PA\",                       fips = 42,                       ruca = 1,                       gender = \"F\",                       cred = \"MD\",                       specialty = \"Anesthesiology\")  purrr::map_dfr(2013:2020, ~physician_by_provider(npi = 1003000126, year = .x)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated provider service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"","code":"physician_by_service(   year,   npi = NULL,   last_name = NULL,   first_name = NULL,   credential = NULL,   gender = NULL,   entype = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par = NULL,   hcpcs_code = NULL,   hcpcs_drug = NULL,   pos = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"year int (required); Year YYYY format. Run years_pbs() return character vector years currently available. npi National Provider Identifier (NPI) rendering provider claim. provider NPI numeric identifier registered NPPES. last_name Last name/Organization name provider. provider registered NPPES individual (entity type code = ), provider’s last name. provider registered organization (entity type code = O), organization name. first_name individual provider's (entity type code = ) first name. organization's (entity type code = O) blank. credential individual provider's (entity type code=’’) credentials. organization's blank. gender individual provider's gender. organization's blank. entype Type entity reported NPPES. entity code ‘’ identifies providers registered individuals entity type code ‘O’ identifies providers registered organizations. city city provider located, reported NPPES. state state provider located, reported NPPES. zipcode provider’s zip code, reported NPPES. fips FIPS code rendering provider's state. ruca Rural-Urban Commuting Area Code (RUCA); Census tract-based classification scheme utilizes standard Bureau Census Urbanized Area Urban Cluster definitions combination work commuting information characterize nation's Census tracts regarding rural urban status relationships. Referring Provider ZIP code cross walked United States Department Agriculture (USDA) 2010 Rural-Urban Commuting Area Codes. country country provider located, reported NPPES. specialty Derived provider specialty code reported claim. providers reported one specialty code claims, specialty code associated largest number services. par Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts. value Y provider least one claim identifying provider participating Medicare accepting assignment Medicare allowed amounts within HCPCS code place service. non-participating provider may elect accept Medicare allowed amounts services accept Medicare allowed amounts services. hcpcs_code HCPCS code used identify specific medical service furnished provider. HCPCS codes include two levels. Level codes Current Procedural Terminology (CPT) codes maintained American Medical Association Level II codes created CMS identify products, supplies services covered CPT codes (ambulance services). hcpcs_drug Identifies whether HCPCS code specific service furnished provider HCPCS listed Medicare Part B Drug Average Sales Price (ASP) File. Please visit ASP drug pricing page additional information. pos Identifies whether place service submitted claims facility (value F) non-facility (value O). Non-facility generally office setting; however entities included non-facility. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"tibble containing 29 columns: year year npi year entype Entity/Enumeration Type Provider first_name year middle_name year last_name year credential year gender year specialty year street provider’s street address city city provider located, reported NPPES. state State Abbreviation Provider fips State FIPS Code Provider zipcode Zip Code Provider ruca RUCA Code Provider country Country Code Provider par Medicare Participation Indicator hcpcs_cd HCPCS Code hcpcs_desc HCPCS Description hcpcs_drug HCPCS Drug Indicator pos Place Service tot_benes Number Medicare Beneficiaries tot_srvcs Number Services tot_day Number Distinct Medicare Beneficiary/Per Day Services avg_charge Average Submitted Charge Amount avg_allowed Average Medicare Allowed Amount avg_payment Average Medicare Payment Amount avg_std_pymt Average Medicare Standardized Payment Amount","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Provider Service dataset provides information services procedures provided Medicare (fee--service) Part B beneficiaries physicians healthcare professionals. data based information gathered CMS administrative claims data Part B beneficiaries available CMS Chronic Conditions Data Warehouse. spending utilization data Physician Practitioners Provider Service Dataset aggregated following: NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility). can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Medicare Physician & Practitioners: Provider Service API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"","code":"if (FALSE) { # interactive() physician_by_service(npi = 1003000126) physician_by_service(year = 2019, last_name = \"Enkeshafi\") c(1003026055, 1316405939, 1720392988,   1518184605, 1922056829, 1083879860) |>   purrr::map(physician_by_service, year = 2020) purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Information point time snapshot enrollment level data providers actively enrolled Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"","code":"provider_enrollment(   npi = NULL,   pac_id = NULL,   enroll_id = NULL,   specialty_code = NULL,   specialty_desc = NULL,   state = NULL,   first_name = NULL,   middle_name = NULL,   last_name = NULL,   org_name = NULL,   gender = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"npi NPI 10-digit unique numeric identifier providers must obtain enrolling Medicare. assigned health care providers upon application National Plan Provider Enumeration System (NPPES). pac_id Provider associate level variable (PAC ID) PECOS database used link across tables. PAC ID 10-digit unique numeric identifier assigned individual organization PECOS. entity-level information (e.g., tax identification numbers organizational names) linked PAC ID. PAC ID may associated multiple Enrollment IDs individual organization enrolled multiple times different circumstances. enroll_id Provider enrollment ID PECOS database used link across tables. Enrollment ID 15-digit unique alphanumeric identifier assigned new provider enrollment application. enrollment-level information (e.g., enrollment type, enrollment state, provider specialty reassignment benefits) linked Enrollment ID. specialty_code Provider enrollment application enrollment specialty type. field shows provider’s primary specialty code. practitioners DME suppliers, please see Secondary Specialty file list secondary specialties (applicable). 20% practitioners DME suppliers least one secondary specialty. specialty_desc Provider enrollment application enrollment specialty type description state Provider enrollment state, abbreviated location. Providers enroll state level, one PAC ID may associated multiple ENRLMT_IDs multiple STATE_CD values. first_name Individual provider first name middle_name Individual provider middle name last_name Individual provider last name org_name Organizational provider name gender Individual provider gender: F (female), M (male), 9 (unknown) tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Medicare Fee--Service Public Provider Enrollment dataset includes information providers actively approved bill Medicare completed 855O time data pulled Provider Enrollment Chain Ownership System (PECOS). release provider enrollment data related provider information releases Physician Compare Data Transparency.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Medicare Fee--Service Public Provider Enrollment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"","code":"if (FALSE) { # interactive() provider_enrollment(npi = 1417918293, specialty_code = \"14-41\")  provider_enrollment(first_name = \"DEBRA\",                     middle_name = \"L\",                     last_name = \"FROMER\")  provider_enrollment(org_name = \"ELIZABETHTOWN COMMUNITY HOSPITAL\",                     state = \"NY\",                     specialty_code = \"00-85\")  provider_enrollment(specialty_desc = \"PRACTITIONER - ENDOCRINOLOGY\",                     state = \"AK\",                     gender = \"F\")   provider_enrollment(pac_id = 2860305554,                     enroll_id = \"I20031110000120\",                     gender = \"9\") prven <- tibble::tribble( ~fn,         ~params, \"provider_enrollment\", list(npi = 1083879860), \"provider_enrollment\", list(first_name = \"MICHAEL\",                             middle_name = \"K\",                             last_name = \"GREENBERG\",                             state = \"MD\"), \"provider_enrollment\", list(org_name = \"LUMINUS DIAGNOSTICS LLC\",                             state = \"GA\"))  purrr::invoke_map_dfr(prven$fn, prven$params) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Due Date List API — revalidation_date","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Information revalidation due dates Medicare providers. Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet. lists refreshed every two months two months’ worth due dates appended list","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"revalidation_date(   npi = NULL,   enroll_id = NULL,   first_name = NULL,   last_name = NULL,   org_name = NULL,   state = NULL,   type_code = NULL,   prov_type = NULL,   specialty = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"npi National Provider Identifier (NPI) enroll_id Enrollment ID first_name First name individual provider last_name Last name individual provider org_name Legal business name organizational provider state Enrollment state type_code Provider enrollment type code (1 Part ; 2 DME; 3 Non-DME Part B) prov_type Provider type description specialty Enrollment specialty tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Revalidation Due Date List dataset contains revalidation due dates Medicare providers due revalidate following six months. provider's due date fall within ensuing six months, due date marked 'TBD'. addition dataset also includes subfiles reassignment information given provider well due date listings clinics group practices providers.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Medicare Revalidation Due Date API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"if (FALSE) { # interactive() revalidation_date(enroll_id = \"I20031110000070\",                   npi = 1184699621)  revalidation_date(first_name = \"Eric\",                   last_name = \"Byrd\")  revalidation_date(state = \"FL\",                   type_code = \"3\",                   specialty = \"General Practice\")  revalidation_date(enroll_id = \"O20110620000324\",                   org_name = \"Lee Memorial Health System\",                   state = \"FL\",                   prov_type = \"DME\",                   type_code = \"2\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Information clinic group practice revalidation Medicare enrollment.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"","code":"revalidation_group(   npi = NULL,   enroll_id = NULL,   first_name = NULL,   last_name = NULL,   state = NULL,   specialty = NULL,   pac_id_group = NULL,   enroll_id_group = NULL,   business_name = NULL,   state_group = NULL,   record_type = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"npi NPI provider reassigning benefits employee enroll_id Enrollment ID provider reassigning benefits employee first_name First name provider reassigning benefits employee last_name Last name provider reassigning benefits employee state Enrollment state provider reassigning benefits employee specialty Enrollment specialty provider reassigning benefits employee pac_id_group PAC ID provider receiving reassignment employer enroll_id_group Enrollment ID provider receiving reassignment employer business_name Legal business name provider receiving reassignment employer state_group Enrollment state provider receiving reassignment employer record_type Identifies whether record reassignment (Reassignment) employment (Physician Assistant) tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Revalidation Clinic Group Practice Reassignment dataset provides information physician group practice reassign billing . also includes individual employer association counts revalidation dates individual physician well clinic group practice.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Medicare Revalidation Clinic Group Practice Reassignment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"","code":"if (FALSE) { # interactive() revalidation_group(enroll_id = \"I20200929003184\",                    npi = 1962026229,                    first_name = \"Rashadda\",                    last_name = \"Wong\",                    state = \"CT\",                    specialty = \"Physician Assistant\")  revalidation_group(pac_id_group = 9436483807,                    enroll_id_group = \"O20190619002165\",                    business_name = \"1st Call Urgent Care\",                    state_group = \"FL\",                    record_type = \"Reassignment\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Reassignments Providers due Revalidation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"revalidation_reassign(   npi = NULL,   enroll_id = NULL,   first_name = NULL,   last_name = NULL,   state = NULL,   specialty = NULL,   pac_id_group = NULL,   enroll_id_group = NULL,   business_name = NULL,   state_group = NULL,   record_type = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"npi NPI provider reassigning benefits employee enroll_id Enrollment ID provider reassigning benefits employee first_name First name provider reassigning benefits employee last_name Last name provider reassigning benefits employee state Enrollment state provider reassigning benefits employee specialty Enrollment specialty provider reassigning benefits employee pac_id_group PAC ID provider receiving reassignment employer enroll_id_group Enrollment ID provider receiving reassignment employer business_name Legal business name provider receiving reassignment employer state_group Enrollment state provider receiving reassignment employer record_type Identifies whether record reassignment (Reassignment) employment (Physician Assistant) tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Revalidation Reassignment List dataset provides information reassignments providers due revalidation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Medicare Revalidation Reassignment List API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"if (FALSE) { # interactive() revalidation_reassign(enroll_id = \"I20200929003184\",                    npi = 1962026229,                    first_name = \"Rashadda\",                    last_name = \"Wong\",                    state = \"CT\",                    specialty = \"Physician Assistant\")  revalidation_reassign(pac_id_group = 9436483807,                    enroll_id_group = \"O20190619002165\",                    business_name = \"1st Call Urgent Care\",                    state_group = \"FL\",                    record_type = \"Reassignment\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"list type providers suppliers proper taxonomy code eligible medicare programs.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(   taxonomy_code = NULL,   taxonomy_desc = NULL,   specialty_code = NULL,   specialty_desc = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"taxonomy_code taxonomy codes providers use taxonomy_desc description taxonomy providers use specialty_code Code corresponds listed Medicare specialty specialty_desc Description Medicare Provider/Supplier Type tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Medicare Provider Supplier Taxonomy Crosswalk dataset lists providers suppliers eligible enroll Medicare programs proper healthcare provider taxonomy code. data includes Medicare speciality codes, available, provider/supplier type description, taxonomy code, taxonomy description. dataset derived information gathered National Plan Provider Enumerator System (NPPES) Provider Enrollment, Chain Ownership System (PECOS).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Medicare Provider Supplier Taxonomy Crosswalk API Medicare Find Taxonomy Code","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(specialty_code = \"B4[14]\") #> # A tibble: 13 × 4 #>    taxonomy_code taxonomy_desc                     specialty_code specialty_desc #>    <chr>         <chr>                             <chr>          <chr>          #>  1 261QR0400X    Ambulatory Health Care Facilitie… B4[14]         Rehabilitatio… #>  2 335U00000X    Suppliers/Organ Procurement Orga… B4[14]         Organ Procure… #>  3 261QM0801X    Ambulatory Health Care Facilitie… B4[14]         Community Men… #>  4 261QR0401X    Ambulatory Health Care Facilitie… B4[14]         Comprehensive… #>  5 261QE0700X    Ambulatory Health Care Facilitie… B4[14]         End-Stage Ren… #>  6 261QF0400X    Ambulatory Health Care Facilitie… B4[14]         Federally Qua… #>  7 251G00000X    Agencies/Hospice Care Community … B4[14]         Hospice        #>  8 291U00000X    Laboratories/Clinical Medical La… B4[14]         Histocompatib… #>  9 291900000X    Laboratories/Military Clinical M… B4[14]         NA             #> 10 261QR0400X    Ambulatory Health Care Facilitie… B4[14]         Outpatient Ph… #> 11 315D00000X    Nursing & Custodial Care Facilit… B4[14]         Rehabilitatio… #> 12 282J00000X    Hospitals/Religious Non-medical … B4[14]         Religious Non… #> 13 261QR1300X    Ambulatory Health Care Facilitie… B4[14]         Rural Health … taxonomy_crosswalk(specialty_desc = \"Rehabilitation Agency\") #> # A tibble: 2 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 261QR0400X    Ambulatory Health Care Facilities… B4[14]         Rehabilitatio… #> 2 315D00000X    Nursing & Custodial Care Faciliti… B4[14]         Rehabilitatio… taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") #> # A tibble: 1 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 2086S0102X    Allopathic & Osteopathic Physicia… 2              Physician/Gen… taxonomy_crosswalk(taxonomy_desc = \"Agencies/Hospice Care Community Based\") #> # A tibble: 1 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 251G00000X    Agencies/Hospice Care Community B… B4[14]         Hospice"},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009012-2023-03-23","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9012 (2023-03-23)","title":"provider 0.0.0.9012 (2023-03-23)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009011-2023-02-27","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9011 (2023-02-27)","title":"provider 0.0.0.9011 (2023-02-27)","text":"nppes_npi_new implementation","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009010-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9010 (2023-02-08)","title":"provider 0.0.0.9010 (2023-02-08)","text":"added hospital_enrollment() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009009-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9009 (2023-02-08)","title":"provider 0.0.0.9009 (2023-02-08)","text":"implemented cms_update_ids() applicable functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009008-2023-02-07","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9008 (2023-02-07)","title":"provider 0.0.0.9008 (2023-02-07)","text":"added addl_phone_numbers() function added nucc_taxonomy_230 dataset added examples new functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009007-2023-02-04","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9007 (2023-02-04)","title":"provider 0.0.0.9007 (2023-02-04)","text":"doctors_and_clinicians() function facility_affiliations() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009006-2023-02-03","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9006 (2023-02-03)","title":"provider 0.0.0.9006 (2023-02-03)","text":"pending_applications() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009005-2023-01-22","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9005 (2023-01-22)","title":"provider 0.0.0.9005 (2023-01-22)","text":"nesting larger outputs","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009004-2023-01-21","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9004 (2023-01-21)","title":"provider 0.0.0.9004 (2023-01-21)","text":"initial implementation distribution id update functions open_payments() vignette","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009003-2023-01-16","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9003 (2023-01-16)","title":"provider 0.0.0.9003 (2023-01-16)","text":"open_payments() function added","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009002-2023-01-05","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9002 (2023-01-05)","title":"provider 0.0.0.9002 (2023-01-05)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9001 (2022-08-31)","title":"provider 0.0.0.9001 (2022-08-31)","text":"Updated README.","code":""}]
