[{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"missing_information-nppes_npi","dir":"Articles","previous_headings":"","what":"missing_information() != nppes_npi()","title":"CMS Missing Digital Contact Information API","text":"provider appears search results Missing Information API Endpoints entered NPPES NPI Registry.","code":"missing_information(npi = 1144224569) nppes_npi(npi = 1144224569)"},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"nppes_npi-missing_information","dir":"Articles","previous_headings":"","what":"nppes_npi() != missing_information()","title":"CMS Missing Digital Contact Information API","text":"provider Endpoint information NPPES appear Missing Information search results.","code":"nppes_npi(npi = 1144224569) missing_information(npi = 1003000423)"},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"api-data-dictionary","dir":"Articles","previous_headings":"nppes_npi() != missing_information()","what":"API Data Dictionary","title":"CMS Missing Digital Contact Information API","text":"npi provider_name","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"related-links","dir":"Articles","previous_headings":"nppes_npi() != missing_information()","what":"Related Links","title":"CMS Missing Digital Contact Information API","text":"CMS Public Reporting Missing Digital Contact Information Endpoints Information Methodology & Policy","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"applicable-group-purchasing-organization-gpo","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Applicable Group Purchasing Organization (GPO)","title":"CMS Open Payments API","text":"Applicable group purchasing organizations (GPOs) entities operate United States purchase, arrange negotiate purchase covered drugs, devices, biologicals, medical supplies group individuals entities, solely use entity .","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"applicable-manufacturers","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Applicable Manufacturers","title":"CMS Open Payments API","text":"Applicable manufacturers entities operate United States (1) engaged production, preparation, propagation, compounding, conversion covered drug, device, biological, medical supply, covered drug, device, biological medical supply solely use within entity entity’s patients (definition include distributors wholesalers (including, limited , repackagers, relabelers, kit assemblers) hold title covered drug, device, biological medical supply); (2) entities common ownership entity described part (1) definition, provides assistance support entities respect production, preparation, propagation, compounding, conversion, marketing, promotion, sale, distribution covered drug, device, biological medical supply. (See 42 CFR 403.902)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"covered-recipients","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Covered Recipients","title":"CMS Open Payments API","text":"physician, physician assistant, nurse practitioner, clinical nurse specialist, certified registered nurse anesthetist, certified nurse-midwife bona fide employee applicable manufacturer reporting payment; teaching hospital, institution received payment 1886(d)(5)(B), 1886(h), 1886(s) Act last calendar year information available.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"natures-of-payment","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Natures of Payment","title":"CMS Open Payments API","text":"Natures payment categories categories must used describe payment transfer value made (See 42 CFR 403.904(e)(2)). applicable “general” payment type, research ownership. categories : Acquisitions (applicable Program Year 2021 subsequent program years) Charitable contributions Compensation services consulting, including serving faculty speaker event continuing education program Compensation serving faculty speaker accredited certified continuing education program (Applicable Program Years 2013 - 2020) Compensation serving faculty speaker unaccredited non-certified continuing education program (Applicable Program Years 2013 - 2020) Compensation serving faculty speaker medical education program (Applicable beginning Program Year 2021 subsequent program years) Consulting fees Current prospective ownership investment interest (removed starting Program Year 2023) Debt Forgiveness (Applicable beginning Program Year 2021 subsequent program years) Education Entertainment Food beverage Gift Grant Honoraria Long-term medical supply device loan (Applicable beginning Program Year 2021 subsequent program years) Royalty license Space rental facility fees (teaching hospitals ) Travel lodging","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"national-provider-identifier-npi","dir":"Articles","previous_headings":"Open Payments Glossary","what":"National Provider Identifier (NPI)","title":"CMS Open Payments API","text":"NPI unique identification number covered health care providers. NPI 10-position numeric identifier, check digit 10th position intelligence health care provider number. (See 45 CFR 162.406)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"newly-added-covered-recipients","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Newly Added Covered Recipients","title":"CMS Open Payments API","text":"Open Payments expanded January 2021 include five new provider types: Physician Assistants: physician assistant performs services individual legally authorized perform (State individual performs services) accordance State law (State regulatory mechanism provided State law), meets training, education, experience requirements (combination thereof) Secretary may prescribe regulations. Nurse Practitioners: nurse practitioner performs services individual legally authorized perform (State individual performs services) accordance State law (State regulatory mechanism provided State law), meets training, education, experience requirements (combination thereof) Secretary may prescribe regulations. Clinical Nurse Specialists: individual registered nurse licensed practice nursing State clinical nurse specialist services performed; holds master’s degree defined clinical area nursing accredited educational institution. Certified Registered Nurse Anesthetists: certified registered nurse anesthetist licensed State meets education, training, requirements relating anesthesia services related care Secretary may prescribe. prescribing requirements Secretary may use requirements established national organization certification nurse anesthetists. term also includes, prescribed Secretary, Anesthesiologist Assistant. Certified Nurse-Midwives: registered nurse successfully completed program study clinical experience meeting guidelines prescribed Secretary, certified organization recognized Secretary.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"non-physician-practitioner-covered-recipient","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Non-Physician Practitioner Covered Recipient","title":"CMS Open Payments API","text":"Health care providers practice either collaboration supervision physician, including physician assistants, nurse practitioners, clinical nurse specialists, referred non-physician practitioners (NPPs).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"ownership-or-investment-interest","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Ownership or Investment Interest","title":"CMS Open Payments API","text":"Ownership investment interest includes, limited : Stock Stock option(s) (received compensation, exercised) Partnership share(s) Limited liability company membership(s) Loans Bonds financial instruments secured entity’s property revenue portion property revenue may direct indirect debt, equity means (See 42 CFR 403.902). Please note exceptions definition.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"physician","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Physician","title":"CMS Open Payments API","text":"purposes Open Payments, “physician” following types professionals legally authorized state practice, regardless whether Medicare, Medicaid, Children’s health Insurance Program (CHIP) providers: Doctors Medicine Osteopathic Medicine Doctors Dental Medicine Dental Surgery Doctors Podiatric Medicine Doctors Optometry Chiropractors Note: Medical residents excluded definition physicians purpose program.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"reporting-entities","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Reporting Entities","title":"CMS Open Payments API","text":"Reporting entities applicable manufacturers applicable GPOs.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"research","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Research","title":"CMS Open Payments API","text":"Research systematic investigation develop contribute generalized knowledge public health, including behavioral social-sciences research. definition includes basic applied research, product development. (See 42 CFR 403.902)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"teaching-hospital","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Teaching Hospital","title":"CMS Open Payments API","text":"Teaching hospitals hospitals receive payment Medicare direct graduate medical education (GME), IPPS indirect medical education (IME), psychiatric hospital IME programs last calendar year information available. (See 42 CFR 403.902) purposes Open Payments, “teaching hospitals” hospitals received payment Medicare direct graduate medical education (GME), inpatient prospective payment system (IPPS) indirect medical education (IME), psychiatric hospital IME programs last calendar year information available.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"third-parties","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Third Parties","title":"CMS Open Payments API","text":"Third parties individuals entities, whether operate United States.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"transfers-of-value","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Transfers of Value","title":"CMS Open Payments API","text":"Payments transfers value anything value given applicable manufacturer applicable GPO covered recipient physician owner/investor fall within one excluded categories rule. (See 42 CFR 403.902)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"CMS Open Payments API","text":"","code":"open_payments(recipient_npi = 1043218118, year = 2020) #> # A tibble: 73 × 14 #>    program…¹ recor…² chang…³ total…⁴ date_of_payment     form_…⁵ natur…⁶ recor…⁷ #>    <chr>     <chr>   <chr>     <dbl> <dttm>              <chr>   <chr>   <chr>   #>  1 2020      9248756 UNCHAN…    24.8 2020-05-07 00:00:00 Cash o… Food a… 728240… #>  2 2020      9248761 UNCHAN…    24.2 2020-10-01 00:00:00 Cash o… Food a… 728240… #>  3 2020      9248766 UNCHAN…    17.8 2020-01-24 00:00:00 Cash o… Food a… 728240… #>  4 2020      9248771 UNCHAN…    17.4 2020-12-15 00:00:00 Cash o… Food a… 728240… #>  5 2020      9248776 UNCHAN…    15.8 2020-01-13 00:00:00 Cash o… Food a… 728240… #>  6 2020      101705… UNCHAN…  3750   2020-02-12 00:00:00 Cash o… Consul… 723513… #>  7 2020      101705… UNCHAN…   139.  2020-01-30 00:00:00 In-kin… Food a… 723513… #>  8 2020      101705… UNCHAN…    16.7 2020-02-05 00:00:00 In-kin… Food a… 723513… #>  9 2020      101705… UNCHAN…   109.  2020-02-06 00:00:00 In-kin… Food a… 723513… #> 10 2020      101706… UNCHAN…   351.  2020-02-12 00:00:00 In-kin… Travel… 723513… #> # … with 63 more rows, 6 more variables: covered_recipient <list>, #> #   recipient_address <list>, applicable_mfg_gpo <list>, #> #   associated_drug_device <list>, payment_related_data <list>, #> #   teaching_hospital <list>, and abbreviated variable names ¹​program_year, #> #   ²​record_number, ³​change_type, ⁴​total_amount_of_payment_usdollars, #> #   ⁵​form_of_payment_or_transfer_of_value, #> #   ⁶​nature_of_payment_or_transfer_of_value, ⁷​record_id open_payments(recipient_npi = 1043218118, year = 2019) #> # A tibble: 68 × 14 #>    program…¹ recor…² chang…³ total…⁴ date_of_payment     form_…⁵ natur…⁶ recor…⁷ #>    <chr>     <chr>   <chr>     <dbl> <dttm>              <chr>   <chr>   <chr>   #>  1 2019      149684… UNCHAN…    23.1 2019-02-27 00:00:00 In-kin… Food a… 684452… #>  2 2019      149684… UNCHAN…    13.1 2019-01-02 00:00:00 In-kin… Food a… 684452… #>  3 2019      149684… UNCHAN…    66.6 2019-04-08 00:00:00 In-kin… Food a… 684452… #>  4 2019      149684… UNCHAN…    19.2 2019-05-28 00:00:00 In-kin… Food a… 684452… #>  5 2019      149684… UNCHAN…   130.  2019-06-17 00:00:00 In-kin… Food a… 684452… #>  6 2019      149684… UNCHAN…    90.8 2019-06-20 00:00:00 In-kin… Food a… 684452… #>  7 2019      149684… UNCHAN…    85.2 2019-08-19 00:00:00 In-kin… Food a… 684452… #>  8 2019      149684… UNCHAN…    18.4 2019-08-20 00:00:00 In-kin… Food a… 684452… #>  9 2019      149684… UNCHAN…  2100   2019-09-25 00:00:00 Cash o… Compen… 684452… #> 10 2019      149684… UNCHAN…   628.  2019-09-04 00:00:00 Cash o… Travel… 684452… #> # … with 58 more rows, 6 more variables: covered_recipient <list>, #> #   recipient_address <list>, applicable_mfg_gpo <list>, #> #   associated_drug_device <list>, payment_related_data <list>, #> #   teaching_hospital <list>, and abbreviated variable names ¹​program_year, #> #   ²​record_number, ³​change_type, ⁴​total_amount_of_payment_usdollars, #> #   ⁵​form_of_payment_or_transfer_of_value, #> #   ⁶​nature_of_payment_or_transfer_of_value, ⁷​record_id open_payments(recipient_city = \"Jacksonville\", recipient_state = \"FL\") #> # A tibble: 500 × 14 #>    program…¹ recor…² chang…³ total…⁴ date_of_payment     form_…⁵ natur…⁶ recor…⁷ #>    <chr>     <chr>   <chr>     <dbl> <dttm>              <chr>   <chr>   <chr>   #>  1 2021      5641    UNCHAN…    60   2021-07-15 00:00:00 Cash o… Food a… 760884… #>  2 2021      10276   UNCHAN…    14.6 2021-11-18 00:00:00 In-kin… Food a… 754276… #>  3 2021      14066   UNCHAN…   518.  2021-06-29 00:00:00 Cash o… Food a… 765543… #>  4 2021      20421   UNCHAN…   203.  2021-09-21 00:00:00 Cash o… Food a… 764406… #>  5 2021      20431   UNCHAN…   119.  2021-05-13 00:00:00 Cash o… Food a… 764406… #>  6 2021      20436   UNCHAN…  1000   2021-10-13 00:00:00 Cash o… Consul… 764406… #>  7 2021      20441   UNCHAN…  1626.  2021-02-08 00:00:00 Cash o… Royalt… 764406… #>  8 2021      20446   UNCHAN…    27.3 2021-03-12 00:00:00 Cash o… Royalt… 764406… #>  9 2021      20451   UNCHAN…  2119.  2021-05-13 00:00:00 Cash o… Royalt… 764406… #> 10 2021      20456   UNCHAN…  2301.  2021-08-12 00:00:00 Cash o… Royalt… 764406… #> # … with 490 more rows, 6 more variables: covered_recipient <list>, #> #   recipient_address <list>, applicable_mfg_gpo <list>, #> #   associated_drug_device <list>, payment_related_data <list>, #> #   teaching_hospital <list>, and abbreviated variable names ¹​program_year, #> #   ²​record_number, ³​change_type, ⁴​total_amount_of_payment_usdollars, #> #   ⁵​form_of_payment_or_transfer_of_value, #> #   ⁶​nature_of_payment_or_transfer_of_value, ⁷​record_id open_payments(manufacturer_gpo_id = 100000151589, offset = 0) #> # A tibble: 500 × 14 #>    program…¹ recor…² chang…³ total…⁴ date_of_payment     form_…⁵ natur…⁶ recor…⁷ #>    <chr>     <chr>   <chr>     <dbl> <dttm>              <chr>   <chr>   <chr>   #>  1 2021      552484… UNCHAN…    49.0 2021-08-18 00:00:00 In-kin… Food a… 851851… #>  2 2021      552484… UNCHAN…    17.8 2021-04-16 00:00:00 In-kin… Food a… 851851… #>  3 2021      552484… UNCHAN…    34.4 2021-02-04 00:00:00 In-kin… Food a… 851851… #>  4 2021      552484… UNCHAN…   750   2021-10-21 00:00:00 Cash o… Compen… 851851… #>  5 2021      552484… UNCHAN…    20.4 2021-11-29 00:00:00 In-kin… Food a… 851851… #>  6 2021      552484… UNCHAN…    16.8 2021-02-22 00:00:00 In-kin… Food a… 851851… #>  7 2021      552485… UNCHAN…    17   2021-09-22 00:00:00 In-kin… Food a… 851851… #>  8 2021      552485… UNCHAN…    16.8 2021-10-18 00:00:00 In-kin… Food a… 851851… #>  9 2021      552485… UNCHAN…    13.9 2021-12-08 00:00:00 In-kin… Food a… 851851… #> 10 2021      552485… UNCHAN…    14.5 2021-04-01 00:00:00 In-kin… Food a… 851851… #> # … with 490 more rows, 6 more variables: covered_recipient <list>, #> #   recipient_address <list>, applicable_mfg_gpo <list>, #> #   associated_drug_device <list>, payment_related_data <list>, #> #   teaching_hospital <list>, and abbreviated variable names ¹​program_year, #> #   ²​record_number, ³​change_type, ⁴​total_amount_of_payment_usdollars, #> #   ⁵​form_of_payment_or_transfer_of_value, #> #   ⁶​nature_of_payment_or_transfer_of_value, ⁷​record_id open_payments(manufacturer_gpo_id = 100000151589, offset = 500) #> # A tibble: 500 × 14 #>    program…¹ recor…² chang…³ total…⁴ date_of_payment     form_…⁵ natur…⁶ recor…⁷ #>    <chr>     <chr>   <chr>     <dbl> <dttm>              <chr>   <chr>   <chr>   #>  1 2021      552535… UNCHAN…  125    2021-06-30 00:00:00 In-kin… Food a… 851852… #>  2 2021      552535… UNCHAN…   21.6  2021-03-19 00:00:00 In-kin… Food a… 851852… #>  3 2021      552535… UNCHAN…   23.2  2021-02-12 00:00:00 In-kin… Food a… 851852… #>  4 2021      552535… UNCHAN…   18.0  2021-06-21 00:00:00 In-kin… Food a… 851852… #>  5 2021      552535… UNCHAN…   12.2  2021-08-24 00:00:00 In-kin… Food a… 851852… #>  6 2021      552535… UNCHAN…    4.16 2021-10-01 00:00:00 In-kin… Food a… 851852… #>  7 2021      552535… UNCHAN…    5.98 2021-10-01 00:00:00 In-kin… Food a… 851852… #>  8 2021      552535… UNCHAN…   12.4  2021-10-14 00:00:00 In-kin… Food a… 851852… #>  9 2021      552536… UNCHAN…   22.2  2021-09-03 00:00:00 In-kin… Food a… 851852… #> 10 2021      552536… UNCHAN…    4.9  2021-10-29 00:00:00 In-kin… Food a… 851852… #> # … with 490 more rows, 6 more variables: covered_recipient <list>, #> #   recipient_address <list>, applicable_mfg_gpo <list>, #> #   associated_drug_device <list>, payment_related_data <list>, #> #   teaching_hospital <list>, and abbreviated variable names ¹​program_year, #> #   ²​record_number, ³​change_type, ⁴​total_amount_of_payment_usdollars, #> #   ⁵​form_of_payment_or_transfer_of_value, #> #   ⁶​nature_of_payment_or_transfer_of_value, ⁷​record_id open_payments(manufacturer_gpo_id = 100000151589, year = 2020) #> # A tibble: 500 × 14 #>    program…¹ recor…² chang…³ total…⁴ date_of_payment     form_…⁵ natur…⁶ recor…⁷ #>    <chr>     <chr>   <chr>     <dbl> <dttm>              <chr>   <chr>   <chr>   #>  1 2020      9340966 UNCHAN…   8053. 2020-01-14 00:00:00 In-kin… Compen… 728277… #>  2 2020      9341906 UNCHAN…   8053. 2020-01-14 00:00:00 In-kin… Compen… 728277… #>  3 2020      9240916 UNCHAN…   9462  2020-11-25 00:00:00 In-kin… Compen… 728237… #>  4 2020      9298051 UNCHAN…  20000  2020-08-26 00:00:00 In-kin… Compen… 728260… #>  5 2020      9270451 UNCHAN…   8460  2020-12-02 00:00:00 In-kin… Compen… 728249… #>  6 2020      9240931 UNCHAN…  12500  2020-01-14 00:00:00 In-kin… Compen… 728237… #>  7 2020      9325281 UNCHAN…  12500  2020-01-14 00:00:00 In-kin… Compen… 728271… #>  8 2020      9276031 UNCHAN…   1250  2020-08-03 00:00:00 In-kin… Compen… 728251… #>  9 2020      9243621 UNCHAN…   8053. 2020-01-14 00:00:00 In-kin… Compen… 728238… #> 10 2020      9248981 UNCHAN…   8053. 2020-01-14 00:00:00 In-kin… Compen… 728240… #> # … with 490 more rows, 6 more variables: covered_recipient <list>, #> #   recipient_address <list>, applicable_mfg_gpo <list>, #> #   associated_drug_device <list>, payment_related_data <list>, #> #   teaching_hospital <list>, and abbreviated variable names ¹​program_year, #> #   ²​record_number, ³​change_type, ⁴​total_amount_of_payment_usdollars, #> #   ⁵​form_of_payment_or_transfer_of_value, #> #   ⁶​nature_of_payment_or_transfer_of_value, ⁷​record_id open_payments(manufacturer_gpo_id = \"100000151589\", year = 2019) #> # A tibble: 500 × 14 #>    program…¹ recor…² chang…³ total…⁴ date_of_payment     form_…⁵ natur…⁶ recor…⁷ #>    <chr>     <chr>   <chr>     <dbl> <dttm>              <chr>   <chr>   <chr>   #>  1 2019      452572… UNCHAN…   4902  2019-11-14 00:00:00 In-kin… Compen… 705033… #>  2 2019      452571… UNCHAN…   2399. 2019-05-06 00:00:00 In-kin… Compen… 705175… #>  3 2019      452572… UNCHAN…   1750  2019-06-26 00:00:00 In-kin… Compen… 705186… #>  4 2019      452572… UNCHAN…  11783  2019-05-03 00:00:00 In-kin… Compen… 704986… #>  5 2019      452571… UNCHAN…  11783  2019-05-03 00:00:00 In-kin… Compen… 704993… #>  6 2019      452571… UNCHAN…   4902  2019-11-14 00:00:00 In-kin… Compen… 705040… #>  7 2019      452572… UNCHAN…   4902  2019-11-14 00:00:00 In-kin… Compen… 705044… #>  8 2019      452571… UNCHAN…   2399. 2019-05-06 00:00:00 In-kin… Compen… 705041… #>  9 2019      452572… UNCHAN…   2399. 2019-05-06 00:00:00 In-kin… Compen… 705175… #> 10 2019      452572… UNCHAN…   4902  2019-11-14 00:00:00 In-kin… Compen… 705074… #> # … with 490 more rows, 6 more variables: covered_recipient <list>, #> #   recipient_address <list>, applicable_mfg_gpo <list>, #> #   associated_drug_device <list>, payment_related_data <list>, #> #   teaching_hospital <list>, and abbreviated variable names ¹​program_year, #> #   ²​record_number, ³​change_type, ⁴​total_amount_of_payment_usdollars, #> #   ⁵​form_of_payment_or_transfer_of_value, #> #   ⁶​nature_of_payment_or_transfer_of_value, ⁷​record_id open_payments(recipient_npi = 1346540572) #> # A tibble: 20 × 14 #>    program…¹ recor…² chang…³ total…⁴ date_of_payment     form_…⁵ natur…⁶ recor…⁷ #>    <chr>     <chr>   <chr>     <dbl> <dttm>              <chr>   <chr>   <chr>   #>  1 2021      11156   UNCHAN…   12.1  2021-04-06 00:00:00 In-kin… Food a… 754276… #>  2 2021      160150… UNCHAN…   15.4  2021-06-15 00:00:00 In-kin… Food a… 837222… #>  3 2021      174813… UNCHAN…    9.31 2021-03-23 00:00:00 In-kin… Food a… 794537… #>  4 2021      174813… UNCHAN…   17.9  2021-01-21 00:00:00 In-kin… Food a… 794537… #>  5 2021      174813… UNCHAN…   13.8  2021-05-18 00:00:00 In-kin… Food a… 794537… #>  6 2021      174813… UNCHAN…    4.75 2021-06-14 00:00:00 In-kin… Food a… 794537… #>  7 2021      174813… UNCHAN…    8.11 2021-06-15 00:00:00 In-kin… Food a… 794537… #>  8 2021      174813… UNCHAN…    6.67 2021-06-24 00:00:00 In-kin… Food a… 794537… #>  9 2021      174813… UNCHAN…   14.8  2021-08-12 00:00:00 In-kin… Food a… 794537… #> 10 2021      174814… UNCHAN…   20.7  2021-10-06 00:00:00 In-kin… Food a… 794537… #> 11 2021      174814… UNCHAN…   22.3  2021-11-10 00:00:00 In-kin… Food a… 794537… #> 12 2021      174814… UNCHAN…   19.2  2021-12-08 00:00:00 In-kin… Food a… 794537… #> 13 2021      328432… UNCHAN…   30.0  2021-12-15 00:00:00 In-kin… Food a… 844310… #> 14 2021      376262… UNCHAN…   13.9  2021-03-09 00:00:00 In-kin… Food a… 844950… #> 15 2021      376262… UNCHAN…   13.7  2021-11-03 00:00:00 In-kin… Food a… 844950… #> 16 2021      376262… UNCHAN…   12.0  2021-07-14 00:00:00 In-kin… Food a… 844950… #> 17 2021      378730… UNCHAN…   16.4  2021-03-09 00:00:00 In-kin… Food a… 806186… #> 18 2021      404569… UNCHAN…   13.3  2021-03-24 00:00:00 In-kin… Food a… 845424… #> 19 2021      563146… UNCHAN…   17.0  2021-10-13 00:00:00 In-kin… Food a… 855178… #> 20 2021      568814… CHANGED   14.8  2021-03-31 00:00:00 In-kin… Food a… 783379… #> # … with 6 more variables: covered_recipient <list>, recipient_address <list>, #> #   applicable_mfg_gpo <list>, associated_drug_device <list>, #> #   payment_related_data <list>, teaching_hospital <list>, and abbreviated #> #   variable names ¹​program_year, ²​record_number, ³​change_type, #> #   ⁴​total_amount_of_payment_usdollars, ⁵​form_of_payment_or_transfer_of_value, #> #   ⁶​nature_of_payment_or_transfer_of_value, ⁷​record_id"},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"related-links","dir":"Articles","previous_headings":"Examples","what":"Related Links","title":"CMS Open Payments API","text":"Natures Payment Law Policy Audits Penalties Reporting Entities Open Payments: General Resources","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/geocoding.html","id":"providers-current-practice-address","dir":"Articles","previous_headings":"","what":"Provider’s Current Practice Address","title":"Healthcare Providers: Why Geocode?","text":"","code":"geo_nppes <- nppes_npi(npi = 1760485387)  geo_nppes #> # A tibble: 1 × 15 #>   datetime            outcome enumera…¹ number name  city  state addre…² pract…³ #>   <dttm>              <chr>   <chr>     <chr>  <chr> <chr> <chr> <list>  <list>  #> 1 2023-02-08 18:16:00 results NPI-1     17604… PAUL… MOOS… MN    <df>    <list>  #> # … with 6 more variables: taxonomies <list>, identifiers <list>, #> #   endpoints <list>, other_names <list>, epochs <list>, basic <list>, and #> #   abbreviated variable names ¹​enumeration_type, ²​addresses, #> #   ³​practiceLocations geo_add <- geo_nppes |>    dplyr::select(address_1, city, state, postal_code) |>   dplyr::filter(dplyr::row_number() %in% 1) |>    dplyr::mutate(address_1 = stringr::str_remove_all(address_1, \"\\\\.\")) #> Error in `dplyr::select()`: #> ! Can't subset columns that don't exist. #> ✖ Column `address_1` doesn't exist.  geo_add #> Error in eval(expr, envir, enclos): object 'geo_add' not found geo_ltlg <- geo_add |> tidygeocoder::geocode(street = address_1,                                              city = city,                                              state = state,                                              postalcode = postal_code,                                              method = \"census\",                                              lat = latitude,                                               long = longitude,                                               full_results = TRUE) #> Error in is.data.frame(.tbl): object 'geo_add' not found geo_ltlg #> Error in eval(expr, envir, enclos): object 'geo_ltlg' not found leaflet::leaflet() |>    leaflet::addTiles() |>    leaflet::addMarkers(lng = geo_ltlg$longitude,                        lat = geo_ltlg$latitude) #> Error in resolveFormula(lng, data): object 'geo_ltlg' not found"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"medicare-multiple-chronic-conditions-api","dir":"Articles","previous_headings":"","what":"Medicare Multiple Chronic Conditions API","title":"Medicare Chronic Conditions APIs","text":"Multiple Chronic Conditions dataset provides information number chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories (0-1, 2-3, 4-5 6 ).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"examples","dir":"Articles","previous_headings":"Medicare Multiple Chronic Conditions API","what":"Examples","title":"Medicare Chronic Conditions APIs","text":"","code":"cc_multiple(year = 2018,              geo_lvl = \"State\",              geo_desc = \"California\") |>    dplyr::select(!c(bene_geo_lvl, bene_geo_cd)) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() cc_multiple(year = 2007,              geo_lvl = \"National\",              demo_lvl = \"Race\") |>    dplyr::select(!c(bene_geo_desc, bene_geo_cd)) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider()"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"medicare-specific-chronic-conditions-api","dir":"Articles","previous_headings":"","what":"Medicare Specific Chronic Conditions API","title":"Medicare Chronic Conditions APIs","text":"Select Chronic Conditions dataset provides information 21 selected chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography distinct chronic conditions listed . Alcohol Abuse Drug Abuse / Substance Abuse Alzheimer’s Disease Related Dementia Arthritis (Osteoarthritis Rheumatoid) Asthma Atrial Fibrillation Autism Spectrum Disorders Cancer (Breast, Colorectal, Lung, Prostate) Chronic Kidney Disease Chronic Obstructive Pulmonary Disease Depression Diabetes Drug Abuse / Substance Abuse Heart Failure Hepatitis (Chronic Viral B & C) HIV/AIDS Hyperlipidemia (High cholesterol) Hypertension (High blood pressure) Ischemic Heart Disease Osteoporosis Schizophrenia Psychotic Disorders Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"examples-1","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Examples","title":"Medicare Chronic Conditions APIs","text":"","code":"cc_specific(year = 2018,              geo_lvl = \"State\",              geo_desc = \"California\") |>    dplyr::select(!c(bene_geo_lvl, bene_geo_cd)) |>    dplyr::arrange(dplyr::desc(bene_age_lvl), bene_demo_lvl) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() cc_specific(year = 2007,              geo_lvl = \"National\",              demo_lvl = \"Race\") |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider()"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"data-dictionary","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Data Dictionary","title":"Medicare Chronic Conditions APIs","text":"Bene_Geo_Lvl Beneficiary Geographic Level Bene_Geo_Desc Beneficiary Geographic Description Bene_Geo_Cd Beneficiary Geographic Code Bene_Age_Lvl Beneficiary Age Level Bene_Demo_Lvl Beneficiary Demographic Level Bene_Demo_Desc Beneficiary Demographic Description Bene_MCC Beneficiary Chronic Condition Bene_Cond Beneficiary Multiple Chronic Condition Group Prvlnc Prevalence Tot_Mdcr_Stdzd_Pymt_PC1 Total Medicare Standardized Per Capita Spending Tot_Mdcr_Pymt_PC1 Total Medicare Per Capita Spending Hosp_Readmsn_Rate1 Hospital Readmission Rate ER_Visits_Per_1000_Benes1 Emergency Room Visits per 1,000 Beneficiaries","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"related-links","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Related Links","title":"Medicare Chronic Conditions APIs","text":"Medicare Multiple Chronic Conditions API Medicare Specific Chronic Conditions API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Medicare Public Provider Enrollment API","text":"","code":"provider_enrollment(npi = 1003026055) |> terse::terse() #> $npi                c1 1003026055                   #> $pecos_asct_cntl_id c1 4486827367                   #> $enrlmt_id          c1 I20170403002190              #> $provider_type_cd   c1 14-46                        #> $provider_type_desc c1 PRACTITIONER - ENDOCRINOLOGY #> $state_cd           c1 FL                           #> $first_name         c1 RADHIKA                      #> $mdl_name           c1 PUSHKAR                      #> $last_name          c1 PHADKE                       #> $org_name           c1 NA                           #> $gndr_sw            c1 F"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"data-dictionary","dir":"Articles","previous_headings":"Example","what":"Data Dictionary","title":"Medicare Public Provider Enrollment API","text":"npi pecos_asct_cntl_id enrlmt_id provider_type_cd provider_type_desc state_cd first_name mdl_name last_name org_name gndr_sw reasgn_bnft_enrlmt_id rcv_bnft_enrlmt_id city_name zip_cd","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"provider-type-code-list","dir":"Articles","previous_headings":"Example > Data Dictionary","what":"Provider Type Code List","title":"Medicare Public Provider Enrollment API","text":"00-00 00-01 00-02 00-03 00-04 00-05 00-06 00-07 00-08 00-09 00-10 00-13 00-14 00-17 00-18 00-19 00-85 12-23 12-31 12-45 12-47 12-49 12-59 12-60 12-61 12-63 12-65 12-69 12-70 12-73 12-74 12-75 12-87 12-C0 12-C1 12-Z1 12-Z3 12-Z4 12-Z5 14-01 14-02 14-03 14-04 14-05 14-06 14-07 14-08 14-09 14-10 14-11 14-12 14-13 14-14 14-15 14-16 14-17 14-18 14-19 14-20 14-21 14-22 14-23 14-24 14-25 14-26 14-27 14-28 14-29 14-30 14-32 14-33 14-34 14-35 14-36 14-37 14-38 14-39 14-40 14-41 14-42 14-43 14-44 14-46 14-48 14-50 14-62 14-64 14-65 14-66 14-67 14-68 14-70 14-71 14-72 14-73 14-76 14-77 14-78 14-79 14-80 14-81 14-82 14-83 14-84 14-85 14-86 14-88 14-89 14-90 14-91 14-92 14-93 14-94 14-97 14-98 14-99 14-99 14-C0 14-C3 30-01 30-02 30-03 30-04 30-05 30-06 30-07 30-08 30-11 30-12 30-13 30-14 30-16 30-18 30-19 30-20 30-23 30-24 30-25 30-26 30-29 30-30 30-34 30-35 30-37 30-38 30-40 30-41 30-44 30-46 30-48 30-49 30-50 30-51 30-52 30-53 30-54 30-55 30-56 30-57 30-58 30-59 30-61 30-63 30-64 30-65 30-66 30-67 30-70 30-72 30-76 30-77 30-79 30-82 30-83 30-84 30-85 30-87 30-88 30-89 30-90 30-91 30-92 30-93 30-94 30-95 30-96 30-97 30-99 30-A0 30-A1 30-A2 30-A3 30-A4 30-A5 30-A6 30-A7 30-A8 30-A9 30-B1 30-B2 30-B3 30-B4 30-B5 30-C0 33-01 33-02 33-03 33-04 33-05 33-06 33-07 33-08 33-09 33-10 33-11 33-12 33-13 33-14 33-16 33-17 33-18 33-19 33-20 33-21 33-22 33-23 33-24 33-25 33-26 33-27 33-28 33-29 33-30 33-33 33-34 33-35 33-36 33-37 33-38 33-39 33-40 33-41 33-42 33-43 33-44 33-46 33-48 33-50 33-62 33-66 33-68 33-71 33-72 33-76 33-77 33-78 33-79 33-80 33-81 33-82 33-83 33-84 33-85 33-86 33-88 33-89 33-90 33-91 33-92 33-93 33-94 33-97 33-98 33-99 33-C0 33-C3 53-D1","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"related-links","dir":"Articles","previous_headings":"Example","what":"Related Links","title":"Medicare Public Provider Enrollment API","text":"Medicare Fee--Service Public Provider Enrollment API Medicare Fee--Service Public Provider Enrollment - Data Dictionary Fee--Service Public Provider Enrollment Methodology","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Medicare Monthly Enrollment API","text":"","code":"beneficiary_enrollment(year = 2018,                        month = \"Year\",                        geo_level = \"County\",                        state_abb = \"AL\",                        county = \"Autauga\") |> terse::terse() #> $year                           i1 2018    #> $month                          c1 Year    #> $bene_geo_lvl                   c1 County  #> $bene_state_abrvtn              c1 AL      #> $bene_state_desc                c1 Alabama #> $bene_county_desc               c1 Autauga #> $bene_fips_cd                   c1 01001   #> $tot_benes                      i1 10645   #> $orgnl_mdcr_benes               i1 5700    #> $ma_and_oth_benes               i1 4945    #> $aged_tot_benes                 i1 8241    #> $aged_esrd_benes                i1 53      #> $aged_no_esrd_benes             i1 8189    #> $dsbld_tot_benes                i1 2403    #> $dsbld_esrd_and_esrd_only_benes i1 50      #> $dsbld_no_esrd_benes            i1 2353    #> $a_b_tot_benes                  i1 9892    #> $a_b_orgnl_mdcr_benes           i1 4948    #> $a_b_ma_and_oth_benes           i1 4944    #> $prscrptn_drug_tot_benes        i1 7088    #> $prscrptn_drug_pdp_benes        i1 2260    #> $prscrptn_drug_mapd_benes       i1 4828 beneficiary_enrollment(year = 2021,                        geo_level = \"County\",                        fips = \"01001\") |> terse::terse() #> $year                           i1 2021    #> $month                          c1 Year    #> $bene_geo_lvl                   c1 County  #> $bene_state_abrvtn              c1 AL      #> $bene_state_desc                c1 Alabama #> $bene_county_desc               c1 Autauga #> $bene_fips_cd                   c1 01001   #> $tot_benes                      i1 11398   #> $orgnl_mdcr_benes               i1 5339    #> $ma_and_oth_benes               i1 6059    #> $aged_tot_benes                 i1 9031    #> $aged_esrd_benes                i1 56      #> $aged_no_esrd_benes             i1 8975    #> $dsbld_tot_benes                i1 2367    #> $dsbld_esrd_and_esrd_only_benes i1 49      #> $dsbld_no_esrd_benes            i1 2318    #> $a_b_tot_benes                  i1 10557   #> $a_b_orgnl_mdcr_benes           i1 4501    #> $a_b_ma_and_oth_benes           i1 6057    #> $prscrptn_drug_tot_benes        i1 7838    #> $prscrptn_drug_pdp_benes        i1 1931    #> $prscrptn_drug_mapd_benes       i1 5907 beneficiary_enrollment(year = 2022,                        month = \"July\",                        geo_level = \"State\",                        state = \"Georgia\") |> terse::terse() #> $year                           i1 2022    #> $month                          c1 July    #> $bene_geo_lvl                   c1 State   #> $bene_state_abrvtn              c1 GA      #> $bene_state_desc                c1 Georgia #> $bene_county_desc               c1 Total   #> $bene_fips_cd                   c1 13      #> $tot_benes                      i1 1840128 #> $orgnl_mdcr_benes               i1 907070  #> $ma_and_oth_benes               i1 933058  #> $aged_tot_benes                 i1 1578129 #> $aged_esrd_benes                i1 10368   #> $aged_no_esrd_benes             i1 1567761 #> $dsbld_tot_benes                i1 261999  #> $dsbld_esrd_and_esrd_only_benes i1 11713   #> $dsbld_no_esrd_benes            i1 250286  #> $a_b_tot_benes                  i1 1696372 #> $a_b_orgnl_mdcr_benes           i1 764122  #> $a_b_ma_and_oth_benes           i1 932250  #> $prscrptn_drug_tot_benes        i1 1422171 #> $prscrptn_drug_pdp_benes        i1 533004  #> $prscrptn_drug_mapd_benes       i1 889167 beneficiary_enrollment(year = 2017,                        geo_level = \"State\",                        fips = \"10\") |> terse::terse() #> $year                           i1 2017     #> $month                          c1 Year     #> $bene_geo_lvl                   c1 State    #> $bene_state_abrvtn              c1 DE       #> $bene_state_desc                c1 Delaware #> $bene_county_desc               c1 Total    #> $bene_fips_cd                   c1 10       #> $tot_benes                      i1 193585   #> $orgnl_mdcr_benes               i1 171150   #> $ma_and_oth_benes               i1 22435    #> $aged_tot_benes                 i1 166603   #> $aged_esrd_benes                i1 949      #> $aged_no_esrd_benes             i1 165654   #> $dsbld_tot_benes                i1 26982    #> $dsbld_esrd_and_esrd_only_benes i1 853      #> $dsbld_no_esrd_benes            i1 26129    #> $a_b_tot_benes                  i1 179142   #> $a_b_orgnl_mdcr_benes           i1 156719   #> $a_b_ma_and_oth_benes           i1 22423    #> $prscrptn_drug_tot_benes        i1 143495   #> $prscrptn_drug_pdp_benes        i1 125925   #> $prscrptn_drug_mapd_benes       i1 17571"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"Medicare Monthly Enrollment API","text":"Year Month Bene_State Bene_County Tot_Benes Orgnl_Mdcr_Benes MA_and_Oth_Benes Aged_Tot_Benes Aged_ESRD_Benes Aged_No_ESRD_Benes Dsbld_Tot_Benes Dsbld_ESRD_and_ESRD_Only_Benes Dsbld_No_ESRD_Benes A_B_Tot_Benes A_B_Orgnl_Mdcr_Benes A_B_MA_and_Oth_Benes Prscrptn_Drug_Tot_Benes Prscrptn_Drug_PDP_Benes Prscrptn_Drug_MAPD_Benes","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"Medicare Monthly Enrollment API","text":"Medicare Monthly Enrollment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Medicare Opt Out Affidavits API","text":"","code":"opt_out(last = \"Aaron\") |> terse::terse() #> $first_name                  c1 Sheryl                 #> $last_name                   c1 Aaron                  #> $npi                         c1 1427358282             #> $specialty                   c1 Clinical Social Worker #> $optout_effective_date       p1 2022-02-17             #> $optout_end_date             p1 2024-02-17             #> $first_line_street_address   c1 1633 Q ST NW           #> $second_line_street_address  c1 STE 230                #> $city_name                   c1 WASHINGTON             #> $state_code                  c1 DC                     #> $zip_code                    c1 200096351              #> $eligible_to_order_and_refer l1 F                      #> $last_updated                p1 2022-12-15 opt_out(specialty = \"Psychiatry\", zip = \"07626\") |> terse::terse() #> $first_name                  c3 Laura          , Ruchi          , Sireesha  ... #> $last_name                   c3 Brenner        , Nadella        , Jathaveda ... #> $npi                         c3 1235359019     , 1356579841     , 150802392 ... #> $specialty                   c3 Psychiatry     , Psychiatry     , Psychiatr ... #> $optout_effective_date       p3 2006-05-01     , 2016-03-30     , 2018-01-2 ... #> $optout_end_date             p3 2024-05-01     , 2024-03-30     , 2024-01-2 ... #> $first_line_street_address   c3 135 COUNTY ROAD, 135 COUNTY ROAD, 145 COUNT ... #> $second_line_street_address  c3 SUITE 2C       , SUITE 2C       , NA        ... #> $city_name                   c3 CRESSKILL      , CRESSKILL      , CRESSKILL ... #> $state_code                  c3 NJ             , NJ             , NJ        ... #> $zip_code                    c3 07626          , 07626          , 07626     ... #> $eligible_to_order_and_refer l3 T              , T              , T         ... #> $last_updated                p3 2022-12-15     , 2022-12-15     , 2022-12-1 ... opt_out(first = \"David\", last = \"Smith\") |> terse::terse() #> $first_name                  c6 David                , David             ,  ... #> $last_name                   c6 Smith                , Smith             ,  ... #> $npi                         c6 1649265760           , 1750565958        ,  ... #> $specialty                   c6 Maxillofacial Surgery, Oral Surgery      ,  ... #> $optout_effective_date       p6 2012-06-25           , 2013-05-07        ,  ... #> $optout_end_date             p6 2024-06-25           , 2023-05-07        ,  ... #> $first_line_street_address   c6 909 W FOXWOOD DR     , 1116 N CHINOWTH ST,  ... #> $second_line_street_address  c6 NA                   , NA                ,  ... #> $city_name                   c6 RAYMORE              , VISALIA           ,  ... #> $state_code                  c6 MO                   , CA                ,  ... #> $zip_code                    c6 640837200            , 932917896         ,  ... #> $eligible_to_order_and_refer l6 T                    , T                 ,  ... #> $last_updated                p6 2022-12-15           , 2022-12-15        ,  ... opt_out(npi = 1114974490) |> terse::terse() #> $first_name                  c1 David              #> $last_name                   c1 Altchek            #> $npi                         c1 1114974490         #> $specialty                   c1 Orthopedic Surgery #> $optout_effective_date       p1 2012-07-01         #> $optout_end_date             p1 2024-07-01         #> $first_line_street_address   c1 535 EAST 70TH ST   #> $second_line_street_address  c1 NA                 #> $city_name                   c1 NEW YORK           #> $state_code                  c1 NY                 #> $zip_code                    c1 100214823          #> $eligible_to_order_and_refer l1 T                  #> $last_updated                p1 2022-12-15 opt_out(date_start = \"01/30/1998\", date_end = \"01/30/2024\") |> terse::terse() #> $first_name                  c1 Jonathan     #> $last_name                   c1 Raines       #> $npi                         c1 1720444581   #> $specialty                   c1 Psychiatry   #> $optout_effective_date       p1 1998-01-30   #> $optout_end_date             p1 2024-01-30   #> $first_line_street_address   c1 1629 MONK RD #> $second_line_street_address  c1 P O BOX 470  #> $city_name                   c1 GLADWYNE     #> $state_code                  c1 PA           #> $zip_code                    c1 190351349    #> $eligible_to_order_and_refer l1 F            #> $last_updated                p1 2022-12-15 opt_out(city = \"Los Angeles\", address = \"9201 W SUNSET BLVD\") |> terse::terse() #> $first_name                  c4 Geemee            , Genise            , Dav ... #> $last_name                   c4 Chung             , Fraiman           , Sal ... #> $npi                         c4 1497783484        , 1598825309        , 176 ... #> $specialty                   c4 Infectious Disease, Internal Medicine , Ora ... #> $optout_effective_date       p4 2016-04-20        , 2016-10-13        , 202 ... #> $optout_end_date             p4 2024-04-20        , 2024-10-13        , 202 ... #> $first_line_street_address   c4 9201 W SUNSET BLVD, 9201 W SUNSET BLVD, 920 ... #> $second_line_street_address  c4 # 107             , # 107             , STE ... #> $city_name                   c4 LOS ANGELES       , LOS ANGELES       , LOS ... #> $state_code                  c4 CA                , CA                , CA  ... #> $zip_code                    c4 900693701         , 900693701         , 900 ... #> $eligible_to_order_and_refer l4 T                 , T                 , T   ... #> $last_updated                p4 2022-12-15        , 2022-12-15        , 202 ..."},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"data-dictionary","dir":"Articles","previous_headings":"Examples","what":"Data Dictionary","title":"Medicare Opt Out Affidavits API","text":"first_name last_name npi specialty optout_effective_date optout_end_date first_line_street_address second_line_street_address city_name state_code zip_code eligible_to_order_and_refer","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"related-links","dir":"Articles","previous_headings":"Examples","what":"Related Links","title":"Medicare Opt Out Affidavits API","text":"Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"order_refer","dir":"Articles","previous_headings":"","what":"order_refer()","title":"Medicare Order and Referring API","text":"","code":"order_refer(npi = 1003026055) |>  gt::gt() |>    provider:::gt_theme_provider() |>    gt::tab_header(title = \"Provider Results for NPI 1083879860\",     subtitle = gtExtras::add_text_img(\"Report generated with\", url = \"https://raw.githubusercontent.com/andrewallenbruce/provider/main/pkgdown/favicon/apple-touch-icon-180x180.png\", height = 25)) |>    gt::text_transform(locations = gt::cells_body(columns = c(partb, dme, hha, pmd)),                      fn = function(x) {                        if (x == as.character(\"TRUE\")) {gt::html(fontawesome::fa(\"circle-check\", prefer_type = \"solid\", fill = \"green\", height = \"1.5em\", width = \"1.5em\"))                          } else if (x == as.character(\"FALSE\")) {gt::html(fontawesome::fa(\"circle-xmark\", prefer_type = \"solid\", fill = \"red\"))                          }                      }                        )"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"data-dictionary","dir":"Articles","previous_headings":"order_refer()","what":"Data Dictionary","title":"Medicare Order and Referring API","text":"npi last_name first_name partb dme hha pmd","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"related-links","dir":"Articles","previous_headings":"order_refer()","what":"Related Links","title":"Medicare Order and Referring API","text":"Medicare Order Referring API CMS.gov: Ordering & Certifying Order Referring Methodology","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"physician-other-practitioners-by-provider","dir":"Articles","previous_headings":"","what":"Physician & Other Practitioners: by Provider","title":"Medicare Physician & Other Practitioners APIs","text":"Provider data subset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI). dataset based information gathered CMS administrative claims data Original Medicare Part B beneficiaries available CMS Chronic Conditions Data Warehouse. Data update frequency: Annually Data source: Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"examples","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider","what":"Examples","title":"Medicare Physician & Other Practitioners APIs","text":"","code":"physician_by_provider(npi = 1003000423, year = 2020) #> # A tibble: 1 × 11 #>    year rndrng_…¹ rndrng…² totals…³ drug_s…⁴ med_sr…⁵ bene_age bene_sex bene_r…⁶ #>   <dbl> <chr>     <list>   <list>   <list>   <list>   <list>   <list>   <list>   #> 1  2020 10030004… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> # … with 2 more variables: bene_status <list>, bene_cc <list>, and abbreviated #> #   variable names ¹​rndrng_npi, ²​rndrng_prvdr, ³​totals_srvcs, ⁴​drug_srvcs, #> #   ⁵​med_srvcs, ⁶​bene_race physician_by_provider(type = \"I\",                        city = \"Hershey\",                        state = \"PA\",                        fips = 42,                        ruca = 1,                        gender = \"F\",                        cred = \"M.D.\",                        specialty = \"Anesthesiology\") #> # A tibble: 19 × 11 #>     year rndrng…¹ rndrng…² totals…³ drug_s…⁴ med_sr…⁵ bene_age bene_sex bene_r…⁶ #>    <dbl> <chr>    <list>   <list>   <list>   <list>   <list>   <list>   <list>   #>  1  2020 1023230… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  2  2020 1104213… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  3  2020 1114930… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  4  2020 1124240… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  5  2020 1154522… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  6  2020 1326249… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  7  2020 1376754… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  8  2020 1467763… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  9  2020 1518255… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 10  2020 1538506… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 11  2020 1558780… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 12  2020 1568489… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 13  2020 1578906… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 14  2020 1629289… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 15  2020 1710109… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 16  2020 1841466… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 17  2020 1942460… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 18  2020 1952796… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 19  2020 1972946… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> # … with 2 more variables: bene_status <list>, bene_cc <list>, and abbreviated #> #   variable names ¹​rndrng_npi, ²​rndrng_prvdr, ³​totals_srvcs, ⁴​drug_srvcs, #> #   ⁵​med_srvcs, ⁶​bene_race x <- purrr::map_dfr(2013:2020, ~physician_by_provider(npi = 1003000126, year = .x))"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"examples-1","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Geography and Service","what":"Examples","title":"Medicare Physician & Other Practitioners APIs","text":"","code":"physician_by_geography(hcpcs_code = \"0002A\", year = 2020) #> # A tibble: 9 × 16 #>    year rndrng…¹ rndrn…² rndrn…³ hcpcs…⁴ hcpcs…⁵ hcpcs…⁶ place…⁷ tot_r…⁸ tot_b…⁹ #>   <dbl> <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>     <int>   <int> #> 1  2020 National \"\"      Nation… 0002A   Adm sa… N       O            53     279 #> 2  2020 State    \"06\"    Califo… 0002A   Adm sa… N       O             3      91 #> 3  2020 State    \"12\"    Florida 0002A   Adm sa… N       O             5      16 #> 4  2020 State    \"17\"    Illino… 0002A   Adm sa… N       O             3      18 #> 5  2020 State    \"23\"    Maine   0002A   Adm sa… N       O             1      22 #> 6  2020 State    \"24\"    Maryla… 0002A   Adm sa… N       O             3      18 #> 7  2020 State    \"25\"    Massac… 0002A   Adm sa… N       O             3      16 #> 8  2020 State    \"34\"    New Je… 0002A   Adm sa… N       O             3      14 #> 9  2020 State    \"42\"    Pennsy… 0002A   Adm sa… N       O             4      40 #> # … with 6 more variables: tot_srvcs <int>, tot_bene_day_srvcs <int>, #> #   avg_sbmtd_chrg <dbl>, avg_mdcr_alowd_amt <dbl>, avg_mdcr_pymt_amt <dbl>, #> #   avg_mdcr_stdzd_amt <dbl>, and abbreviated variable names #> #   ¹​rndrng_prvdr_geo_lvl, ²​rndrng_prvdr_geo_cd, ³​rndrng_prvdr_geo_desc, #> #   ⁴​hcpcs_cd, ⁵​hcpcs_desc, ⁶​hcpcs_drug_ind, ⁷​place_of_srvc, #> #   ⁸​tot_rndrng_prvdrs, ⁹​tot_benes service <- purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x))"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"physician-other-practitioners-by-provider-and-service","dir":"Articles","previous_headings":"","what":"Physician & Other Practitioners: by Provider and Service","title":"Medicare Physician & Other Practitioners APIs","text":"spending utilization data Physician Practitioners Provider Service Dataset aggregated following:  NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility).  can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"examples-2","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Examples","title":"Medicare Physician & Other Practitioners APIs","text":"","code":"# Search by NPI physician_by_service(npi = 1003000126) #> # A tibble: 1 × 6 #>    year rndrng_npi rndrng_prvdr      totals_srvcs     hcpcs            averages #>   <dbl> <chr>      <list>            <list>           <list>           <list>   #> 1  2020 1003000126 <tibble [9 × 17]> <tibble [9 × 3]> <tibble [9 × 4]> <tibble> # Search by Last Name for 2019 physician_by_service(npi = 1720392988, year = 2019) #> # A tibble: 1 × 6 #>    year rndrng_npi rndrng_prvdr       totals_srvcs      hcpcs    averages #>   <dbl> <chr>      <list>             <list>            <list>   <list>   #> 1  2019 1720392988 <tibble [20 × 17]> <tibble [20 × 3]> <tibble> <tibble> # Multiple NPIs #npis <- c(1003026055,           1720392988,           1518184605,           1922056829,           1083879860)  #npis |> purrr::map_dfr(physician_by_service) #> Error: <text>:3:21: unexpected ',' #> 2: #npis <- c(1003026055, #> 3:           1720392988, #>                        ^ # Retrieve All Provider Data, 2013-2020 purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x)) #> # A tibble: 8 × 6 #>   year  rndrng_npi rndrng_prvdr       totals_srvcs      hcpcs    averages #>   <chr> <chr>      <list>             <list>            <list>   <list>   #> 1 2013  1003000126 <tibble [7 × 17]>  <tibble [7 × 3]>  <tibble> <tibble> #> 2 2014  1003000126 <tibble [8 × 17]>  <tibble [8 × 3]>  <tibble> <tibble> #> 3 2015  1003000126 <tibble [11 × 17]> <tibble [11 × 3]> <tibble> <tibble> #> 4 2016  1003000126 <tibble [12 × 17]> <tibble [12 × 3]> <tibble> <tibble> #> 5 2017  1003000126 <tibble [11 × 17]> <tibble [11 × 3]> <tibble> <tibble> #> 6 2018  1003000126 <tibble [11 × 17]> <tibble [11 × 3]> <tibble> <tibble> #> 7 2019  1003000126 <tibble [9 × 17]>  <tibble [9 × 3]>  <tibble> <tibble> #> 8 2020  1003000126 <tibble [9 × 17]>  <tibble [9 × 3]>  <tibble> <tibble>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"provider-data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Provider Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_npi rndrng_prvdr_last_org_name rndrng_prvdr_first_name rndrng_prvdr_mi rndrng_prvdr_crdntls rndrng_prvdr_gndr rndrng_prvdr_ent_cd rndrng_prvdr_st1 rndrng_prvdr_st2 rndrng_prvdr_city rndrng_prvdr_state_abrvtn rndrng_prvdr_state_fips rndrng_prvdr_zip5 rndrng_prvdr_ruca rndrng_prvdr_ruca_desc rndrng_prvdr_cntry rndrng_prvdr_type rndrng_prvdr_mdcr_prtcptg_ind tot_hcpcs_cds tot_benes tot_srvcs tot_sbmtd_chrg tot_mdcr_alowd_amt tot_mdcr_pymt_amt tot_mdcr_stdzd_amt drug_sprsn_ind drug_tot_hcpcs_cds drug_tot_benes drug_tot_srvcs drug_sbmtd_chrg drug_mdcr_alowd_amt drug_mdcr_pymt_amt drug_mdcr_stdzd_amt med_sprsn_ind med_tot_hcpcs_cds med_tot_benes med_tot_srvcs med_sbmtd_chrg med_mdcr_alowd_amt med_mdcr_pymt_amt med_mdcr_stdzd_amt bene_avg_age bene_age_lt_65_cnt bene_age_65_74_cnt bene_age_75_84_cnt bene_age_gt_84_cnt bene_feml_cnt bene_male_cnt bene_race_wht_cnt bene_race_black_cnt bene_race_api_cnt bene_race_hspnc_cnt bene_race_natind_cnt bene_race_othr_cnt bene_dual_cnt bene_ndual_cnt bene_cc_af_pct bene_cc_alzhmr_pct bene_cc_asthma_pct bene_cc_cncr_pct bene_cc_chf_pct bene_cc_ckd_pct bene_cc_copd_pct bene_cc_dprssn_pct bene_cc_dbts_pct bene_cc_hyplpdma_pct bene_cc_hyprtnsn_pct bene_cc_ihd_pct bene_cc_opo_pct bene_cc_raoa_pct bene_cc_sz_pct bene_cc_strok_pct bene_avg_risk_scre","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"geography-data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Geography Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_prvdr_geo_lvl rndrng_prvdr_geo_cd rndrng_prvdr_geo_desc hcpcs_cd hcpcs_desc hcpcs_drug_ind place_of_srvc tot_rndrng_prvdrs tot_srvcs tot_benes tot_bene_day_srvcs avg_sbmtd_chrg avg_mdcr_alowd_amt avg_mdcr_pymt_amt avg_mdcr_stdzd_amt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"service-data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Service Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_npi rndrng_prvdr_last_org_name rndrng_prvdr_first_name rndrng_prvdr_mi rndrng_prvdr_crdntls rndrng_prvdr_gndr rndrng_prvdr_ent_cd rndrng_prvdr_st1 rndrng_prvdr_st2 rndrng_prvdr_city rndrng_prvdr_state_abrvtn rndrng_prvdr_state_fips rndrng_prvdr_zip5 rndrng_prvdr_ruca rndrng_prvdr_ruca_desc rndrng_prvdr_cntry rndrng_prvdr_type rndrng_prvdr_mdcr_prtcptg_ind hcpcs_cd hcpcs_desc hcpcs_drug_ind place_of_srvc tot_benes tot_srvcs tot_bene_day_srvcs avg_sbmtd_chrg avg_mdcr_alowd_amt avg_mdcr_pymt_amt avg_mdcr_stdzd_amt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"key-data-sources","dir":"Articles","previous_headings":"","what":"Key Data Sources","title":"Medicare Physician & Other Practitioners APIs","text":"data Physician Practitioners Dataset based upon CMS administrative claims data Medicare beneficiaries enrolled fee--service program. data available CMS Chronic Condition Data Warehouse (CCW), database 100% Medicare enrollment fee--service claims data. Service counts, beneficiary counts, provider charges, Medicare allowed amounts payments place service indicator summarized Part B non-institutional claims processed Medicare Administrative Contractor (MAC) Jurisdictions (NCH Claim Type Codes ‘71’, ‘72’). Please see CCW website additional information.  Physician Practitioners Dataset data years, provider demographics (name, credentials, gender, complete address entity type) included National Plan & Provider Enumeration System (NPPES). CMS developed NPPES assign unique identifiers, known National Provider Identifiers (NPIs), health care providers. health care provider’s demographic information collected time enrollment updated periodically. demographics information provided Physician Practitioners Dataset extracted NPPES end calendar year following reporting year (e.g. CY2017 reporting year, NPPES data extracted end calendar year 2018). Please visit NPPES website additional information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"population","dir":"Articles","previous_headings":"","what":"Population","title":"Medicare Physician & Other Practitioners APIs","text":"Physician Practitioners Dataset includes data providers valid NPI submitted Medicare Part B non-institutional claims (excluding DMEPOS) reporting period. protect privacy Medicare beneficiaries, aggregated records derived 10 fewer beneficiaries excluded Physician Practitioners Dataset.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"data-limitations","dir":"Articles","previous_headings":"","what":"Data Limitations","title":"Medicare Physician & Other Practitioners APIs","text":"Although Physician Practitioners Dataset wealth payment utilization information many Medicare Part B services, dataset also number limitations worth noting.  First, data Physician Practitioners Dataset may representative physician’s entire practice. data file information Medicare beneficiaries Part B FFS coverage, physicians typically treat many patients form coverage. Physician Practitioners Dataset information patients covered Medicare, coverage federal programs (like Federal Employees Health Benefits Program Tricare), private health insurance (individual policy employer-sponsored coverage), uninsured. Even within Medicare, Physician Practitioners Dataset include information patients enrolled form Medicare Advantage plan.  information presented file also indicate quality care provided individual physicians. file contains cost utilization information, reasons described preceding paragraph, volume procedures presented may fully inclusive procedures performed provider. Medicare allowed amounts Medicare payments given HCPCS code/place service can vary based number factors, including modifiers, geography, services performed day/visit. example, modifiers (two-character designators signal change HCPCS code procedure service applied) may included claim line service intensity increased decreased, additional physician administered services, service provided differs procedure definition. cases, modifiers impact allowed amounts payments. addition, allowed amounts payments vary geographically Medicare makes adjustments services based area’s cost living. Allowed amounts payments can also adjusted physician renders multiple services beneficiary day, referred multiple procedure payment reduction. standard payment allowed amount rates CPT/HCPCS code, please visit Physician fee schedule.  general, provider administers drugs patient, provider purchases drug Medicare pays provider 106% average sales price (ASP) drug. Although ASP list used datasets define drug services, drugs listed ASP fee schedule complete listing drugs paid part B, ASP fee schedule represents majority drugs used office. information payments drugs covered Part B, please visit ASP Drug Pricing.  Additionally, data risk adjusted thus account difference underlying severity disease patient populations treated providers. However, provided average beneficiary risk scores “Medicare Physician Practitioners Provider Dataset” (.e., one record per NPI) provide information health status beneficiaries providers serve. Also, since data presented summarized actual claims received providers attempts made modify data (.e., statistical outliers removed truncated), rare instances average submitted charge amount may reflect errors included claims submitted providers.  noted earlier, file include data services performed 10 fewer beneficiaries, users aware summing data file may underestimate true Part B FFS totals. addition, providers bill individual NPI organizational NPI. case, users determine provider’s actual total way identify individual’s portion billed organization.  Medicare pays differently services provided facility setting versus freestanding physicians’ office (non-facility setting). services delivered facility setting, Medicare makes two payments, one physician’s professional fee one facility. services delivered facility (Place_Of_Srvc = ”F”), data Physician Practitioners Dataset generally represents physician’s professional fee include facility payment. exception services delivered Ambulatory Surgical Centers (ASCs). cases, physician’s professional fee ASC’s fee represented Physician Practitioners Dataset. ASCs can identified using provider type. services delivered non-facility setting, physician’s office (Place_Of_Srvc = ”O”), Physician Practitioners Dataset represents complete payment service.  users try link data file public datasets, please aware particular Medicare populations included timeframes used file merged. example, efforts link Physician Practitioners Dataset data Part D prescription drug data need account fact beneficiaries FFS Part B coverage (thus included Physician Practitioners Dataset) Part D drug coverage (thus represented Part D data files). time, beneficiaries Part D coverage (thus included Part D data) FFS Part B coverage (thus included Physician Practitioners Dataset). Another example linking data constructed different non-aligning time periods, publically available data physician referral patterns, based 18-month period.  Finally, users aware payments CMS demonstration programs included Physician Practitioners Dataset. Since CMS demonstration programs utilize Medicare claims submission process, payments services demonstrations included data file may grouped specific demonstration HCPCS codes aggregated non-demonstration specific HCPCS codes. Demonstration programs paid outside Medicare claims submission process included Physician Practitioners Dataset.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"additional-information","dir":"Articles","previous_headings":"","what":"Additional Information","title":"Medicare Physician & Other Practitioners APIs","text":"Data Sources CMS also releases “Medicare Fee--Service Public Provider Enrollment Data” include provider name address information Provider Enrollment Chain Ownership System (PECOS). data updated quarterly basis available data.cms.gov.  Medicare Standardized Spending Users can find information Medicare payment standardization referring Geographic Variation Methodology available within “Risk adjustment standardization” section following web page: Geographic Variation Methodology.  HCCs (Hierarchical Condition Categories) CMS developed risk-adjustment model uses HCCs (hierarchical condition categories) assign risk scores. scores estimate beneficiaries’ FFS spending compare overall average entire Medicare population. summary average risk scores beneficiaries represented calendar year Medicare Physician & Practitioners - Provider dataset located “Resources’” section following web page: Medicare Physician & Practitioners - Provider. Beneficiaries scores greater average risk score expected -average spending, vice versa. Risk scores based beneficiary’s age sex; whether beneficiary eligible Medicaid, first qualified Medicare basis disability, lives institution (usually nursing home); beneficiary’s diagnoses previous year.  HCC model designed risk adjustment larger populations, enrollees MA plan, generates accurate results used compare groups beneficiaries rather individuals. Please visit HCC risk score information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-due-date-list-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Due Date List API","title":"Medicare Revalidation APIs","text":"Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet. lists refreshed every two months two months’ worth due dates appended list.  Revalidation Due Date List dataset contains revalidation due dates Medicare providers due revalidate following six months. provider’s due date fall within ensuing six months, due date marked ‘TBD’. addition dataset also includes subfiles reassignment information given provider well due date listings clinics group practices providers. dataset based information gathered Provider Enrollment, Chain Ownership System (PECOS).  Medicare Revalidation Due Date API Medicare Revalidation Due Date - Data Dictionary","code":"revalidation_date(enroll_id = \"I20031110000070\",                    npi = 1184699621) |> terse::terse() #> $enrollment_id                   c1 I20031110000070   #> $npi                             c1 1184699621        #> $first_name                      c1 Eric              #> $last_name                       c1 Byrd              #> $organization_name               c1 NA                #> $enrollment_state_code           c1 NC                #> $enrollment_type                 c1 3                 #> $provider_type_text              c1 Non-DME Part B    #> $enrollment_specialty            c1 Internal Medicine #> $revalidation_due_date           p1 NA                #> $adjusted_due_date               p1 2022-11-30        #> $individual_total_reassign_to    c1 NA                #> $receiving_benefits_reassignment i1 2 revalidation_date(first_name = \"Eric\",                    last_name = \"Byrd\") |> terse::terse() #> $enrollment_id                   c2 I20031110000070  , I20090128000461  #> $npi                             c2 1184699621       , 1598792285       #> $first_name                      c2 Eric             , Eric             #> $last_name                       c2 Byrd             , Byrd             #> $organization_name               c2 NA               , NA               #> $enrollment_state_code           c2 NC               , SC               #> $enrollment_type                 c2 3                , 3                #> $provider_type_text              c2 Non-DME Part B   , Non-DME Part B   #> $enrollment_specialty            c2 Internal Medicine, General Practice #> $revalidation_due_date           p2 NA               , 2016-08-31       #> $adjusted_due_date               p2 2022-11-30       , NA               #> $individual_total_reassign_to    c2 NA               , NA               #> $receiving_benefits_reassignment i2 2                , 2 revalidation_date(state = \"FL\",                    type_code = \"3\",                    specialty = \"General Practice\") |> terse::terse() #> $enrollment_id                   c1480 I20031104000582 , I20031105000008 ,  ... #> $npi                             c1480 1184693400      , 1356436786      ,  ... #> $first_name                      c1480 John            , Humberto        ,  ... #> $last_name                       c1480 Abt             , Fernandez Miro  ,  ... #> $organization_name               c1480 NA              , NA              ,  ... #> $enrollment_state_code           c1480 FL              , FL              ,  ... #> $enrollment_type                 c1480 3               , 3               ,  ... #> $provider_type_text              c1480 Non-DME Part B  , Non-DME Part B  ,  ... #> $enrollment_specialty            c1480 General Practice, General Practice,  ... #> $revalidation_due_date           p1480 2018-02-28      , 2017-09-30      ,  ... #> $adjusted_due_date               p1480 NA              , NA              ,  ... #> $individual_total_reassign_to    c1480 NA              , NA              ,  ... #> $receiving_benefits_reassignment c1480 4               , 2               ,  ..."},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"data-dictionary","dir":"Articles","previous_headings":"Medicare Revalidation Due Date List API","what":"Data Dictionary","title":"Medicare Revalidation APIs","text":"enrollment_id national_provider_identifier first_name last_name organization_name enrollment_state_code enrollment_type provider_type_text enrollment_specialty revalidation_due_date adjusted_due_date individual_total_reassign_to receiving_benefits_reassignment","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-clinic-group-practice-reassignment-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Clinic Group Practice Reassignment API","title":"Medicare Revalidation APIs","text":"","code":"revalidation_group(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\") |> terse::terse() #> $group_pac_id                                 d3 4688988371         , 31738 ... #> $group_enrollment_id                          c3 O20150810001133    , O2019 ... #> $group_legal_business_name                    c3 1271972 Llc        , Hartf ... #> $group_state_code                             c3 CT                 , CT    ... #> $group_due_date                               c3 TBD                , TBD   ... #> $group_reassignments_and_physician_assistants i3 34                 , 1676  ... #> $record_type                                  c3 Physician Assistant, Physi ... #> $individual_enrollment_id                     c3 I20200929003184    , I2020 ... #> $individual_npi                               i3 1962026229         , 19620 ... #> $individual_first_name                        c3 Rashadda           , Rasha ... #> $individual_last_name                         c3 Wong               , Wong  ... #> $individual_state_code                        c3 CT                 , CT    ... #> $individual_specialty_description             c3 Physician Assistant, Physi ... #> $individual_due_date                          c3 TBD                , TBD   ... #> $individual_total_employer_associations       i3 3                  , 3     ... revalidation_group(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") |> terse::terse() #> $group_pac_id                                 d1 9436483807           #> $group_enrollment_id                          c1 O20190619002165      #> $group_legal_business_name                    c1 1st Call Urgent Care #> $group_state_code                             c1 FL                   #> $group_due_date                               c1 TBD                  #> $group_reassignments_and_physician_assistants i1 1                    #> $record_type                                  c1 Reassignment         #> $individual_enrollment_id                     c1 I20190619002257      #> $individual_npi                               i1 1326063900           #> $individual_first_name                        c1 John                 #> $individual_last_name                         c1 Kayoma               #> $individual_state_code                        c1 FL                   #> $individual_specialty_description             c1 Family Practice      #> $individual_due_date                          c1 TBD                  #> $individual_total_employer_associations       i1 1"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"data-dictionary-1","dir":"Articles","previous_headings":"Medicare Revalidation Clinic Group Practice Reassignment API","what":"Data Dictionary","title":"Medicare Revalidation APIs","text":"group_pac_id group_enrollment_id group_legal_business_name group_state_code group_due_date group_reassignments_and_physician_assistants record_type individual_enrollment_id individual_npi individual_first_name individual_last_name individual_state_code individual_specialty_description individual_due_date individual_total_employer_associations","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-reassignment-list-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Reassignment List API","title":"Medicare Revalidation APIs","text":"Reassignments Providers due Revalidation.  Revalidation Reassignment List dataset provides information reassignments providers due revalidation. Section 6401 () Affordable Care Act established requirement enrolled providers/suppliers revalidate Medicare enrollment information new enrollment screening criteria. CMS completed initial round revalidations resuming regular revalidation cycles accordance 42 CFR §424.515. effort streamline revalidation process reduce provider/supplier burden, CMS implemented several revalidation processing improvements one established due dates Providers must revalidate. Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet.","code":"revalidation_reassign(ind_enroll_id = \"I20200929003184\",                     ind_npi = 1962026229,                     ind_first = \"Rashadda\",                     ind_last = \"Wong\",                     ind_state = \"CT\",                     ind_specialty = \"Physician Assistant\") |> terse::terse() #> $group_pac_id                                 d3 4688988371         , 31738 ... #> $group_enrollment_id                          c3 O20150810001133    , O2019 ... #> $group_legal_business_name                    c3 1271972 Llc        , Hartf ... #> $group_state_code                             c3 CT                 , CT    ... #> $group_due_date                               c3 TBD                , TBD   ... #> $group_reassignments_and_physician_assistants i3 34                 , 1676  ... #> $record_type                                  c3 Physician Assistant, Physi ... #> $individual_pac_id                            d3 2769801430         , 27698 ... #> $individual_enrollment_id                     c3 I20200929003184    , I2020 ... #> $individual_npi                               i3 1962026229         , 19620 ... #> $individual_first_name                        c3 Rashadda           , Rasha ... #> $individual_last_name                         c3 Wong               , Wong  ... #> $individual_state_code                        c3 CT                 , CT    ... #> $individual_specialty_description             c3 Physician Assistant, Physi ... #> $individual_due_date                          c3 TBD                , TBD   ... #> $individual_total_employer_associations       i3 3                  , 3     ..."},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"Medicare Revalidation APIs","text":"Medicare Revalidation Reassignment List API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"medicare-provider-and-supplier-taxonomy-crosswalk-api","dir":"Articles","previous_headings":"","what":"Medicare Provider and Supplier Taxonomy Crosswalk API","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"Medicare Provider Supplier Taxonomy Crosswalk dataset lists providers suppliers eligible enroll Medicare programs proper healthcare provider taxonomy code. data includes Medicare speciality codes, available, provider/supplier type description, taxonomy code, taxonomy description. dataset derived information gathered National Plan Provider Enumerator System (NPPES) Provider Enrollment, Chain Ownership System (PECOS). Medicare Provider Supplier Taxonomy Crosswalk","code":"taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") |> terse::terse() #> $medicare_specialty_code                                          c1 2      ... #> $medicare_provider_supplier_type_description                      c1 Physic ... #> $provider_taxonomy_code                                           c1 2086S0 ... #> $provider_taxonomy_description_type_classification_specialization c1 Allopa ..."},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"api-data-dictionary","dir":"Articles","previous_headings":"Medicare Provider and Supplier Taxonomy Crosswalk API","what":"API Data Dictionary","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"medicare_specialty_code medicare_provider_supplier_type_description provider_taxonomy_code provider_taxonomy_description_type_classification_specialization","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"further-reading","dir":"Articles","previous_headings":"Medicare Provider and Supplier Taxonomy Crosswalk API","what":"Further Reading","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"Endpoints Information CMS Public Reporting Missing Digital Contact Information","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"NPPES NPI Registry API","text":"returns tibble containing NPI searched (search), datetime query, outcome status column data_lists, list-column containing collection variables nested data frames:  variables returned follows:  created_epoch: date NPI issued enumeration_type: NPI Entity Type, either NPI-1(individual) NPI-2(organizational) last_updated_epoch: date information last updated provider number: provider’s NPI, listed NPPES  Note: last_updated_epoch / created_epoch dates Unix time. repeated basic list last_updated enumeration_date, respectively.  list-columns returned follows:  basic: Basic information other_names: names used type 2 (organization) providers addresses: Primary location mailing addresses taxonomies: Specialty classification related information identifiers: Various identifiers payer-specific IDs, CLIA numbers, etc. practice_locations: Provider’s practice locations endpoints: Information regarding provider’s endpoints Health Information Exchange (HIE)  Note: list-columns may available every provider. depends factors NPI type, incorporated individual status, subpart delegation, , quite simply, information provided NPPES providers.","code":"x <- nppes_npi(npi = 1114499340) x$addresses[[1]] #>   country_code  country_name address_purpose address_type #> 1           US United States        LOCATION          DOM #> 2           US United States         MAILING          DOM #>                address_1      city state postal_code telephone_number #> 1 5353 MISSION CENTER RD SAN DIEGO    CA   921081306     619-497-2836 #> 2  1830 MARKET ST APT 19 SAN DIEGO    CA   921022851             <NA> x$practiceLocations[[1]] #>   country_code  country_name address_purpose address_type      address_1 #> 1           US United States        LOCATION          DOM 7440 RONSON RD #>        city state postal_code telephone_number #> 1 SAN DIEGO    CA   921111508     347-840-3256 x$taxonomies[[1]] #>         code taxonomy_group               desc state license primary #> 1 225100000X                Physical Therapist    CA  295997    TRUE x$endpoints[[1]] #> list() x$other_names[[1]] # ONLY NPI-2 #> list() basic <- x$basic[[1]] |> tibble::tibble() addresses <- x$addresses[[1]] |> tibble::tibble()  tibble::tibble(basic,                 addresses) #> # A tibble: 2 × 19 #>   basic_first_…¹ basic…² basic…³ basic…⁴ basic…⁵ basic…⁶ basic…⁷ basic…⁸ basic…⁹ #>   <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 DOMINICK       LOUDA   DPT     NO      M       2018-1… 2020-0… 2020-0… A       #> 2 DOMINICK       LOUDA   DPT     NO      M       2018-1… 2020-0… 2020-0… A       #> # … with 10 more variables: basic_name_prefix <chr>, country_code <chr>, #> #   country_name <chr>, address_purpose <chr>, address_type <chr>, #> #   address_1 <chr>, city <chr>, state <chr>, postal_code <chr>, #> #   telephone_number <chr>, and abbreviated variable names ¹​basic_first_name, #> #   ²​basic_last_name, ³​basic_credential, ⁴​basic_sole_proprietor, ⁵​basic_gender, #> #   ⁶​basic_enumeration_date, ⁷​basic_last_updated, ⁸​basic_certification_date, #> #   ⁹​basic_status"},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"examples-1","dir":"Articles","previous_headings":"","what":"Examples","title":"NPPES NPI Registry API","text":"","code":"nppes_npi(npi = 1528060837) #> # A tibble: 1 × 15 #>   datetime            outcome enumera…¹ number name  city  state addre…² pract…³ #>   <dttm>              <chr>   <chr>     <chr>  <chr> <chr> <chr> <list>  <list>  #> 1 2023-02-08 18:17:33 results NPI-1     15280… JOHN… ROCK… MD    <df>    <list>  #> # … with 6 more variables: taxonomies <list>, identifiers <list>, #> #   endpoints <list>, other_names <list>, epochs <list>, basic <list>, and #> #   abbreviated variable names ¹​enumeration_type, ²​addresses, #> #   ³​practiceLocations ### City, state, country nppes_npi(city = \"Atlanta\",           state = \"GA\",           country = \"US\") #> # A tibble: 200 × 16 #>    datetime            outcome enumer…¹ number name  city  state addre…² pract…³ #>    <dttm>              <chr>   <chr>    <chr>  <chr> <chr> <chr> <list>  <list>  #>  1 2023-02-08 18:17:34 results NPI-1    17302… NA    EAST… GA    <df>    <df>    #>  2 2023-02-08 18:17:34 results NPI-1    16695… NA    ATLA… GA    <df>    <df>    #>  3 2023-02-08 18:17:34 results NPI-1    10434… NA    ATLA… GA    <df>    <df>    #>  4 2023-02-08 18:17:34 results NPI-1    13666… NA    ATLA… GA    <df>    <df>    #>  5 2023-02-08 18:17:34 results NPI-1    16394… NA    ATLA… GA    <df>    <df>    #>  6 2023-02-08 18:17:34 results NPI-1    10637… NA    DECA… GA    <df>    <df>    #>  7 2023-02-08 18:17:34 results NPI-1    14071… NA    MARI… GA    <df>    <df>    #>  8 2023-02-08 18:17:34 results NPI-1    16798… NA    ATLA… GA    <df>    <df>    #>  9 2023-02-08 18:17:34 results NPI-1    19023… NA    ATLA… GA    <df>    <df>    #> 10 2023-02-08 18:17:34 results NPI-1    10033… NA    LOCU… GA    <df>    <df>    #> # … with 190 more rows, 7 more variables: taxonomies <list>, #> #   identifiers <list>, endpoints <list>, other_names <list>, epochs <list>, #> #   authorized_official <list>, basic <list>, and abbreviated variable names #> #   ¹​enumeration_type, ²​addresses, ³​practiceLocations ### First name, city, state nppes_npi(first = \"John\",           city = \"Baltimore\",           state = \"MD\") #> # A tibble: 200 × 15 #>    datetime            outcome enumer…¹ number name  city  state addre…² pract…³ #>    <dttm>              <chr>   <chr>    <chr>  <chr> <chr> <chr> <list>  <list>  #>  1 2023-02-08 18:17:35 results NPI-1    14275… JOHN… BALT… MD    <df>    <df>    #>  2 2023-02-08 18:17:35 results NPI-1    16891… JONA… BALT… MD    <df>    <df>    #>  3 2023-02-08 18:17:35 results NPI-1    11745… JOHN… BALT… MD    <df>    <df>    #>  4 2023-02-08 18:17:35 results NPI-1    11840… JONA… BALT… MD    <df>    <df>    #>  5 2023-02-08 18:17:35 results NPI-1    16493… JOHN… BALT… MD    <df>    <df>    #>  6 2023-02-08 18:17:35 results NPI-1    17009… JOHN… BALT… MD    <df>    <df>    #>  7 2023-02-08 18:17:35 results NPI-1    10837… JOHN… BALT… MD    <df>    <df>    #>  8 2023-02-08 18:17:35 results NPI-1    12052… JOHN… BALT… MD    <df>    <df>    #>  9 2023-02-08 18:17:35 results NPI-1    14779… JOHN… BALT… MD    <df>    <df>    #> 10 2023-02-08 18:17:35 results NPI-1    16795… JOHN… BALT… MD    <df>    <df>    #> # … with 190 more rows, 6 more variables: taxonomies <list>, #> #   identifiers <list>, endpoints <list>, other_names <list>, epochs <list>, #> #   basic <list>, and abbreviated variable names ¹​enumeration_type, ²​addresses, #> #   ³​practiceLocations nppes_npi(npi = 1336413418) # NPI-2 #> # A tibble: 1 × 16 #>   datetime            outcome enumera…¹ number name  city  state addre…² pract…³ #>   <dttm>              <chr>   <chr>     <chr>  <chr> <chr> <chr> <list>  <list>  #> 1 2023-02-08 18:17:36 results NPI-2     13364… LUMI… TIFT… GA    <df>    <list>  #> # … with 7 more variables: taxonomies <list>, identifiers <list>, #> #   endpoints <list>, other_names <list>, epochs <list>, #> #   authorized_official <list>, basic <list>, and abbreviated variable names #> #   ¹​enumeration_type, ²​addresses, ³​practiceLocations nppes_npi(npi = 1710975040) # NPI-1 #> # A tibble: 1 × 15 #>   datetime            outcome enumera…¹ number name  city  state addre…² pract…³ #>   <dttm>              <chr>   <chr>     <chr>  <chr> <chr> <chr> <list>  <list>  #> 1 2023-02-08 18:17:36 results NPI-1     17109… JOHN… OLNEY MD    <df>    <list>  #> # … with 6 more variables: taxonomies <list>, identifiers <list>, #> #   endpoints <list>, other_names <list>, epochs <list>, basic <list>, and #> #   abbreviated variable names ¹​enumeration_type, ²​addresses, #> #   ³​practiceLocations nppes_npi(npi = 1659781227) # Deactivated #> # A tibble: 1 × 3 #>   datetime            outcome errors           #>   <dttm>              <chr>   <list>           #> 1 2023-02-08 18:17:37 Errors  <tibble [1 × 3]> ### List of NPIs npi_list <- c(1003026055,               1710983663,               1316405939,               1720392988,               1518184605,               1922056829,               1083879860)  npi_list |> purrr::map_dfr(nppes_npi) |> dplyr::group_split(outcome) #> <list_of< #>   tbl_df< #>     datetime         : datetime<local> #>     outcome          : character #>     enumeration_type : character #>     number           : character #>     name             : character #>     city             : character #>     state            : character #>     addresses        : list #>     practiceLocations: list #>     taxonomies       : list #>     identifiers      : list #>     endpoints        : list #>     other_names      : list #>     epochs           : list #>     basic            : list #>     errors           : list #>   > #> >[2]> #> [[1]] #> # A tibble: 1 × 16 #>   datetime            outcome enumera…¹ number name  city  state addre…² pract…³ #>   <dttm>              <chr>   <chr>     <chr>  <chr> <chr> <chr> <list>  <list>  #> 1 2023-02-08 18:17:38 Errors  NA        NA     NA    NA    NA    <NULL>  <NULL>  #> # … with 7 more variables: taxonomies <list>, identifiers <list>, #> #   endpoints <list>, other_names <list>, epochs <list>, basic <list>, #> #   errors <list>, and abbreviated variable names ¹​enumeration_type, #> #   ²​addresses, ³​practiceLocations #>  #> [[2]] #> # A tibble: 6 × 16 #>   datetime            outcome enumera…¹ number name  city  state addre…² pract…³ #>   <dttm>              <chr>   <chr>     <chr>  <chr> <chr> <chr> <list>  <list>  #> 1 2023-02-08 18:17:37 results NPI-1     10030… RADH… COCO… FL    <df>    <list>  #> 2 2023-02-08 18:17:38 results NPI-1     13164… JAEN… SCOT… AZ    <df>    <list>  #> 3 2023-02-08 18:17:38 results NPI-1     17203… MUST… CHAR… OH    <df>    <list>  #> 4 2023-02-08 18:17:38 results NPI-1     15181… DANI… BOST… MA    <df>    <list>  #> 5 2023-02-08 18:17:38 results NPI-1     19220… CYNT… DETR… MI    <df>    <list>  #> 6 2023-02-08 18:17:38 results NPI-1     10838… CHRI… OLNEY MD    <df>    <list>  #> # … with 7 more variables: taxonomies <list>, identifiers <list>, #> #   endpoints <list>, other_names <list>, epochs <list>, basic <list>, #> #   errors <list>, and abbreviated variable names ¹​enumeration_type, #> #   ²​addresses, ³​practiceLocations ### Data frame of NPIs npi_df <- data.frame(npi = c(1710983663,                              1003026055,                              1316405939,                              1720392988,                              1518184605,                              1922056829,                              1083879860)) npi_df |> tibble::deframe() |> purrr::map_dfr(nppes_npi) #> # A tibble: 7 × 16 #>   datetime            outcome errors   enumer…¹ number name  city  state addre…² #>   <dttm>              <chr>   <list>   <chr>    <chr>  <chr> <chr> <chr> <list>  #> 1 2023-02-08 18:17:39 Errors  <tibble> NA       NA     NA    NA    NA    <NULL>  #> 2 2023-02-08 18:17:39 results <NULL>   NPI-1    10030… RADH… COCO… FL    <df>    #> 3 2023-02-08 18:17:39 results <NULL>   NPI-1    13164… JAEN… SCOT… AZ    <df>    #> 4 2023-02-08 18:17:40 results <NULL>   NPI-1    17203… MUST… CHAR… OH    <df>    #> 5 2023-02-08 18:17:40 results <NULL>   NPI-1    15181… DANI… BOST… MA    <df>    #> 6 2023-02-08 18:17:40 results <NULL>   NPI-1    19220… CYNT… DETR… MI    <df>    #> 7 2023-02-08 18:17:40 results <NULL>   NPI-1    10838… CHRI… OLNEY MD    <df>    #> # … with 7 more variables: practiceLocations <list>, taxonomies <list>, #> #   identifiers <list>, endpoints <list>, other_names <list>, epochs <list>, #> #   basic <list>, and abbreviated variable names ¹​enumeration_type, ²​addresses ###Tribble example tribble <- tibble::tribble( ~fn,         ~params, \"nppes_npi\", list(1336413418), \"nppes_npi\", list(1710975040), \"nppes_npi\", list(1659781227), \"nppes_npi\", list(first = \"John\", city = \"Baltimore\", state = \"MD\"), \"nppes_npi\", list(first = \"Andrew\", city = \"Atlanta\", state = \"GA\"))  purrr::invoke_map_dfr(tribble$fn, tribble$params) #> # A tibble: 403 × 17 #>    datetime            outcome enumer…¹ number name  city  state addre…² pract…³ #>    <dttm>              <chr>   <chr>    <chr>  <chr> <chr> <chr> <list>  <list>  #>  1 2023-02-08 18:17:41 results NPI-2    13364… LUMI… TIFT… GA    <df>    <list>  #>  2 2023-02-08 18:17:41 results NPI-1    17109… JOHN… OLNEY MD    <df>    <list>  #>  3 2023-02-08 18:17:41 Errors  NA       NA     NA    NA    NA    <NULL>  <NULL>  #>  4 2023-02-08 18:17:41 results NPI-1    14275… JOHN… BALT… MD    <df>    <df>    #>  5 2023-02-08 18:17:41 results NPI-1    16891… JONA… BALT… MD    <df>    <df>    #>  6 2023-02-08 18:17:41 results NPI-1    11745… JOHN… BALT… MD    <df>    <df>    #>  7 2023-02-08 18:17:41 results NPI-1    11840… JONA… BALT… MD    <df>    <df>    #>  8 2023-02-08 18:17:41 results NPI-1    16493… JOHN… BALT… MD    <df>    <df>    #>  9 2023-02-08 18:17:41 results NPI-1    17009… JOHN… BALT… MD    <df>    <df>    #> 10 2023-02-08 18:17:41 results NPI-1    10837… JOHN… BALT… MD    <df>    <df>    #> # … with 393 more rows, 8 more variables: taxonomies <list>, #> #   identifiers <list>, endpoints <list>, other_names <list>, epochs <list>, #> #   authorized_official <list>, basic <list>, errors <list>, and abbreviated #> #   variable names ¹​enumeration_type, ²​addresses, ³​practiceLocations"},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"api-documentation-overview","dir":"Articles","previous_headings":"","what":"API Documentation Overview","title":"NPPES NPI Registry API","text":"section outlines NPPES API’s documentation, going valid search inputs, constraints inputs, descriptions many possible outputs.","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"enumeration-type","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes","what":"Enumeration Type","title":"NPPES NPI Registry API","text":"Two categories health care providers exist NPI enumeration purposes: Entity Type 1 (Individual) Entity Type 2 (Organizational).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"npi-1-individual","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes > Enumeration Type","what":"NPI-1: Individual","title":"NPPES NPI Registry API","text":"Individual health care providers (including sole proprietors) may get NPI Entity Type 1. sole proprietor, must apply NPI using SSN, Employer Identification Number (EIN) even EIN. sole proprietor, may get one NPI, just like individual. following factors affect whether sole proprietor Entity Type 1: Number different office locations Whether employees Whether IRS issued EIN. incorporated individual single health care provider forms conducts business corporation. sole proprietor incorporated individual sole proprietor didn’t form corporation. ’re sole/solo practitioner, doesn’t necessarily mean ’re sole proprietor, vice versa. ’re individual health care provider ’s incorporated, may need get NPI (Entity Type 1) NPI corporation LLC (Entity Type 2).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"npi-2-organizational","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes > Enumeration Type","what":"NPI-2: Organizational","title":"NPPES NPI Registry API","text":"Organizational health care providers group health care providers eligible NPIs Entity Type 2. Organization health care providers may single employee thousands employees. example incorporated individual organization’s employee. organization health care providers made parts work somewhat independently parent organization. parts may offer different types health care offer health care separate physical locations. parts physical locations aren’t legal entities part organization health care provider (legal entity). NPI Final Rule refers parts locations subparts. organization health care provider can get subparts NPIs. subpart conducts HIPAA standard transactions (separately parent), must get NPI. Subpart determination makes sure entities within covered organization uniquely identified HIPAA standard transactions conduct Medicare covered entities. example, hospital offers acute care, laboratory, pharmacy, rehabilitation services. subparts may need NPI sends standard transactions one health plans. Subpart delegation doesn’t affect Entity Type 1 health care providers. individuals, health care providers can’t choose subparts subparts.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"authorized-official","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes > Enumeration Type","what":"Authorized Official","title":"NPPES NPI Registry API","text":"appointed official (e.g., chief executive officer, chief financial officer, general partner, chairman board, direct owner) organization granted legal authority enroll Medicare program, make changes updates organization’s status Medicare program, commit organization fully abide statutes, regulations, program instructions Medicare program. See 42 CFR 424.502 additional information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"example-opt-out-provider","dir":"Articles","previous_headings":"","what":"Example: Opt-Out Provider","title":"Overview of Provider","text":"","code":"nppes_npi(npi = 1114058443)  order_refer(npi = 1114058443)  opt_out(npi = 1114058443) eliz <- provider_enrollment(org_name = \"ELIZABETHTOWN COMMUNITY HOSPITAL\",                             state = \"NY\",                             prov_type_code = \"00-85\")  eliz |> terse::terse() #> eliz$npi                c2 1891785184                                , 1407 ... #> eliz$pecos_asct_cntl_id c2 3577554138                                , 3577 ... #> eliz$enrlmt_id          c2 O20101110000259                           , O202 ... #> eliz$provider_type_cd   c2 00-85                                     , 00-8 ... #> eliz$provider_type_desc c2 PART A PROVIDER - CRITICAL ACCESS HOSPITAL, PART ... #> eliz$state_cd           c2 NY                                        , NY   ... #> eliz$first_name         c2 NA                                        , NA   ... #> eliz$mdl_name           c2 NA                                        , NA   ... #> eliz$last_name          c2 NA                                        , NA   ... #> eliz$org_name           c2 ELIZABETHTOWN COMMUNITY HOSPITAL          , ELIZ ... #> eliz$gndr_sw            c2 NA                                        , NA   ... nppes <- tibble::tribble( ~fn,         ~params, \"nppes_npi\", list(npi = eliz$npi[[1]]), \"nppes_npi\", list(npi = eliz$npi[[2]]))  eliz2 <- purrr::invoke_map_dfr(nppes$fn, nppes$params)  eliz2 |> terse::terse() #> eliz2$datetime            p2 2023-02-08 18:17:51             , 2023-02-08 1 ... #> eliz2$outcome             c2 results                         , results      ... #> eliz2$enumeration_type    c2 NPI-2                           , NPI-2        ... #> eliz2$number              c2 1891785184                      , 1407061591   ... #> eliz2$name                c2 ELIZABETHTOWN COMMUNITY HOSPITAL, ELIZABETHTOW ... #> eliz2$city                c2 ELIZABETHTOWN                   , ELIZABETHTOW ... #> eliz2$state               c2 NY                              , NY           ... #> eliz2$addresses           L2 list(structure(list(country_code = c(\"US\", \"US ... #> eliz2$practiceLocations   L2 list(list(), list()) #> eliz2$taxonomies          L2 list(structure(list(code = \"282NC0060X\", taxon ... #> eliz2$identifiers         L2 list(structure(list(code = c(\"05\", \"06\", \"08\") ... #> eliz2$endpoints           L2 list(list(), list()) #> eliz2$other_names         L2 list(list(), list()) #> eliz2$epochs              L2 list(structure(list(created_epoch = \"113041635 ... #> eliz2$authorized_official L2 list(structure(list(basic_authorized_official_ ... #> eliz2$basic               L2 list(structure(list(basic_organization_name =  ..."},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"medicare-order-and-referring-api","dir":"Articles","previous_headings":"","what":"Medicare Order and Referring API","title":"Overview of Provider","text":"provider currently eligible make referrals Medicare Part B Home Health Agency (HHA)? Order Durable Medical Equipment (DME) Power Mobility Devices (PMDs)? Search Medicare’s Order Referring API provider_moar():","code":"order_refer(npi = 1083879860) |>    gt::gt() |>    provider:::gt_theme_provider() |>    gt::tab_header(title = \"Provider Results for NPI 1083879860\",     subtitle = gtExtras::add_text_img(\"Report generated with\", url = \"https://raw.githubusercontent.com/andrewallenbruce/provider/main/pkgdown/favicon/apple-touch-icon-180x180.png\", height = 25)) |>    gt::text_transform(locations = gt::cells_body(columns = c(partb, dme, hha, pmd)),                      fn = function(x) {                        if (x == as.character(\"TRUE\")) {gt::html(fontawesome::fa(\"circle-check\", prefer_type = \"solid\", fill = \"green\", height = \"1.5em\", width = \"1.5em\"))                          } else if (x == as.character(\"FALSE\")) {gt::html(fontawesome::fa(\"circle-xmark\", prefer_type = \"solid\", fill = \"red\"))                          }                      }                        )"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"medicare-provider-and-supplier-taxonomy-crosswalk-api","dir":"Articles","previous_headings":"","what":"Medicare Provider and Supplier Taxonomy Crosswalk API","title":"Overview of Provider","text":"may need find Medicare’s specialty codes provider’s taxonomies. Using output NPPES search first example, can search Medicare’s Provider Supplier Taxonomy Crosswalk API taxonomy_crosswalk():   Providers may need update digital contact information NPPES system. check, can access CMS Public Reporting Missing Digital Contact Information API missing_information(). appear search results, ’s time update NPPES contact information:    Using physician_by_service(), can access Medicare’s Physician & Practitioners - Provider Service API:   API contains data going back 2013, can perform long-term analysis provider’s Medicare data:  Using packages like {gt} & {ggplot2}, can create tables graphs reporting purposes:","code":"taxonomy_crosswalk(taxonomy_code = \"282NC0060X\") |> terse::terse() #> $medicare_specialty_code                                          c1 A0[7]  ... #> $medicare_provider_supplier_type_description                      c1 Critic ... #> $provider_taxonomy_code                                           c1 282NC0 ... #> $provider_taxonomy_description_type_classification_specialization c1 Hospit ... missing_information(npi = 1114058443) |> terse::terse() #> $npi        c1 1114058443 #> $last_name  c1 Smith      #> $first_name c1 David opt_out(npi = 1114058443) |> terse::terse() #> $first_name                  c1 David            #> $last_name                   c1 Smith            #> $npi                         c1 1114058443       #> $specialty                   c1 Psychiatry       #> $optout_effective_date       p1 2014-08-15       #> $optout_end_date             p1 2024-08-15       #> $first_line_street_address   c1 3101 STELLING DR #> $second_line_street_address  c1 NA               #> $city_name                   c1 PALO ALTO        #> $state_code                  c1 CA               #> $zip_code                    c1 943033960        #> $eligible_to_order_and_refer l1 T                #> $last_updated                p1 2022-12-15 purrr::map_dfr(2013:2020, ~physician_by_service(npi = 1003000126, year = .x)) |> terse::terse() #> $year         i8 2013      , 2014      , 2015      , 2016      , 2017       ... #> $rndrng_npi   c8 1003000126, 1003000126, 1003000126, 1003000126, 1003000126 ... #> $rndrng_prvdr L8 list(structure(list(rndrng_prvdr_last_org_name = c(\"Enkesh ... #> $totals_srvcs L8 list(structure(list(tot_benes = c(138L, 95L, 47L, 381L, 10 ... #> $hcpcs        L8 list(structure(list(hcpcs_cd = c(\"99222\", \"99223\", \"99231\" ... #> $averages     L8 list(structure(list(avg_sbmtd_chrg = c(368.62676056, 524.6 ... purrr::map_dfr(2013:2020, ~physician_by_service(npi = 1003000126, year = .x)) |>    dplyr::group_by(hcpcs_cd, hcpcs_desc) |>    dplyr::summarise(     Beneficiaries = sum(tot_benes),     Services = sum(tot_srvcs),     Avg_Billed = janitor::round_half_up(mean(avg_sbmtd_chrg), digits = 2),     Avg_Allowed = janitor::round_half_up(mean(avg_mdcr_alowd_amt), digits = 2),     Avg_Payment = janitor::round_half_up(mean(avg_mdcr_pymt_amt), digits = 2)) |>    dplyr::ungroup() |>    dplyr::rename(HCPCS = hcpcs_cd,                  Description = hcpcs_desc,                 \"Avg Charge\" = Avg_Billed,                 \"Avg Allowed\" = Avg_Allowed,                 \"Avg Payment\" = Avg_Payment) |>    dplyr::arrange(dplyr::desc(Services)) |>    gt::gt() |>    gtExtras::gt_add_divider(columns = \"HCPCS\", style = \"dotted\") |>    gtExtras::gt_merge_stack(col1 = HCPCS,                             col2 = Description,                            small_cap = FALSE,                            font_size = c(\"16px\", \"14px\"),                            font_weight = c(\"bold\", \"normal\"),                            palette = c(\"black\", \"darkgray\")) |>    gt::tab_style(style = list(gt::cell_fill(color = \"#F54444\"),                               gt::cell_text(color = \"white\",                                             weight = \"bold\")),                  locations = gt::cells_row_groups()) |>    provider:::gt_theme_provider() |>    gt::tab_header(title = \"Provider Results for NPI 1114058443\",   subtitle = gtExtras::add_text_img(\"Report generated with\",    url = \"https://raw.githubusercontent.com/andrewallenbruce/provider/main/pkgdown/favicon/apple-touch-icon-180x180.png\",    height = 25)) #> Error in `dplyr::group_by()`: #> ! Must group by variables found in `.data`. #> Column `hcpcs_cd` is not found. #> Column `hcpcs_desc` is not found."},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2023). provider: Access Public Healthcare Provider Data. https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider.","code":"@Manual{,   title = {provider: Access Public Healthcare Provider Data},   author = {Andrew Bruce},   year = {2023},   note = {https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider}, }"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"provider-","dir":"","previous_headings":"","what":"Access Public Healthcare Provider Data","title":"Access Public Healthcare Provider Data","text":"Providing easy access healthcare provider-centric data publicly available APIs & sources.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access Public Healthcare Provider Data","text":"can install development version provider GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"andrewallenbruce/provider\") # install.packages(\"remotes\") remotes::install_github(\"andrewallenbruce/provider\")"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Access Public Healthcare Provider Data","text":"package primarily focused accessing public API data can linked together via healthcare provider’s National Provider Identifier (NPI). Thus far, none APIs require creation user account API key. data tend fall (sometimes ) one two categories: informational/operational analytical. gets interesting start link together.","code":"library(provider)"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"nppes-npi-registry","dir":"","previous_headings":"Information APIs","what":"NPPES NPI Registry","title":"Access Public Healthcare Provider Data","text":"Basic Information  Taxonomies  Addresses  Identifiers","code":"npi_1 <- provider::nppes_npi(npi = 1710975040) |> dplyr::rename(npi = number) npi_1 |> dplyr::glimpse() #> Rows: 1 #> Columns: 15 #> $ datetime          <dttm> 2023-02-08 13:07:04 #> $ outcome           <chr> \"results\" #> $ enumeration_type  <chr> \"NPI-1\" #> $ npi               <chr> \"1710975040\" #> $ name              <chr> \"JOHN HERRING\" #> $ city              <chr> \"OLNEY\" #> $ state             <chr> \"MD\" #> $ addresses         <list> [<data.frame[2 x 11]>] #> $ practiceLocations <list> [] #> $ taxonomies        <list> [<data.frame[1 x 6]>] #> $ identifiers       <list> [<data.frame[5 x 5]>] #> $ endpoints         <list> [] #> $ other_names       <list> [] #> $ epochs            <list> [<tbl_df[1 x 2]>] #> $ basic             <list> [<tbl_df[1 x 11]>] npi_1 |>    dplyr::select(enumeration_type:state) |>    gluedown::md_table() npi_1 |>    dplyr::select(basic) |>    tidyr::unnest(basic) |>    tidyr::pivot_longer(dplyr::everything()) |>    gluedown::md_table() npi_1 |>    dplyr::select(taxonomies) |>    tidyr::unnest(taxonomies) |>    dplyr::mutate(dplyr::across(tidyselect::where(is.character), ~dplyr::na_if(., \"\")),                     dplyr::across(tidyselect::where(is.character), ~dplyr::na_if(., \"N/A\"))) |>    dplyr::left_join(nucc_taxonomy_230, by = \"code\") |>    dplyr::select(!c(taxonomy_group, desc, specialization, definition, notes, display_name, section)) |>    provider:::display_long() |>    gluedown::md_table() npi_1 |>    dplyr::select(addresses) |>    tidyr::unnest(addresses) |>    tidyr::unite(\"address\",                 address_1:address_2,                 remove = TRUE,                 na.rm = TRUE,                 sep = \" \") |>    dplyr::mutate(telephone_number = campfin::normal_phone(telephone_number),                 fax_number = campfin::normal_phone(fax_number),                 postal_code = campfin::normal_zip(postal_code),                 address = campfin::normal_address(address)) |>    tidyr::pivot_longer(!address_purpose) |>    tidyr::pivot_wider(names_from = address_purpose,                       values_from = value) |>    gluedown::md_table() npi_1 |>    dplyr::select(identifiers) |>    tidyr::unnest(identifiers) |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"cms-physician-facility-affiliations","dir":"","previous_headings":"Information APIs","what":"CMS Physician Facility Affiliations","title":"Access Public Healthcare Provider Data","text":"","code":"provider::facility_affiliations(npi = 1003019563) |>    dplyr::select(-record_number, -suff, -parent_ccn) |>    gluedown::md_table() provider::facility_affiliations(facility_ccn = \"060004\") |>    dplyr::select(-record_number, -suff, -parent_ccn) |>    head(n = 25) |>    gluedown::md_table() provider::facility_affiliations(parent_ccn = 670055) |>    dplyr::select(-record_number, -suff, -parent_ccn) |>    gluedown::md_table() provider::facility_affiliations(first_name = \"John\",                                  last_name = \"Hill\",                                  facility_type = \"Home Health Agency\") |>    dplyr::select(-record_number, -parent_ccn) |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"hospital-enrollments","dir":"","previous_headings":"Information APIs","what":"Hospital Enrollments","title":"Access Public Healthcare Provider Data","text":"","code":"provider::hospital_enrollment(ccn = \"060004\") |>    tidyr::unite(\"address\", address_line_1:address_line_2,                 remove = TRUE, na.rm = TRUE, sep = \" \") |>    dplyr::mutate(address = campfin::normal_address(address),                 zip_code = campfin::normal_zip(zip_code)) |>    provider:::display_long() |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"cms-doctors-and-clinicians-national-file","dir":"","previous_headings":"Information APIs","what":"CMS Doctors and Clinicians National File","title":"Access Public Healthcare Provider Data","text":"","code":"dr_clin <- provider::doctors_and_clinicians(npi = 1407263999) |>    dplyr::select(!c(record_number,                     suff,                     cred,                     sec_spec_1:sec_spec_all,                     ln_2_sprs, adrs_id)) |>    tidyr::unite(\"address\",                 adr_ln_1:adr_ln_2,                 remove = TRUE,                 na.rm = TRUE,                 sep = \" \") |>    dplyr::mutate(phn_numbr = campfin::normal_phone(phn_numbr),                 zip = campfin::normal_zip(zip),                 address = campfin::normal_address(address))  dr_clin |> dplyr::glimpse() #> Rows: 2 #> Columns: 21 #> $ npi         <chr> \"1407263999\", \"1407263999\" #> $ ind_pac_id  <chr> \"8729208152\", \"8729208152\" #> $ ind_enrl_id <chr> \"I20141006002245\", \"I20141006002245\" #> $ lst_nm      <chr> \"AVERY\", \"AVERY\" #> $ frst_nm     <chr> \"ROBIN\", \"ROBIN\" #> $ mid_nm      <chr> \"A\", \"A\" #> $ gndr        <chr> \"F\", \"F\" #> $ med_sch     <chr> \"OTHER\", \"OTHER\" #> $ grd_yr      <chr> \"1989\", \"1989\" #> $ pri_spec    <chr> \"CLINICAL PSYCHOLOGIST\", \"CLINICAL PSYCHOLOGIST\" #> $ telehlth    <chr> \"Y\", \"Y\" #> $ org_nm      <chr> NA, \"LARRY BROOKS, PH.D., LLC\" #> $ org_pac_id  <chr> NA, \"6608028899\" #> $ num_org_mem <chr> NA, \"2\" #> $ address     <chr> \"9999 NE 2ND AVE SUITE 209E\", \"3810 HOLLYWOOD BLVD SUITE 2\" #> $ cty         <chr> \"MIAMI SHORES\", \"HOLLYWOOD\" #> $ st          <chr> \"FL\", \"FL\" #> $ zip         <chr> \"33138\", \"33021\" #> $ phn_numbr   <chr> NA, \"(954) 962-3888\" #> $ ind_assgn   <chr> \"Y\", \"Y\" #> $ grp_assgn   <chr> \"M\", \"Y\" dr_clin |>    dplyr::slice_head() |>    provider:::display_long() |>    gluedown::md_table() dr_clin |>    dplyr::slice_tail() |>    provider:::display_long() |>    gluedown::md_table() # search by medical school and/or graduation year provider::doctors_and_clinicians(med_sch = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\",                                   grad_year = 2003,                                   state = \"FL\") |>    dplyr::glimpse() #> Rows: 6 #> Columns: 32 #> $ record_number <chr> \"2241611\", \"2241616\", \"4005191\", \"4586101\", \"6700176\", \"… #> $ npi           <chr> \"1497955652\", \"1497955652\", \"1497955652\", \"1801000963\", … #> $ ind_pac_id    <chr> \"3476647330\", \"3476647330\", \"3476647330\", \"3577616598\", … #> $ ind_enrl_id   <chr> \"I20070922000027\", \"I20070922000027\", \"I20070922000027\",… #> $ lst_nm        <chr> \"CHIEN\", \"CHIEN\", \"CHIEN\", \"SCHETTINO\", \"GOLDBERG\", \"KAP… #> $ frst_nm       <chr> \"YUI\", \"YUI\", \"YUI\", \"CHRIS\", \"BRIAN\", \"KEVIN\" #> $ mid_nm        <chr> \"F\", \"F\", \"F\", \"J\", \"KEITH\", \"M\" #> $ suff          <chr> NA, NA, NA, NA, NA, NA #> $ gndr          <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\" #> $ cred          <chr> NA, NA, NA, NA, NA, NA #> $ med_sch       <chr> \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\", \"NEW YORK UNIV… #> $ grd_yr        <chr> \"2003\", \"2003\", \"2003\", \"2003\", \"2003\", \"2003\" #> $ pri_spec      <chr> \"OPHTHALMOLOGY\", \"OPHTHALMOLOGY\", \"OPHTHALMOLOGY\", \"PEDI… #> $ sec_spec_1    <chr> NA, NA, NA, \"RADIATION ONCOLOGY\", NA, \"ORTHOPEDIC SURGER… #> $ sec_spec_2    <chr> NA, NA, NA, NA, NA, NA #> $ sec_spec_3    <chr> NA, NA, NA, NA, NA, NA #> $ sec_spec_4    <chr> NA, NA, NA, NA, NA, NA #> $ sec_spec_all  <chr> NA, NA, NA, \"RADIATION ONCOLOGY\", NA, \"ORTHOPEDIC SURGER… #> $ telehlth      <chr> NA, NA, NA, NA, NA, NA #> $ org_nm        <chr> \"EYE PHYSICIANS OF FLORIDA LLP\", \"EYE PHYSICIANS OF FLOR… #> $ org_pac_id    <chr> \"1254414675\", \"1254414675\", \"2860553724\", \"3274795109\", … #> $ num_org_mem   <chr> \"49\", \"49\", \"3\", \"1646\", \"56\", \"111\" #> $ adr_ln_1      <chr> \"1 SW 129TH AVE\", \"8051 W SUNRISE BLVD\", \"1400 NE MIAMI … #> $ adr_ln_2      <chr> \"209 CORRECTVISION LASER INSTITUTE LLC\", NA, \"SUITE 203\"… #> $ ln_2_sprs     <chr> NA, NA, NA, NA, NA, NA #> $ cty           <chr> \"PEMBROKE PINES\", \"PLANTATION\", \"NORTH MIAMI BEACH\", \"MI… #> $ st            <chr> \"FL\", \"FL\", \"FL\", \"FL\", \"FL\", \"FL\" #> $ zip           <chr> \"330271717\", \"333224103\", \"331794844\", \"331361005\", \"347… #> $ phn_numbr     <chr> \"9544421133\", \"9544742900\", \"3059401500\", \"3052434000\", … #> $ ind_assgn     <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\" #> $ grp_assgn     <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\" #> $ adrs_id       <chr> \"FL330271717PE1XXXXAVEX405\", \"FL333224103PL8051XBLVD400\"…"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"additional-phone-numbers","dir":"","previous_headings":"Information APIs","what":"Additional Phone Numbers","title":"Access Public Healthcare Provider Data","text":"","code":"provider::addl_phone_numbers(npi = 1407263999) |>    dplyr::select(prvdr_id, frst_nm, lst_nm, adr_ln_1, adr_ln_2:npi) |>    tidyr::unite(\"address\", adr_ln_1:adr_ln_2, remove = TRUE, na.rm = TRUE, sep = \" \") |>    dplyr::mutate(phn_numbr = campfin::normal_phone(phn_numbr),                 zip = campfin::normal_zip(zip),                 address = campfin::normal_address(address)) |>    gluedown::md_table() addl_phone_numbers(provider_id = \"0042100190\") |>    dplyr::select(prvdr_id, frst_nm, lst_nm, adr_ln_1, adr_ln_2:npi) |>    tidyr::unite(\"address\", adr_ln_1:adr_ln_2, remove = TRUE, na.rm = TRUE, sep = \" \") |>    dplyr::mutate(phn_numbr = campfin::normal_phone(phn_numbr),                 zip = campfin::normal_zip(zip),                 address = campfin::normal_address(address)) |>    gluedown::md_table() addl_phone_numbers(org_pac_id = 6608028899) |>    dplyr::select(prvdr_id, frst_nm, lst_nm, adr_ln_1, adr_ln_2:npi) |>    tidyr::unite(\"address\", adr_ln_1:adr_ln_2, remove = TRUE, na.rm = TRUE, sep = \" \") |>    dplyr::mutate(phn_numbr = campfin::normal_phone(phn_numbr),                 zip = campfin::normal_zip(zip),                 address = campfin::normal_address(address)) |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"cms-missing-contact-information","dir":"","previous_headings":"Information APIs","what":"CMS Missing Contact Information","title":"Access Public Healthcare Provider Data","text":"","code":"provider::missing_information(npi = 1144224569) |> gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-order-and-referring","dir":"","previous_headings":"Information APIs","what":"Medicare Order and Referring","title":"Access Public Healthcare Provider Data","text":"","code":"provider::order_refer(npi = 1083879860) |> gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-opt-out-affidavits","dir":"","previous_headings":"Information APIs","what":"Medicare Opt-Out Affidavits","title":"Access Public Healthcare Provider Data","text":"","code":"provider::opt_out(last = \"Aaron\") |>    tidyr::unite(\"address\", first_line_street_address:second_line_street_address,                 remove = TRUE,                 na.rm = TRUE,                 sep = \" \") |>    dplyr::mutate(zip_code = campfin::normal_zip(zip_code),                 address = campfin::normal_address(address)) |>    provider:::display_long() |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-provider-and-supplier-taxonomy-crosswalk","dir":"","previous_headings":"Information APIs","what":"Medicare Provider and Supplier Taxonomy Crosswalk","title":"Access Public Healthcare Provider Data","text":"","code":"provider::taxonomy_crosswalk(specialty_desc = \"Rehabilitation Agency\") |>    dplyr::select(medicare_specialty_code,                  medicare_specialty_description = medicare_provider_supplier_type_description,                 provider_taxonomy_code,                 provider_taxonomy_description = provider_taxonomy_description_type_classification_specialization) |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-fee-for-service-public-provider-enrollment","dir":"","previous_headings":"Information APIs","what":"Medicare Fee-For-Service Public Provider Enrollment","title":"Access Public Healthcare Provider Data","text":"","code":"provider::provider_enrollment(npi = 1083879860) |>    provider:::display_long() |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-pending-initial-logging-and-tracking","dir":"","previous_headings":"Information APIs","what":"Medicare Pending Initial Logging and Tracking","title":"Access Public Healthcare Provider Data","text":"","code":"provider::pending_applications(npi = 1487003984,                                 type = \"physician\") |>    gluedown::md_table() provider::pending_applications(npi = 1487003984,                                 type = \"non-physician\") |>    gluedown::md_table() provider::pending_applications(last_name = \"Abbott\",                                 type = \"non-physician\") |>    gluedown::md_table() pending_applications(first_name = \"John\",                       type = \"physician\") |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-revalidation-apis","dir":"","previous_headings":"Information APIs","what":"Medicare Revalidation APIs","title":"Access Public Healthcare Provider Data","text":"Revalidation Due Date List  Revalidation Reassignment List    Revalidation Clinic Group Practice Reassignment","code":"date <- provider::revalidation_date(npi = 1710912209) date |> provider:::display_long() |> gluedown::md_table() reassign <- provider::revalidation_reassign(ind_npi = 1710912209) reassign |> dplyr::glimpse() #> Rows: 5 #> Columns: 16 #> $ group_pac_id                                 <dbl> 3678655222, 9931511052, 2… #> $ group_enrollment_id                          <chr> \"O20080205000002\", \"O2020… #> $ group_legal_business_name                    <chr> \"#1 Wise Podiatry Care P.… #> $ group_state_code                             <chr> \"NY\", \"NY\", \"NY\", \"NY\", \"… #> $ group_due_date                               <chr> \"10/31/2019\", \"TBD\", \"TBD… #> $ group_reassignments_and_physician_assistants <int> 1, 1, 1, 1, 1 #> $ record_type                                  <chr> \"Reassignment\", \"Reassign… #> $ individual_pac_id                            <dbl> 2860474988, 2860474988, 2… #> $ individual_enrollment_id                     <chr> \"I20040602001711\", \"I2004… #> $ individual_npi                               <int> 1710912209, 1710912209, 1… #> $ individual_first_name                        <chr> \"Yelena\", \"Yelena\", \"Yele… #> $ individual_last_name                         <chr> \"Voronova\", \"Voronova\", \"… #> $ individual_state_code                        <chr> \"NY\", \"NY\", \"NY\", \"NY\", \"… #> $ individual_specialty_description             <chr> \"Podiatry\", \"Podiatry\", \"… #> $ individual_due_date                          <chr> \"10/31/2019\", \"10/31/2019… #> $ individual_total_employer_associations       <int> 5, 5, 5, 5, 5 reassign |>    dplyr::select(dplyr::contains(\"individual\")) |>    dplyr::slice_head() |>    provider:::display_long() |>    gluedown::md_table() reassign |>    dplyr::select(dplyr::contains(\"group\")) |>    provider:::display_long() |>    gluedown::md_table() group <- provider::revalidation_group(ind_npi = 1710912209) group |> dplyr::glimpse() #> Rows: 5 #> Columns: 15 #> $ group_pac_id                                 <dbl> 3678655222, 9931511052, 2… #> $ group_enrollment_id                          <chr> \"O20080205000002\", \"O2020… #> $ group_legal_business_name                    <chr> \"#1 Wise Podiatry Care P.… #> $ group_state_code                             <chr> \"NY\", \"NY\", \"NY\", \"NY\", \"… #> $ group_due_date                               <chr> \"10/31/2019\", \"TBD\", \"TBD… #> $ group_reassignments_and_physician_assistants <int> 1, 1, 1, 1, 1 #> $ record_type                                  <chr> \"Reassignment\", \"Reassign… #> $ individual_enrollment_id                     <chr> \"I20040602001711\", \"I2004… #> $ individual_npi                               <int> 1710912209, 1710912209, 1… #> $ individual_first_name                        <chr> \"Yelena\", \"Yelena\", \"Yele… #> $ individual_last_name                         <chr> \"Voronova\", \"Voronova\", \"… #> $ individual_state_code                        <chr> \"NY\", \"NY\", \"NY\", \"NY\", \"… #> $ individual_specialty_description             <chr> \"Podiatry\", \"Podiatry\", \"… #> $ individual_due_date                          <chr> \"10/31/2019\", \"10/31/2019… #> $ individual_total_employer_associations       <int> 5, 5, 5, 5, 5 group |>    dplyr::select(dplyr::contains(\"individual\")) |>    dplyr::slice_head() |>    provider:::display_long() |>    gluedown::md_table() group |>    dplyr::select(dplyr::contains(\"group\")) |>    provider:::display_long() |>    gluedown::md_table()"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"cms-open-payments-api","dir":"","previous_headings":"Analytical APIs","what":"CMS Open Payments API","title":"Access Public Healthcare Provider Data","text":"","code":"op <- open_payments(recipient_npi = 1043218118) op |> dplyr::glimpse() #> Rows: 92 #> Columns: 14 #> $ program_year                           <chr> \"2021\", \"2021\", \"2021\", \"2021\",… #> $ record_number                          <chr> \"1\", \"692021\", \"4385936\", \"4385… #> $ change_type                            <chr> \"UNCHANGED\", \"UNCHANGED\", \"UNCH… #> $ total_amount_of_payment_usdollars      <dbl> 2500.00, 69.90, 107.93, 97.14, … #> $ date_of_payment                        <dttm> 2021-05-26, 2021-03-04, 2021-0… #> $ form_of_payment_or_transfer_of_value   <chr> \"Cash or cash equivalent\", \"In-… #> $ nature_of_payment_or_transfer_of_value <chr> \"Compensation for services othe… #> $ record_id                              <chr> \"754966348\", \"787838145\", \"7971… #> $ covered_recipient                      <list> [<tbl_df[1 x 24]>], [<tbl_df[1… #> $ recipient_address                      <list> [<tbl_df[1 x 8]>], [<tbl_df[1 … #> $ applicable_mfg_gpo                     <list> [<tbl_df[1 x 5]>], [<tbl_df[1 … #> $ associated_drug_device                 <list> [<tbl_df[1 x 40]>], [<tbl_df[1… #> $ payment_related_data                   <list> [<tbl_df[1 x 14]>], [<tbl_df[1… #> $ teaching_hospital                      <list> [<tbl_df[1 x 3]>], [<tbl_df[1 … op |>    tidyr::hoist(covered_recipient,                 recipient_npi = \"covered_recipient_npi\",                profile_id = \"covered_recipient_profile_id\",                first_name = \"covered_recipient_first_name\",                 last_name = \"covered_recipient_last_name\",                credential = \"covered_recipient_primary_type_1\",) |>    tidyr::hoist(recipient_address,                 city = \"recipient_city\",                 state = \"recipient_state\") |>    dplyr::select(program_year,                  recipient_npi,                  profile_id,                 first_name,                 last_name,                 credential,                 city,                 state) |>    dplyr::slice_head() |>   provider:::display_long() |>    gluedown::md_table() op_2 <- op |>    tidyr::hoist(applicable_mfg_gpo,                 manufacturer_gpo_paying = \"applicable_manufacturer_or_applicable_gpo_making_payment_name\") |>   tidyr::hoist(associated_drug_device,                 type = \"indicate_drug_or_biological_or_device_or_medical_supply_1\",                therapeutic_category = \"product_category_or_therapeutic_area_1\",                name = \"name_of_drug_or_biological_or_device_or_medical_supply_1\") |>    dplyr::select(payment_date = date_of_payment,                  manufacturer_gpo_paying,                 type,                  name,                 therapeutic_category,                 payment_total = total_amount_of_payment_usdollars,                 nature_of_payment = nature_of_payment_or_transfer_of_value) |>    dplyr::arrange(payment_date)  op_2 |>    dplyr::group_by(manufacturer_gpo_paying,                    nature_of_payment,                    name) |>    dplyr::summarise(n = dplyr::n(),                    payment_total = sum(payment_total),                     .groups = \"drop\") |>    dplyr::mutate(nature_of_payment = stringr::str_trunc(nature_of_payment, 20, \"right\")) |>    dplyr::arrange(dplyr::desc(payment_total)) |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-monthly-enrollment-api","dir":"","previous_headings":"Analytical APIs","what":"Medicare Monthly Enrollment API","title":"Access Public Healthcare Provider Data","text":"","code":"months <- tibble::enframe(month.name) |>    dplyr::select(-name) |>    dplyr::slice(1:7) |>    tibble::deframe()  bene <- purrr::map_dfr(months, ~beneficiary_enrollment(year = 2022,                                                         geo_level = \"State\",                                                         state = \"Georgia\",                                                         month = .x))  bene |> dplyr::glimpse() #> Rows: 7 #> Columns: 22 #> $ year                           <int> 2022, 2022, 2022, 2022, 2022, 2022, 2022 #> $ month                          <chr> \"January\", \"February\", \"March\", \"April\"… #> $ bene_geo_lvl                   <chr> \"State\", \"State\", \"State\", \"State\", \"St… #> $ bene_state_abrvtn              <chr> \"GA\", \"GA\", \"GA\", \"GA\", \"GA\", \"GA\", \"GA\" #> $ bene_state_desc                <chr> \"Georgia\", \"Georgia\", \"Georgia\", \"Georg… #> $ bene_county_desc               <chr> \"Total\", \"Total\", \"Total\", \"Total\", \"To… #> $ bene_fips_cd                   <chr> \"13\", \"13\", \"13\", \"13\", \"13\", \"13\", \"13\" #> $ tot_benes                      <int> 1830959, 1830025, 1831573, 1833135, 183… #> $ orgnl_mdcr_benes               <int> 915752, 913347, 912897, 911263, 910417,… #> $ ma_and_oth_benes               <int> 915207, 916678, 918676, 921872, 924770,… #> $ aged_tot_benes                 <int> 1572257, 1571050, 1572037, 1573058, 157… #> $ aged_esrd_benes                <int> 11635, 11312, 11096, 10888, 10716, 1052… #> $ aged_no_esrd_benes             <int> 1560622, 1559738, 1560941, 1562170, 156… #> $ dsbld_tot_benes                <int> 258702, 258975, 259536, 260077, 260617,… #> $ dsbld_esrd_and_esrd_only_benes <int> 12011, 11905, 11853, 11835, 11827, 1179… #> $ dsbld_no_esrd_benes            <int> 246691, 247070, 247683, 248242, 248790,… #> $ a_b_tot_benes                  <int> 1681852, 1680770, 1681852, 1683513, 168… #> $ a_b_orgnl_mdcr_benes           <int> 767454, 764903, 763986, 762450, 761518,… #> $ a_b_ma_and_oth_benes           <int> 914398, 915867, 917866, 921063, 923961,… #> $ prscrptn_drug_tot_benes        <int> 1410752, 1410748, 1411729, 1413507, 141… #> $ prscrptn_drug_pdp_benes        <int> 538559, 536815, 535968, 534687, 534006,… #> $ prscrptn_drug_mapd_benes       <int> 872193, 873933, 875761, 878820, 881515,… bene |>    dplyr::select(state = bene_state_abrvtn,                 month,                  tot_benes,                  orgnl_mdcr_benes,                  ma_and_oth_benes) |>    dplyr::mutate(tot_change = tot_benes - dplyr::lag(tot_benes), .after = tot_benes) |>     dplyr::mutate(orig_pct = round(orgnl_mdcr_benes / tot_benes, 2),                 ma_other_pct = round(ma_and_oth_benes / tot_benes, 2)) |>    gluedown::md_table() bene |>    dplyr::select(state = bene_state_abrvtn,                 month,                  tot_benes,                  aged_tot_benes,                 aged_esrd_benes,                 aged_no_esrd_benes) |>    dplyr::mutate(aged_pct_of_tot = round(aged_tot_benes / tot_benes, 2), .after = aged_tot_benes) |>    dplyr::mutate(esrd_pct_of_aged = round(aged_esrd_benes / aged_tot_benes, 2), .after = aged_esrd_benes) |>    gluedown::md_table() bene |>    dplyr::select(month,                  tot_benes,                 tot_orig = orgnl_mdcr_benes,                  tot_ma_oth = ma_and_oth_benes,                 ab_tot = a_b_tot_benes,                 ab_orig = a_b_orgnl_mdcr_benes,                 ab_ma_oth = a_b_ma_and_oth_benes) |>    dplyr::mutate(tot_check = tot_orig + tot_ma_oth, .after = tot_benes) |>    dplyr::mutate(ab_tot_check = ab_orig + ab_ma_oth, .after = ab_tot) |>    dplyr::mutate(tot_ab_diff = tot_benes - ab_tot) |>    gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-physician--other-practitioners-apis","dir":"","previous_headings":"Analytical APIs","what":"Medicare Physician & Other Practitioners APIs","title":"Access Public Healthcare Provider Data","text":"Provider Service:    Geography Service API:         Provider API:","code":"pbs <- purrr::map_dfr(2013:2020, ~physician_by_service(npi = 1003000126, year = .x)) pbs |> dplyr::glimpse() #> Rows: 8 #> Columns: 6 #> $ year         <int> 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 #> $ rndrng_npi   <chr> \"1003000126\", \"1003000126\", \"1003000126\", \"1003000126\", \"… #> $ rndrng_prvdr <list> [<tbl_df[7 x 17]>], [<tbl_df[8 x 17]>], [<tbl_df[11 x 17]… #> $ totals_srvcs <list> [<tbl_df[7 x 3]>], [<tbl_df[8 x 3]>], [<tbl_df[11 x 3]>]… #> $ hcpcs        <list> [<tbl_df[7 x 4]>], [<tbl_df[8 x 4]>], [<tbl_df[11 x 4]>]… #> $ averages     <list> [<tbl_df[7 x 4]>], [<tbl_df[8 x 4]>], [<tbl_df[11 x 4]>]… pbs |>    dplyr::select(rndrng_prvdr) |>    tidyr::unnest(rndrng_prvdr) |>    dplyr::slice_head() |>    provider:::display_long() |>    gluedown::md_table() pbs |>    dplyr::select(year, totals_srvcs, hcpcs, averages) |>    tidyr::unnest(c(totals_srvcs, hcpcs, averages)) |>    dplyr::select(!c(hcpcs_desc:place_of_srvc, tot_bene_day_srvcs, avg_mdcr_stdzd_amt)) |>    dplyr::arrange(dplyr::desc(year), dplyr::desc(tot_srvcs)) |>    gluedown::md_table() srvcs <- provider::physician_by_service(npi = 1003000126, year = 2020) |>           tidyr::unnest(cols = c(rndrng_prvdr, totals_srvcs, hcpcs, averages))  ind <- srvcs |>    dplyr::mutate(level = \"Individual\") |>    dplyr::select(year,                  level,                 tot_benes:tot_srvcs,                  hcpcs_cd,                  avg_sbmtd_chrg:avg_mdcr_pymt_amt) |>    dplyr::arrange(dplyr::desc(year), dplyr::desc(tot_srvcs))  ind |> gluedown::md_table() state <- purrr::map_dfr(srvcs$hcpcs_cd, ~physician_by_geography(geo_desc = \"Maryland\", year = 2020, hcpcs_code = .x))  state <- state |>    dplyr::filter(place_of_srvc == \"F\") |>     dplyr::select(year,                  level = rndrng_prvdr_geo_lvl,                 tot_benes:tot_srvcs,                 hcpcs_cd,                  avg_sbmtd_chrg:avg_mdcr_pymt_amt)  state |> gluedown::md_table() nat <- purrr::map_dfr(srvcs$hcpcs_cd, ~physician_by_geography(geo_level = \"National\", year = 2020, hcpcs_code = .x))  nat <- nat |>    dplyr::filter(place_of_srvc == \"F\") |>     dplyr::select(year,                  level = rndrng_prvdr_geo_desc,                 tot_benes:tot_srvcs,                 hcpcs_cd,                  avg_sbmtd_chrg:avg_mdcr_pymt_amt) |>    dplyr::arrange(dplyr::desc(year), dplyr::desc(tot_srvcs))  nat |> gluedown::md_table() ind_lng <- ind |>    dplyr::select(!c(year)) |>    tidyr::pivot_longer(!c(level, hcpcs_cd)) |>    dplyr::mutate(value = round(value, 2))  st_lng <- state |>    dplyr::select(!c(year)) |>    tidyr::pivot_longer(!c(level, hcpcs_cd)) |>    dplyr::mutate(value = round(value, 2))  nat_lng <- nat |>    dplyr::select(!c(year)) |>    tidyr::pivot_longer(!c(level, hcpcs_cd)) |>    dplyr::mutate(value = round(value, 2))  join_2020 <- dplyr::full_join(ind_lng, st_lng, by = c(\"hcpcs_cd\", \"name\", \"level\", \"value\")) |>    dplyr::full_join(nat_lng, by = c(\"hcpcs_cd\", \"name\", \"level\", \"value\")) |>    dplyr::arrange(hcpcs_cd, name) join_2020 |>    dplyr::filter(name == \"avg_sbmtd_chrg\") |>    tidyr::pivot_wider(names_from = level,                       names_glue = \"{level}_avg_charge\",                       values_from = value) |>    dplyr::select(!c(name)) |>    gluedown::md_table() join_2020 |>    dplyr::filter(name == \"avg_mdcr_alowd_amt\") |>    tidyr::pivot_wider(names_from = level,                       names_glue = \"{level}_avg_allowed\",                       values_from = value) |>    dplyr::select(!c(name)) |>    gluedown::md_table() join_2020 |>    dplyr::filter(name == \"avg_mdcr_pymt_amt\") |>    tidyr::pivot_wider(names_from = level,                       names_glue = \"{level}_avg_pymt\",                       values_from = value) |>    dplyr::select(!c(name)) |>    gluedown::md_table() prov <- purrr::map_dfr(as.character(2013:2020), ~physician_by_provider(npi = 1003000126, year = .x)) prov |> dplyr::glimpse() #> Rows: 8 #> Columns: 11 #> $ year         <chr> \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"… #> $ rndrng_npi   <chr> \"1003000126\", \"1003000126\", \"1003000126\", \"1003000126\", \"… #> $ rndrng_prvdr <list> [<tbl_df[1 x 17]>], [<tbl_df[1 x 17]>], [<tbl_df[1 x 17]… #> $ totals_srvcs <list> [<tbl_df[1 x 7]>], [<tbl_df[1 x 7]>], [<tbl_df[1 x 7]>],… #> $ drug_srvcs   <list> [<tbl_df[1 x 8]>], [<tbl_df[1 x 8]>], [<tbl_df[1 x 8]>],… #> $ med_srvcs    <list> [<tbl_df[1 x 8]>], [<tbl_df[1 x 8]>], [<tbl_df[1 x 8]>],… #> $ bene_age     <list> [<tbl_df[1 x 5]>], [<tbl_df[1 x 5]>], [<tbl_df[1 x 5]>],… #> $ bene_sex     <list> [<tbl_df[1 x 2]>], [<tbl_df[1 x 2]>], [<tbl_df[1 x 2]>],… #> $ bene_race    <list> [<tbl_df[1 x 6]>], [<tbl_df[1 x 6]>], [<tbl_df[1 x 6]>],… #> $ bene_status  <list> [<tbl_df[1 x 2]>], [<tbl_df[1 x 2]>], [<tbl_df[1 x 2]>],… #> $ bene_cc      <list> [<tbl_df[1 x 17]>], [<tbl_df[1 x 17]>], [<tbl_df[1 x 17]… prov |> dplyr::select(rndrng_npi, rndrng_prvdr) |>          tidyr::unnest(cols = c(rndrng_prvdr)) |>          dplyr::slice_head() |>          tidyr::pivot_longer(cols = dplyr::everything()) |>          gluedown::md_table() prov |> dplyr::select(year, totals_srvcs) |>          tidyr::unnest(cols = c(totals_srvcs)) |>          gluedown::md_table() prov |> dplyr::select(year, bene_age) |>          tidyr::unnest(cols = c(bene_age)) |>          gluedown::md_table() prov |> dplyr::select(year, bene_sex, bene_status) |>          tidyr::unnest(cols = c(bene_sex, bene_status)) |>          gluedown::md_table() prov |> dplyr::select(year, bene_race) |>          tidyr::unnest(cols = c(bene_race)) |>          gluedown::md_table() prov |> dplyr::select(year, bene_cc) |>       tidyr::unnest(cols = c(bene_cc)) |>       gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"medicare-chronic-conditions-apis","dir":"","previous_headings":"Analytical APIs","what":"Medicare Chronic Conditions APIs","title":"Access Public Healthcare Provider Data","text":"Medicare Multiple Chronic Conditions API   Medicare Specific Chronic Conditions API","code":"mult <- cc_multiple(year = 2007,                      geo_lvl = \"National\",                      demo_lvl = \"Race\")  mult |> dplyr::select(year,                        bene_age_lvl,                        bene_demo_desc:er_visits_per_1000_benes) |>          gluedown::md_table() spec <- cc_specific(year = 2007, geo_lvl = \"National\", demo_lvl = \"Race\")  spec |> dplyr::select(year, bene_age_lvl, bene_demo_desc:prvlnc) |>          gluedown::md_table()"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access Public Healthcare Provider Data","text":"Please note provider project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/addl_phone_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Physician - Additional Phone Numbers API — addl_phone_numbers","title":"Search the CMS Physician - Additional Phone Numbers API — addl_phone_numbers","text":"Dataset additional phone numbers clinicians one phone number single practice address.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/addl_phone_numbers.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Physician - Additional Phone Numbers API — addl_phone_numbers","text":"Physician - Additional Phone Numbers","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/addl_phone_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Physician - Additional Phone Numbers API — addl_phone_numbers","text":"","code":"addl_phone_numbers(   npi = NULL,   provider_id = NULL,   first_name = NULL,   middle_name = NULL,   last_name = NULL,   city = NULL,   state = NULL,   zip = NULL,   org_pac_id = NULL,   offset = 0,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/addl_phone_numbers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Physician - Additional Phone Numbers API — addl_phone_numbers","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/addl_phone_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Physician - Additional Phone Numbers API — addl_phone_numbers","text":"npi Unique clinician ID assigned NPPES provider_id Unique individual clinician ID assigned PECOS first_name Individual clinician first name middle_name Individual clinician middle name last_name Individual clinician last name city Group individual's city state Group individual's state zip Group individual's ZIP code (9 digits available) org_pac_id Unique group ID assigned PECOS group offset offset; API pagination clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/addl_phone_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Physician - Additional Phone Numbers API — addl_phone_numbers","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/addl_phone_numbers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Physician - Additional Phone Numbers API — addl_phone_numbers","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/addl_phone_numbers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Physician - Additional Phone Numbers API — addl_phone_numbers","text":"","code":"addl_phone_numbers(npi = 1407263999) #> # A tibble: 2 × 14 #>   record_num…¹ prvdr…² frst_nm mid_nm lst_nm adrs_id adr_l…³ adr_l…⁴ cty   st    #>   <chr>        <chr>   <chr>   <chr>  <chr>  <chr>   <chr>   <chr>   <chr> <chr> #> 1 14684491     872920… ROBIN   A      AVERY  FL3302… 3810 H… Suite 2 HOLL… FL    #> 2 14684496     872920… ROBIN   A      AVERY  FL3313… 9999 N… SUITE … MIAM… FL    #> # … with 4 more variables: zip <chr>, org_pac_id <chr>, phn_numbr <chr>, #> #   npi <chr>, and abbreviated variable names ¹​record_number, ²​prvdr_id, #> #   ³​adr_ln_1, ⁴​adr_ln_2 addl_phone_numbers(provider_id = \"0042100190\") #> # A tibble: 3 × 14 #>   record_num…¹ prvdr…² frst_nm mid_nm lst_nm adrs_id adr_l…³ adr_l…⁴ cty   st    #>   <chr>        <chr>   <chr>   <chr>  <chr>  <chr>   <chr>   <chr>   <chr> <chr> #> 1 41           004210… JOHN    D      VERBR… MI4950… 100 MI… NA      GRAN… MI    #> 2 46           004210… JOHN    D      VERBR… MI4950… 100 MI… NA      GRAN… MI    #> 3 51           004210… JOHN    D      VERBR… MI4950… 1840 W… NA      GRAN… MI    #> # … with 4 more variables: zip <chr>, org_pac_id <chr>, phn_numbr <chr>, #> #   npi <chr>, and abbreviated variable names ¹​record_number, ²​prvdr_id, #> #   ³​adr_ln_1, ⁴​adr_ln_2 addl_phone_numbers(org_pac_id = 6608028899) #> # A tibble: 2 × 14 #>   record_num…¹ prvdr…² frst_nm mid_nm lst_nm adrs_id adr_l…³ adr_l…⁴ cty   st    #>   <chr>        <chr>   <chr>   <chr>  <chr>  <chr>   <chr>   <chr>   <chr> <chr> #> 1 6680871      397179… LAWREN… G      BROOKS FL3302… 3810 H… Suite 2 HOLL… FL    #> 2 14684491     872920… ROBIN   A      AVERY  FL3302… 3810 H… Suite 2 HOLL… FL    #> # … with 4 more variables: zip <chr>, org_pac_id <chr>, phn_numbr <chr>, #> #   npi <chr>, and abbreviated variable names ¹​record_number, ²​prvdr_id, #> #   ³​adr_ln_1, ⁴​adr_ln_2 if (FALSE) { addl_phone_numbers(city = \"Atlanta\") addl_phone_numbers(zip = 303421606) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Current information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographical areas.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"","code":"beneficiary_enrollment(   year = 2021,   month = \"Year\",   geo_level = c(\"National\", \"State\", \"County\"),   state_abb = NULL,   state = NULL,   county = NULL,   fips = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"year Calendar year Medicare enrollment; current options 2017 - 2022 month Timeframe Medicare enrollment; options Year month within 12-month timespan month dataset's version name (listed ) geo_level Geographic level data; options National, State, County state_abb Two-letter state abbreviation beneficiary residence state Full state name beneficiary residence county County beneficiary residence fips FIPS code beneficiary residence clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Medicare Monthly Enrollment data provides current monthly information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographic areas including national, state/territory, county. hospital/medical coverage data can broken health care delivery (Original Medicare versus Medicare Advantage Health Plans) prescription drug coverage data can examined enrolled stand-alone Prescription Drug Plans enrolled Medicare Advantage Prescription Drug plans. dataset includes enrollee counts rolling 12 month basis also provides information yearly trends. dataset based information gathered CMS administrative enrollment data beneficiaries enrolled Medicare program available CMS Chronic Conditions Data Warehouse.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Medicare Monthly Enrollment","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"","code":"beneficiary_enrollment(month = \"Year\", geo_level = \"County\", state_abb = \"AL\", county = \"Autauga\") #> # A tibble: 1 × 22 #>    year month bene_geo…¹ bene_…² bene_…³ bene_…⁴ bene_…⁵ tot_b…⁶ orgnl…⁷ ma_an…⁸ #>   <int> <chr> <chr>      <chr>   <chr>   <chr>   <chr>     <int>   <int>   <int> #> 1  2021 Year  County     AL      Alabama Autauga 01001     11398    5339    6059 #> # … with 12 more variables: aged_tot_benes <int>, aged_esrd_benes <int>, #> #   aged_no_esrd_benes <int>, dsbld_tot_benes <int>, #> #   dsbld_esrd_and_esrd_only_benes <int>, dsbld_no_esrd_benes <int>, #> #   a_b_tot_benes <int>, a_b_orgnl_mdcr_benes <int>, #> #   a_b_ma_and_oth_benes <int>, prscrptn_drug_tot_benes <int>, #> #   prscrptn_drug_pdp_benes <int>, prscrptn_drug_mapd_benes <int>, and #> #   abbreviated variable names ¹​bene_geo_lvl, ²​bene_state_abrvtn, …  beneficiary_enrollment(year = 2021,                        geo_level = \"County\",                        fips = \"01001\") #> # A tibble: 1 × 22 #>    year month bene_geo…¹ bene_…² bene_…³ bene_…⁴ bene_…⁵ tot_b…⁶ orgnl…⁷ ma_an…⁸ #>   <int> <chr> <chr>      <chr>   <chr>   <chr>   <chr>     <int>   <int>   <int> #> 1  2021 Year  County     AL      Alabama Autauga 01001     11398    5339    6059 #> # … with 12 more variables: aged_tot_benes <int>, aged_esrd_benes <int>, #> #   aged_no_esrd_benes <int>, dsbld_tot_benes <int>, #> #   dsbld_esrd_and_esrd_only_benes <int>, dsbld_no_esrd_benes <int>, #> #   a_b_tot_benes <int>, a_b_orgnl_mdcr_benes <int>, #> #   a_b_ma_and_oth_benes <int>, prscrptn_drug_tot_benes <int>, #> #   prscrptn_drug_pdp_benes <int>, prscrptn_drug_mapd_benes <int>, and #> #   abbreviated variable names ¹​bene_geo_lvl, ²​bene_state_abrvtn, …  beneficiary_enrollment(year = 2022,                        month = \"July\",                        geo_level = \"State\",                        state = \"Georgia\") #> # A tibble: 1 × 22 #>    year month bene_geo…¹ bene_…² bene_…³ bene_…⁴ bene_…⁵ tot_b…⁶ orgnl…⁷ ma_an…⁸ #>   <int> <chr> <chr>      <chr>   <chr>   <chr>   <chr>     <int>   <int>   <int> #> 1  2022 July  State      GA      Georgia Total   13      1840128  907070  933058 #> # … with 12 more variables: aged_tot_benes <int>, aged_esrd_benes <int>, #> #   aged_no_esrd_benes <int>, dsbld_tot_benes <int>, #> #   dsbld_esrd_and_esrd_only_benes <int>, dsbld_no_esrd_benes <int>, #> #   a_b_tot_benes <int>, a_b_orgnl_mdcr_benes <int>, #> #   a_b_ma_and_oth_benes <int>, prscrptn_drug_tot_benes <int>, #> #   prscrptn_drug_pdp_benes <int>, prscrptn_drug_mapd_benes <int>, and #> #   abbreviated variable names ¹​bene_geo_lvl, ²​bene_state_abrvtn, …  beneficiary_enrollment(geo_level = \"State\",                        fips = \"10\") #> # A tibble: 1 × 22 #>    year month bene_geo…¹ bene_…² bene_…³ bene_…⁴ bene_…⁵ tot_b…⁶ orgnl…⁷ ma_an…⁸ #>   <int> <chr> <chr>      <chr>   <chr>   <chr>   <chr>     <int>   <int>   <int> #> 1  2021 Year  State      DE      Delawa… Total   10       222850  171170   51680 #> # … with 12 more variables: aged_tot_benes <int>, aged_esrd_benes <int>, #> #   aged_no_esrd_benes <int>, dsbld_tot_benes <int>, #> #   dsbld_esrd_and_esrd_only_benes <int>, dsbld_no_esrd_benes <int>, #> #   a_b_tot_benes <int>, a_b_orgnl_mdcr_benes <int>, #> #   a_b_ma_and_oth_benes <int>, prscrptn_drug_tot_benes <int>, #> #   prscrptn_drug_pdp_benes <int>, prscrptn_drug_mapd_benes <int>, and #> #   abbreviated variable names ¹​bene_geo_lvl, ²​bene_state_abrvtn, …"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"cc_multiple(   year = 2018,   geo_lvl = NULL,   geo_desc = NULL,   fips = NULL,   age_lvl = NULL,   demo_lvl = NULL,   demo_desc = NULL,   mcc = NULL,   prevalence = NULL,   stnd_pymt_pc = NULL,   pymt_pc = NULL,   readmit_rate = NULL,   er_visits = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"year YYYY, calendar year Medicare enrollment. 2007-2018 data currently available. geo_lvl Geographic level data; options \"National\", \"State\", \"County\" geo_desc state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. fips FIPS state /county code Medicare beneficiary resides. Bene_Geo_Cd blank data aggregated National level Puerto Rico Virgin Islands. age_lvl Identifies age level population data aggregated. value '' indicates data row represents Fee--Service Medicare Beneficiaries. value '<65' '65+' indicates data aggregated age Medicare Beneficiaries end calendar year. demo_lvl Identifies demographic level population data aggregated. value '' indicates data row represents Fee--Service Medicare beneficiaries. value 'Sex' indicates data aggregated Medicare beneficiary's sex. value 'Race' indicates data aggregated Medicare beneficiary's race. value 'Dual Status' indicates data aggregated Medicare beneficiary's dual eligibility status. demo_desc Bene_Demo_Lvl='Sex', beneficiary’s sex classified Male Female identified using information CMS enrollment database. Bene_Demo_Lvl='Race', race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. chronic condition reports use variable RTI_RACE_CD, available Master Beneficiary Files CCW. Bene_Demo_Lvl='Dual Status', beneficiaries can classified 'Medicare & Medicaid' 'Medicare '. Beneficiares enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. mcc classify MCC Medicare beneficiary, 21 chronic conditions counted grouped four categories (0-1, 2-3, 4-5 6 ). prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. stnd_pymt_pc Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. pymt_pc Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). readmit_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting. clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Multiple Chronic Conditions dataset provides information number chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories (0-1, 2-3, 4-5 6 ).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Medicare Multiple Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"if (FALSE) { cc_multiple(year     = 2018,             geo_lvl  = \"State\",             geo_desc = \"California\")  cc_multiple(year     = 2007,             geo_lvl  = \"National\",             demo_lvl = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Specific Chronic Conditions API — cc_specific","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"cc_specific(   year = 2018,   geo_lvl = NULL,   geo_desc = NULL,   fips = NULL,   age_lvl = NULL,   demo_lvl = NULL,   demo_desc = NULL,   condition = NULL,   prevalence = NULL,   stnd_pymt_pc = NULL,   pymt_pc = NULL,   readmit_rate = NULL,   er_visits = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"year YYYY, calendar year Medicare enrollment. 2007-2018 data currently available. geo_lvl Geographic level data; options \"National\", \"State\", \"County\" geo_desc state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. fips FIPS state /county code Medicare beneficiary resides. Bene_Geo_Cd blank data aggregated National level Puerto Rico Virgin Islands. age_lvl Identifies age level population data aggregated. value '' indicates data row represents Fee--Service Medicare Beneficiaries. value '<65' '65+' indicates data aggregated age Medicare Beneficiaries end calendar year. demo_lvl Identifies demographic level population data aggregated. value '' indicates data row represents Fee--Service Medicare beneficiaries. value 'Sex' indicates data aggregated Medicare beneficiary's sex. value 'Race' indicates data aggregated Medicare beneficiary's race. value 'Dual Status' indicates data aggregated Medicare beneficiary's dual eligibility status. demo_desc Bene_Demo_Lvl='Sex', beneficiary’s sex classified Male Female identified using information CMS enrollment database. Bene_Demo_Lvl='Race', race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. chronic condition reports use variable RTI_RACE_CD, available Master Beneficiary Files CCW. Bene_Demo_Lvl='Dual Status',beneficiaries can classified 'Medicare & Medicaid' 'Medicare '. Beneficiares enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. condition Identifies chronic condition prevalence utilization compiled. 21 chronic conditions identified using Medicare administrative claims. Medicare beneficiary considered chronic condition CMS administrative data claim indicating beneficiary received service treatment specific condition. Beneficiaries may one chronic conditions listed. prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. stnd_pymt_pc Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. pymt_pc Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). readmit_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting. clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Select Chronic Conditions dataset provides information 21 selected chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography distinct chronic conditions listed . • Alcohol Abuse Drug Abuse/ Substance Abuse • Alzheimer’s Disease Related Dementia • Arthritis (Osteoarthritis Rheumatoid) • Asthma • Atrial Fibrillation • Autism Spectrum Disorders • Cancer (Breast, Colorectal, Lung, Prostate) • Chronic Kidney Disease • Chronic Obstructive Pulmonary Disease • Depression • Diabetes • Drug Abuse/ Substance Abuse • Heart Failure • Hepatitis (Chronic Viral B & C) • HIV/AIDS • Hyperlipidemia (High cholesterol) • Hypertension (High blood pressure) • Ischemic Heart Disease • Osteoporosis • Schizophrenia Psychotic Disorders • Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Medicare Specific Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"if (FALSE) { cc_specific(year     = 2018,             geo_lvl  = \"State\",             geo_desc = \"California\")  cc_specific(year     = 2007,             geo_lvl  = \"National\",             demo_lvl = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Dataset providers' facility affiliations","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"","code":"doctors_and_clinicians(   npi = NULL,   pac_id = NULL,   enroll_id = NULL,   last_name = NULL,   first_name = NULL,   middle_name = NULL,   gender = NULL,   med_sch = NULL,   grad_year = NULL,   prim_spec = NULL,   city = NULL,   state = NULL,   zip = NULL,   ind_assign = NULL,   group_assign = NULL,   offset = 0,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"npi Unique clinician ID assigned NPPES pac_id Unique individual clinician ID assigned PECOS enroll_id Unique ID clinician enrollment source data observation last_name Individual clinician last name first_name Individual clinician first name middle_name Individual clinician middle name gender Individual clinician gender med_sch Individual clinician’s medical school grad_year Individual clinician’s medical school graduation year prim_spec Primary medical specialty reported individual clinician selected enrollment city Group individual's city state Group individual's state zip Group individual's ZIP code (9 digits available) ind_assign Indicator whether clinician accepts Medicare approved amount payment full. Y = Clinician accepts Medicare approved amount payment full. M = Clinician may accept Medicare Assignment. group_assign Indicator whether group accepts Medicare approved amount payment full. Y = Clinician accepts Medicare approved amount payment full. M = Clinician may accept Medicare Assignment. offset offset; API pagination clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Doctors Clinicians national downloadable file organized line unique clinician/enrollment record/group/address level. Clinicians multiple Medicare enrollment records /single enrollments linking multiple practice locations listed multiple lines.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Doctors Clinicians National Downloadable File","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"","code":"doctors_and_clinicians(npi = 1407263999) #> # A tibble: 2 × 32 #>   record…¹ npi   ind_p…² ind_e…³ lst_nm frst_nm mid_nm suff  gndr  cred  med_sch #>   <chr>    <chr> <chr>   <chr>   <chr>  <chr>   <chr>  <chr> <chr> <chr> <chr>   #> 1 1        1407… 872920… I20141… AVERY  ROBIN   A      NA    F     NA    OTHER   #> 2 8580791  1407… 872920… I20141… AVERY  ROBIN   A      NA    F     NA    OTHER   #> # … with 21 more variables: grd_yr <chr>, pri_spec <chr>, sec_spec_1 <chr>, #> #   sec_spec_2 <chr>, sec_spec_3 <chr>, sec_spec_4 <chr>, sec_spec_all <chr>, #> #   telehlth <chr>, org_nm <chr>, org_pac_id <chr>, num_org_mem <chr>, #> #   adr_ln_1 <chr>, adr_ln_2 <chr>, ln_2_sprs <chr>, cty <chr>, st <chr>, #> #   zip <chr>, phn_numbr <chr>, ind_assgn <chr>, grp_assgn <chr>, #> #   adrs_id <chr>, and abbreviated variable names ¹​record_number, ²​ind_pac_id, #> #   ³​ind_enrl_id doctors_and_clinicians(pac_id = 4688974991) #> # A tibble: 1 × 32 #>   record…¹ npi   ind_p…² ind_e…³ lst_nm frst_nm mid_nm suff  gndr  cred  med_sch #>   <chr>    <chr> <chr>   <chr>   <chr>  <chr>   <chr>  <chr> <chr> <chr> <chr>   #> 1 6        1407… 468897… I20151… ERNST… LONNI   L      NA    F     NA    NEW YO… #> # … with 21 more variables: grd_yr <chr>, pri_spec <chr>, sec_spec_1 <chr>, #> #   sec_spec_2 <chr>, sec_spec_3 <chr>, sec_spec_4 <chr>, sec_spec_all <chr>, #> #   telehlth <chr>, org_nm <chr>, org_pac_id <chr>, num_org_mem <chr>, #> #   adr_ln_1 <chr>, adr_ln_2 <chr>, ln_2_sprs <chr>, cty <chr>, st <chr>, #> #   zip <chr>, phn_numbr <chr>, ind_assgn <chr>, grp_assgn <chr>, #> #   adrs_id <chr>, and abbreviated variable names ¹​record_number, ²​ind_pac_id, #> #   ³​ind_enrl_id doctors_and_clinicians(enroll_id = \"I20081002000549\") #> # A tibble: 1 × 32 #>   record…¹ npi   ind_p…² ind_e…³ lst_nm frst_nm mid_nm suff  gndr  cred  med_sch #>   <chr>    <chr> <chr>   <chr>   <chr>  <chr>   <chr>  <chr> <chr> <chr> <chr>   #> 1 86       1407… 802218… I20081… MCCUR… DOROTHY E      NA    F     NA    OTHER   #> # … with 21 more variables: grd_yr <chr>, pri_spec <chr>, sec_spec_1 <chr>, #> #   sec_spec_2 <chr>, sec_spec_3 <chr>, sec_spec_4 <chr>, sec_spec_all <chr>, #> #   telehlth <chr>, org_nm <chr>, org_pac_id <chr>, num_org_mem <chr>, #> #   adr_ln_1 <chr>, adr_ln_2 <chr>, ln_2_sprs <chr>, cty <chr>, st <chr>, #> #   zip <chr>, phn_numbr <chr>, ind_assgn <chr>, grp_assgn <chr>, #> #   adrs_id <chr>, and abbreviated variable names ¹​record_number, ²​ind_pac_id, #> #   ³​ind_enrl_id if (FALSE) { doctors_and_clinicians(first_name = \"John\") doctors_and_clinicians(med_sch = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\") doctors_and_clinicians(grad_year = 2003) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Physician Facility Affiliations API — facility_affiliations","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"Dataset providers' facility affiliations","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"","code":"facility_affiliations(   npi = NULL,   pac_id = NULL,   last_name = NULL,   first_name = NULL,   middle_name = NULL,   facility_type = NULL,   facility_ccn = NULL,   parent_ccn = NULL,   offset = 0,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"npi Unique clinician ID assigned NPPES pac_id Unique individual clinician ID assigned PECOS last_name Individual clinician last name first_name Individual clinician first name middle_name Individual clinician middle name facility_type Facilities can fall following type categories: Hospital, Long-term Care Hospital, Nursing Home, Inpatient Rehabilitation Facility, Home Health Agency, Hospice, Dialysis Facility facility_ccn alphanumeric; Medicare CCN (CMS Certification Number) facility type unit within hospital individual clinician provides service. Effective 2007, CCN replaced terms Medicare Provider Number, Medicare Identification Number OSCAR Number. CCN used verify Medicare/Medicaid certification survey certification, assessment-related activities communications. parent_ccn numeric; Medicare CCN primary hospital individual clinician provides service, clinician provide services unit within hospital. offset offset; API pagination clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"file lists clinicians' facility affiliations, expanded include Long-term Care Hospitals (LTCHs), Skilled Nursing Facilities (SNFs), Inpatient Rehabilitation Facility (IRFs), Home Health Agencies, Hospices, /Dialysis Facilities, addition hospitals.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"CMS Physician Facility Affiliations Certification Number (CCN) State Codes","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"","code":"facility_affiliations(npi = 1003019563) #> # A tibble: 4 × 10 #>   record_num…¹ npi   ind_p…² lst_nm frst_nm mid_nm suff  facil…³ facil…⁴ paren…⁵ #>   <chr>        <chr> <chr>   <chr>  <chr>   <chr>  <chr> <chr>   <chr>   <chr>   #> 1 2541         1003… 468870… FRANK  JOHN    JOSEPH NA    Hospit… 060004  NA      #> 2 2546         1003… 468870… FRANK  JOHN    JOSEPH NA    Hospit… 060009  NA      #> 3 2551         1003… 468870… FRANK  JOHN    JOSEPH NA    Hospit… 060028  NA      #> 4 2556         1003… 468870… FRANK  JOHN    JOSEPH NA    Hospit… 060116  NA      #> # … with abbreviated variable names ¹​record_number, ²​ind_pac_id, #> #   ³​facility_type, ⁴​facility_afl_ccn, ⁵​parent_ccn facility_affiliations(facility_ccn = \"060004\") #> # A tibble: 207 × 10 #>    record_nu…¹ npi   ind_p…² lst_nm frst_nm mid_nm suff  facil…³ facil…⁴ paren…⁵ #>    <chr>       <chr> <chr>   <chr>  <chr>   <chr>  <chr> <chr>   <chr>   <chr>   #>  1 356         1003… 600295… HAMMAN DANIEL  RICHA… NA    Hospit… 060004  NA      #>  2 2541        1003… 468870… FRANK  JOHN    JOSEPH NA    Hospit… 060004  NA      #>  3 5431        1003… 589092… DONAH… ARTHUR  H      NA    Hospit… 060004  NA      #>  4 13046       1003… 650718… HIGHA… JAMES   CHARL… NA    Hospit… 060004  NA      #>  5 54036       1003… 125432… WEINER GARETH  R      NA    Hospit… 060004  NA      #>  6 77556       1003… 549690… KLIMA  KATHRYN ANN    NA    Hospit… 060004  NA      #>  7 85561       1013… 781009… HELZER AMITY   D      NA    Hospit… 060004  NA      #>  8 90536       1013… 438589… PYLE   ASHLEY  L      NA    Hospit… 060004  NA      #>  9 150361      1013… 155737… MUWAL… FIRAS   NA     NA    Hospit… 060004  NA      #> 10 201526      1023… 286068… LUCCI  CHAD    MICHA… NA    Hospit… 060004  NA      #> # … with 197 more rows, and abbreviated variable names ¹​record_number, #> #   ²​ind_pac_id, ³​facility_type, ⁴​facility_afl_ccn, ⁵​parent_ccn facility_affiliations(parent_ccn = 670055) #> # A tibble: 11 × 10 #>    record_nu…¹ npi   ind_p…² lst_nm frst_nm mid_nm suff  facil…³ facil…⁴ paren…⁵ #>    <chr>       <chr> <chr>   <chr>  <chr>   <chr>  <chr> <chr>   <chr>   <chr>   #>  1 676186      1083… 569883… FORNA… RAFAEL  JORGE  NA    Inpati… 67T055  670055  #>  2 1132131     1144… 357765… CURRY  LYSA    LEE    NA    Inpati… 67T055  670055  #>  3 3035336     1386… 327462… HAU    HORACIO G      NA    Inpati… 67T055  670055  #>  4 3315471     1427… 145632… CHANEY DENNIS  M      NA    Inpati… 67T055  670055  #>  5 4071956     1518… 862802… GUERRA ANTONIO F      NA    Inpati… 67T055  670055  #>  6 4359616     1558… 892124… ALFON… JOHN    D      NA    Inpati… 67T055  670055  #>  7 4777586     1609… 084037… WILCOX GEORGE  KIMBE… NA    Inpati… 67T055  670055  #>  8 5571126     1710… 973933… VADDE… VIDYA   NA     NA    Inpati… 67T055  670055  #>  9 5656051     1720… 701294… JANES  WILLIAM WARREN NA    Inpati… 67T055  670055  #> 10 5847206     1740… 034547… WEIKLE GEOFF   R      NA    Inpati… 67T055  670055  #> 11 7141806     1912… 509203… MANSO… SAAD    MD     NA    Inpati… 67T055  670055  #> # … with abbreviated variable names ¹​record_number, ²​ind_pac_id, #> #   ³​facility_type, ⁴​facility_afl_ccn, ⁵​parent_ccn if (FALSE) { facility_affiliations(first_name = \"John\") facility_affiliations(facility_type = \"Home Health Agency\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Hospital Enrollments API — hospital_enrollment","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Information hospitals currently enrolled Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"","code":"hospital_enrollment(   npi = NULL,   ccn = NULL,   enroll_id = NULL,   enroll_state = NULL,   prov_type_cd = NULL,   pac_id = NULL,   org_name = NULL,   dba_name = NULL,   city = NULL,   state = NULL,   zip = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"npi Hospital’s National Provider Identifier (NPI) ccn Hospital’s CMS Certification Number (CCN), formerly called OSCAR Number enroll_id Hospital’s enrollment ID enroll_state Hospital’s enrollment state prov_type_cd Enrollment application specialty type code pac_id Hospital’s PECOS Associate Control (PAC) ID org_name Hospital’s legal business name dba_name Hospital’s -business-name city City hospital’s practice location address state State hospital’s practice location address. zip Zip code hospital’s practice location address clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Hospital Enrollments dataset provides enrollment information Hospitals currently enrolled Medicare. data includes information Hospital's sub-group type, legal business name, business name, organization type address.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Hospital Enrollments","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"","code":"hospital_enrollment(npi = 1689653487) #> # A tibble: 2 × 36 #>   enrollme…¹ enrol…² provi…³ provi…⁴ npi   multi…⁵ ccn   assoc…⁶ organ…⁷ doing…⁸ #>   <chr>      <chr>   <chr>   <chr>   <chr> <lgl>   <chr> <chr>   <chr>   <chr>   #> 1 O20020814… ME      00-09   PART A… 1689… FALSE   2000… 256737… CENTRA… NA      #> 2 O20211109… ME      00-09   PART A… 1689… FALSE   20U0… 256737… CENTRA… NA      #> # … with 26 more variables: incorporation_date <chr>, #> #   incorporation_state <chr>, organization_type_structure <chr>, #> #   organization_other_type_text <chr>, proprietary_nonprofit <lgl>, #> #   address_line_1 <chr>, address_line_2 <chr>, city <chr>, state <chr>, #> #   zip_code <int>, practice_location_type <chr>, #> #   location_other_type_text <chr>, subgroup_general <lgl>, #> #   subgroup_acute_care <lgl>, subgroup_alcohol_drug <lgl>, … hospital_enrollment(ccn = \"440058\") #> # A tibble: 1 × 36 #>   enrollme…¹ enrol…² provi…³ provi…⁴ npi   multi…⁵ ccn   assoc…⁶ organ…⁷ doing…⁸ #>   <chr>      <chr>   <chr>   <chr>   <chr> <lgl>   <chr> <chr>   <chr>   <chr>   #> 1 O20020812… TN      00-09   PART A… 1467… FALSE   4400… 519363… SOUTHE… SOUTHE… #> # … with 26 more variables: incorporation_date <chr>, #> #   incorporation_state <chr>, organization_type_structure <chr>, #> #   organization_other_type_text <chr>, proprietary_nonprofit <lgl>, #> #   address_line_1 <chr>, address_line_2 <chr>, city <chr>, state <chr>, #> #   zip_code <int>, practice_location_type <chr>, #> #   location_other_type_text <chr>, subgroup_general <lgl>, #> #   subgroup_acute_care <lgl>, subgroup_alcohol_drug <lgl>, … hospital_enrollment(pac_id = 6103733050) #> # A tibble: 2 × 36 #>   enrollme…¹ enrol…² provi…³ provi…⁴ npi   multi…⁵ ccn   assoc…⁶ organ…⁷ doing…⁸ #>   <chr>      <chr>   <chr>   <chr>   <chr> <lgl>   <chr> <chr>   <chr>   <chr>   #> 1 O20020904… NY      00-09   PART A… 1164… FALSE   3302… 610373… ST CHA… NA      #> 2 O20090408… NY      00-09   PART A… 1225… FALSE   33T2… 610373… ST CHA… NA      #> # … with 26 more variables: incorporation_date <chr>, #> #   incorporation_state <chr>, organization_type_structure <chr>, #> #   organization_other_type_text <chr>, proprietary_nonprofit <lgl>, #> #   address_line_1 <chr>, address_line_2 <chr>, city <chr>, state <chr>, #> #   zip_code <int>, practice_location_type <chr>, #> #   location_other_type_text <chr>, subgroup_general <lgl>, #> #   subgroup_acute_care <lgl>, subgroup_alcohol_drug <lgl>, … if (FALSE) { hospital_enrollment(city = \"Atlanta\") hospital_enrollment(zip = 117771928) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Information providers missing digital contact information NPPES.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"","code":"missing_information(npi = NULL, clean_names = TRUE, lowercase = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"npi provider’s National Provider Identifier clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"May 2020 CMS Interoperability Patient Access final rule, CMS finalized policy publicly report names NPIs providers digital contact information included NPPES system (85 FR 25584). data includes NPI provider name providers clinicians without digital contact information NPPES.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"CMS Public Reporting Missing Digital Contact Information API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"","code":"missing_information(npi = 1134122013) #> # A tibble: 1 × 3 #>   npi        last_name first_name #>   <chr>      <chr>     <chr>      #> 1 1134122013 Henry     Timothy"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the NPPES National Provider Identifier Registry API — nppes_npi","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"provider_nppes() allows search NPPES NPI Registry's public API many parameters defined API's documentation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"","code":"nppes_npi(   npi = NULL,   prov_type = NULL,   first = NULL,   last = NULL,   org_name = NULL,   taxonomy = NULL,   city = NULL,   state = NULL,   zip = NULL,   country = NULL,   limit = 200,   skip = NULL )"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"npi 10-digit National Provider Identifier (NPI). prov_type Read API can refined retrieve Individual Providers (NPI-1 Type 1) Organizational Providers (NPI-2 Type 2.) specified, Type 1 Type 2 NPIs returned. using Enumeration Type, criteria entered. Additional criteria must also entered well. first Provider's first name. Applies Individual Providers (NPI-1) . Trailing wildcard entries permitted requiring least two characters entered (e.g. \"jo*\" ). field allows following special characters: ampersand(&), apostrophe(,), colon(:), comma(,), forward slash(/), hyphen(-), left right parentheses(()), period(.), pound sign(#), quotation mark(\"), semi-colon(;). last Provider's last name. Applies Individual Providers (NPI-1) . Trailing wildcard entries permitted requiring least two characters entered (e.g. \"jo*\" ). field allows following special characters: ampersand(&), apostrophe(,), colon(:), comma(,), forward slash(/), hyphen(-), left right parentheses(()), period(.), pound sign(#), quotation mark(\"), semi-colon(;). org_name Healthcare organization's name. Applies Organizational Providers (NPI-2) . Trailing wildcard entries permitted requiring least two characters entered. types Organization Names (LBN, DBA, Former LBN, Name) associated NPI examined matching contents, therefore, results might contain organization name different one entered Organization Name criterion. field allows following special characters: ampersand, apostrophe, \"\" sign, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. taxonomy Search providers taxonomy entering taxonomy description. city City associated provider's address. search Military Address, enter either APO FPO City field. field allows following special characters: ampersand, apostrophe, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. state State abbreviation associated provider's address. field used input criterion. field used, least one field, besides prov_type country, must populated. Valid values state abbreviations: https://npiregistry.cms.hhs.gov/help-api/state. zip Postal Code associated provider's address identified Address Purpose. enter 5 digit postal code, match appropriate 9 digit (zip+4) codes data. Trailing wildcard entries permitted requiring least two characters entered (e.g., \"21*\"). country Country abbreviation associated provider's address. field can used input criterion, long value selected US (United States). Valid values country abbreviations: https://npiregistry.cms.hhs.gov/help-api/country. limit Maximum number results return; default 200, maximum 1200. skip Number results skip searching previous number; set limit.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"NPPES NPI Registry Public Search free directory active National Provider Identifier (NPI) records. Healthcare providers acquire unique 10-digit NPIs identify standard way throughout industry. CMS supplies NPI, publish parts NPI record public relevance, including provider’s name, taxonomy practice address. enables search providers NPPES (National Plan Provider Enumeration System.) information produced NPI Registry provided accordance NPPES Data Dissemination Notice. charge use NPI Registry.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"NPPES NPI Registry API Documentation NPPES NPI Registry API Demo","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"","code":"if (FALSE) { ### Single NPI nppes_npi(npi = 1528060837) nppes_npi(npi = 1336413418)  ### City, state, country nppes_npi(city = \"Atlanta\",           state = \"GA\",           country = \"US\")  ### First name, city, state nppes_npi(first = \"John\",           city = \"Baltimore\",           state = \"MD\")  nppes_npi(npi = 1336413418) # NPI-2 nppes_npi(npi = 1710975040) # NPI-1 nppes_npi(npi = 1659781227) # Deactivated  ### List of NPIs npi_list <- c(1003026055, 1710983663, 1316405939, 1720392988, 1518184605, 1922056829, 1083879860)  npi_list |> purrr::map_dfr(nppes_npi) |> dplyr::group_split(outcome)  ### Data frame of NPIs npi_df <- data.frame(npi = c(1710983663,                              1003026055,                              1316405939,                              1720392988,                              1518184605,                              1922056829,                              1083879860)) npi_df |> tibble::deframe() |> purrr::map_dfr(nppes_npi)  ###Tribble example tribble <- tibble::tribble( ~fn,         ~params, \"nppes_npi\", list(1336413418), \"nppes_npi\", list(1710975040), \"nppes_npi\", list(1659781227), \"nppes_npi\", list(first = \"John\", city = \"Baltimore\", state = \"MD\"), \"nppes_npi\", list(first = \"Andrew\", city = \"Atlanta\", state = \"GA\"))  purrr::invoke_map_dfr(tribble$fn, tribble$params) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":null,"dir":"Reference","previous_headings":"","what":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. code set structured three distinct \"Levels\":","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"","code":"nucc_taxonomy_230"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"nucc-taxonomy-a-data-frame-with-rows-and-columns-","dir":"Reference","previous_headings":"","what":"nucc_taxonomy_230 A data frame with 873 rows and 8 columns:","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"code Taxonomy Code grouping Level , Provider Grouping classification Level II, Classification specialization Level III, Area Specialization definition Definition Taxonomy notes Notes pertaining Taxonomy, e.g. sources, date modified, date implemented, etc. display_name consumer-friendly name taxonomy code; combination code name Level code nested. section Indicates whether Taxonomy Individual Non-Individual, .e., group taxonomy","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"https://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"Level (Provider Grouping): major grouping service(s) occupation(s) health care providers. example: Allopathic & Osteopathic Physicians, Dental Providers, Hospitals, etc. Level II: (Classification): specific service occupation related Provider Grouping. example, Classification Allopathic & Osteopathic Physicians based upon General Specialty Certificates issued appropriate national boards. following boards however, general certificates appear Level III areas specialization strictly due display limitations code set Boards multiple general certificates: Medical Genetics, Preventive Medicine, Psychiatry & Neurology, Radiology, Surgery, Otolaryngology, Pathology. Level III: (Area Specialization): specialized area Classification provider chooses practice make services available. example, Area Specialization provider type Allopathic & Osteopathic Physicians based upon Subspecialty Certificates issued appropriate national boards. Health Care Provider Taxonomy code set Levels organized allow drilling provider's specific level specialization. ten digit codes provider category unique contain embedded logic. codes categories used exactly assigned Taxonomy list. time codes separated form new codes, parsed apart, edited one position within code.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"\"230\" designation indicates version code set. NUCC updates set every six months. \"23\" indicates year \"0\" indicates first update year. taxonomy code display name consumer-friendly name code. display name combination code name Level code nested, precisely identifies code.  example, Addiction Medicine physician subspecialty Anesthesiology, Family Medicine, Internal Medicine, Preventive Medicine, Psychiatry & Neurology. Seeing “Addiction Medicine” identify specialty physician, display name “Addiction Medicine (Internal Medicine) Physician” clearly . another example, code “Radiology” confused several codes, “Radiology Chiropractor” specifies exact provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"how-many-categories-are-there-","dir":"Reference","previous_headings":"","what":"How Many Categories are There?","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. Health Care Provider Taxonomy code set includes specialty categories individuals, Groups individuals, non-individuals. Individual Category includes: Allopathic & Osteopathic Physicians Behavioral Health Social Service Providers Chiropractic Providers Dental Providers Dietary Nutritional Service Providers Emergency Medical Service Providers Eye Vision Service Providers Nursing Service Providers Nursing Service Related Providers Service Providers Pharmacy Service Providers Physician Assistants Advanced Practice Nursing Providers Podiatric Medicine Surgery Service Providers Respiratory, Developmental, Rehabilitative Restorative Service Providers Speech, Language Hearing Service Providers Student, Health Care Technologists, Technicians, Technical Service Providers Group (Individuals) Category includes: Multi-Specialty Single Specialty Non-Individual Category includes: Agencies Ambulatory Health Care Facilities Hospital Units Hospitals Laboratories Managed Care Organizations Nursing Custodial Care Facilities Service Providers Residential Treatment Facilities Respite Care Facilities Suppliers Transportation Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":null,"dir":"Reference","previous_headings":"","what":"Search CMS' Open Payments Program API — open_payments","title":"Search CMS' Open Payments Program API — open_payments","text":"open_payments() allows search CMS' Open Payments Program API.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search CMS' Open Payments Program API — open_payments","text":"","code":"open_payments(   recipient_npi = NULL,   recipient_type = NULL,   recipient_id = NULL,   recipient_first_name = NULL,   recipient_last_name = NULL,   recipient_city = NULL,   recipient_state = NULL,   recipient_zip_code = NULL,   teaching_hospital_name = NULL,   manufacturer_gpo_name = NULL,   manufacturer_gpo_id = NULL,   form_of_payment = NULL,   nature_of_payment = NULL,   year = 2021,   offset = 0,   clean_names = TRUE,   lowercase = TRUE,   nest = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search CMS' Open Payments Program API — open_payments","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search CMS' Open Payments Program API — open_payments","text":"recipient_npi 10-digit National Provider Identifier (NPI). recipient_type e.g., Covered Recipient Physician Covered Recipient Non-Physician Practitioner Covered Recipient Teaching Hospital recipient_id Payment recipient's unique Open Payments ID recipient_first_name Recipient's first name recipient_last_name Recipient's last name recipient_city City recipient_state State, abbreviation recipient_zip_code Zip code teaching_hospital_name Name teaching hospital, e.g. Vanderbilt University Medical Center manufacturer_gpo_name Paying entity's name. Examples: Pharmacosmos Therapeutics Inc. Getinge USA Sales, LLC Agiliti Health, Inc. OrthoScan, Inc. manufacturer_gpo_id Paying entity's unique Open Payments ID form_of_payment Form payment, examples: Stock option Cash cash equivalent -kind items services nature_of_payment Nature payment transfer value, examples: Royalty License Charitable Contribution Current prospective ownership investment interest Food Beverage year Reporting year, 2015-2021, default 2021 offset offset; API pagination clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE. nest Nest related columns together; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search CMS' Open Payments Program API — open_payments","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search CMS' Open Payments Program API — open_payments","text":"Open Payments program national disclosure program promotes transparent accountable health care system. Open Payments houses publicly accessible database payments reporting entities, including drug medical device companies, make covered recipients like physicians. Please note CMS comment relationships may beneficial potential conflicts interest. CMS publishes data attested reporting entities. data open individual interpretation. Open Payments national transparency program collects publishes information financial relationships drug medical device companies (referred \"reporting entities\") certain health care providers (referred \"covered recipients\"). relationships may involve payments providers things including limited research, meals, travel, gifts speaking fees. purpose program provide public transparent health care system. information available Open Payments database open personal interpretation questions data means, patients advocates speak directly health care provider better understanding.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search CMS' Open Payments Program API — open_payments","text":"Open Payments Program? OpenPaymentsData.cms.gov 2021 General Payment Data 2020 General Payment Data 2019 General Payment Data 2018 General Payment Data 2017 General Payment Data 2016 General Payment Data 2015 General Payment Data","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search CMS' Open Payments Program API — open_payments","text":"Update Frequency: Yearly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search CMS' Open Payments Program API — open_payments","text":"","code":"if (FALSE) { open_payments(recipient_npi = 1043218118, year = 2021) open_payments(nature_of_payment = \"Royalty or License\") open_payments(form_of_payment = \"Stock option\") open_payments(manufacturer_gpo_name = \"Adaptive Biotechnologies Corporation\") open_payments(teaching_hospital_name = \"Nyu Langone Hospitals\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Opt Out Affidavits API — opt_out","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"list practitioners currently opted Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"","code":"opt_out(   first = NULL,   last = NULL,   npi = NULL,   specialty = NULL,   date_start = NULL,   date_end = NULL,   address = NULL,   city = NULL,   state_abb = NULL,   zip = NULL,   eligible = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"first First Name Opt Provider last Last Name Opt Provider npi National Provider Identifier (NPI) number Opt Provider specialty Specialty Opt Provider date_start Date Provider's Opt Status effective date_end Date Provider's Opt Status ends address Provider's Street Address city Provider's City state_abb Provider's State Abbreviation zip Provider's Zip Code eligible Flag indicating whether Provider eligible Order Refer clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Opt Affidavits dataset provides information providers decided participate Medicare. contains provider's NPI, specialty, address, effective dates.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"","code":"opt_out(specialty = \"Psychiatry\", zip = \"07626\") #> # A tibble: 3 × 13 #>   first_…¹ last_…² npi   speci…³ optout_effective_…⁴ optout_end_date     first…⁵ #>   <chr>    <chr>   <chr> <chr>   <dttm>              <dttm>              <chr>   #> 1 Laura    Brenner 1235… Psychi… 2006-05-01 00:00:00 2024-05-01 00:00:00 135 CO… #> 2 Ruchi    Nadella 1356… Psychi… 2016-03-30 00:00:00 2024-03-30 00:00:00 135 CO… #> 3 Sireesha Jathav… 1508… Psychi… 2018-01-22 00:00:00 2024-01-22 00:00:00 145 CO… #> # … with 6 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, #> #   last_updated <dttm>, and abbreviated variable names ¹​first_name, #> #   ²​last_name, ³​specialty, ⁴​optout_effective_date, ⁵​first_line_street_address opt_out(first = \"David\", last = \"Smith\") #> # A tibble: 6 × 13 #>   first_…¹ last_…² npi   speci…³ optout_effective_…⁴ optout_end_date     first…⁵ #>   <chr>    <chr>   <chr> <chr>   <dttm>              <dttm>              <chr>   #> 1 David    Smith   1649… Maxill… 2012-06-25 00:00:00 2024-06-25 00:00:00 909 W … #> 2 David    Smith   1750… Oral S… 2013-05-07 00:00:00 2023-05-07 00:00:00 1116 N… #> 3 David    Smith   1114… Psychi… 2014-08-15 00:00:00 2024-08-15 00:00:00 3101 S… #> 4 David    Smith   1023… Obstet… 2012-10-01 00:00:00 2024-10-01 00:00:00 755 N … #> 5 David    Smith   1790… Oral S… 2015-03-26 00:00:00 2023-03-26 00:00:00 6800 M… #> 6 David    Smith   1659… Dentist 2015-05-26 00:00:00 2023-05-26 00:00:00 3038 B… #> # … with 6 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, #> #   last_updated <dttm>, and abbreviated variable names ¹​first_name, #> #   ²​last_name, ³​specialty, ⁴​optout_effective_date, ⁵​first_line_street_address opt_out(npi = 1114974490) #> # A tibble: 1 × 13 #>   first_…¹ last_…² npi   speci…³ optout_effective_…⁴ optout_end_date     first…⁵ #>   <chr>    <chr>   <chr> <chr>   <dttm>              <dttm>              <chr>   #> 1 David    Altchek 1114… Orthop… 2012-07-01 00:00:00 2024-07-01 00:00:00 535 EA… #> # … with 6 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, #> #   last_updated <dttm>, and abbreviated variable names ¹​first_name, #> #   ²​last_name, ³​specialty, ⁴​optout_effective_date, ⁵​first_line_street_address opt_out(state_abb = \"NY\", eligible = \"N\") #> # A tibble: 634 × 13 #>    first…¹ last_…² npi   speci…³ optout_effective_…⁴ optout_end_date     first…⁵ #>    <chr>   <chr>   <chr> <chr>   <dttm>              <dttm>              <chr>   #>  1 Patrick Mcgrath 1932… Psychi… 2012-06-01 00:00:00 2024-06-01 00:00:00 100 PA… #>  2 Stephen Donovan 1942… Psychi… 2012-05-01 00:00:00 2024-05-01 00:00:00 1070 P… #>  3 William Golden  1477… Clinic… 2012-07-01 00:00:00 2024-07-01 00:00:00 4 RYDE… #>  4 Ursula  Ofman   1427… Clinic… 2015-10-01 00:00:00 2023-10-01 00:00:00 347 FI… #>  5 Lori    Davis   1902… Clinic… 2012-07-01 00:00:00 2024-07-01 00:00:00 80 FIF… #>  6 Ronald  Hoffman 1679… Genera… 2012-04-01 00:00:00 2024-04-01 00:00:00 330 W … #>  7 Linda   Penn    1033… Clinic… 2012-05-21 00:00:00 2024-05-21 00:00:00 98 REM… #>  8 Paul    Geltner 1205… Clinic… 2016-04-01 00:00:00 2024-04-01 00:00:00 113 UN… #>  9 Kathar… Strati… 1023… Psychi… 2020-12-14 00:00:00 2024-12-14 00:00:00 15 W 7… #> 10 Marilyn Oswald  1790… Clinic… 2012-07-19 00:00:00 2024-07-19 00:00:00 257 CE… #> # … with 624 more rows, 6 more variables: second_line_street_address <chr>, #> #   city_name <chr>, state_code <chr>, zip_code <chr>, #> #   eligible_to_order_and_refer <lgl>, last_updated <dttm>, and abbreviated #> #   variable names ¹​first_name, ²​last_name, ³​specialty, ⁴​optout_effective_date, #> #   ⁵​first_line_street_address opt_out(date_start = \"01/30/1998\", date_end = \"01/30/2024\") #> # A tibble: 1 × 13 #>   first_…¹ last_…² npi   speci…³ optout_effective_…⁴ optout_end_date     first…⁵ #>   <chr>    <chr>   <chr> <chr>   <dttm>              <dttm>              <chr>   #> 1 Jonathan Raines  1720… Psychi… 1998-01-30 00:00:00 2024-01-30 00:00:00 1629 M… #> # … with 6 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, #> #   last_updated <dttm>, and abbreviated variable names ¹​first_name, #> #   ²​last_name, ³​specialty, ⁴​optout_effective_date, ⁵​first_line_street_address opt_out(city = \"Los Angeles\", address = \"9201 W SUNSET BLVD\") #> # A tibble: 4 × 13 #>   first_…¹ last_…² npi   speci…³ optout_effective_…⁴ optout_end_date     first…⁵ #>   <chr>    <chr>   <chr> <chr>   <dttm>              <dttm>              <chr>   #> 1 Geemee   Chung   1497… Infect… 2016-04-20 00:00:00 2024-04-20 00:00:00 9201 W… #> 2 Genise   Fraiman 1598… Intern… 2016-10-13 00:00:00 2024-10-13 00:00:00 9201 W… #> 3 David    Saleha… 1760… Oral S… 2022-04-06 00:00:00 2024-04-06 00:00:00 9201 W… #> 4 Colleen  Ryan    1952… Family… 2022-09-21 00:00:00 2024-09-21 00:00:00 9201 W… #> # … with 6 more variables: second_line_street_address <chr>, city_name <chr>, #> #   state_code <chr>, zip_code <chr>, eligible_to_order_and_refer <lgl>, #> #   last_updated <dttm>, and abbreviated variable names ¹​first_name, #> #   ²​last_name, ³​specialty, ⁴​optout_effective_date, ⁵​first_line_street_address if (FALSE) { # Returns empty list i.e., provider is not in the database opt_out(npi = 1326011057)  # Example of possible data cleaning psych <- opt_out(specialty = \"Psychiatry\")  psych |> dplyr::mutate(last_updated = as.Date(parsedate::parse_date(last_updated)), optout_effective_date = as.Date(parsedate::parse_date(optout_effective_date)), optout_end_date = as.Date(parsedate::parse_date(optout_end_date))) |> age_days(date, optout_end_date, colname = \"days_until_end\") |> age_days(last_updated, date, colname = \"days_since_update\") |> age_days(optout_effective_date, date, colname = \"days_since_optout\") |> dplyr::mutate(zip_code = purrr::map_chr(zip_code, format_zipcode)) |> dplyr::mutate(address_full = full_address(.data, \"first_line_street_address\", \"second_line_street_address\", \"city_name\", \"state_code\",\"zip_code\")) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Order and Referring API — order_refer","title":"Search the Medicare Order and Referring API — order_refer","text":"physicians non-physician practitioners legally eligible order refer Medicare program current enrollment records Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Order and Referring API — order_refer","text":"","code":"order_refer(   npi = NULL,   last = NULL,   first = NULL,   partb = NULL,   dme = NULL,   hha = NULL,   pmd = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Order and Referring API — order_refer","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Order and Referring API — order_refer","text":"npi 10-digit National Provider Identifier (NPI) last Provider's last name first Provider's first name partb logical dme logical hha logical pmd logical clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Order and Referring API — order_refer","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Order and Referring API — order_refer","text":"Medicare Order Referring dataset provides information physicians non-physician practitioners, National Provider Identifier (NPI), type/specialty legally eligible order refer Medicare program current enrollment records Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Order and Referring API — order_refer","text":"Medicare Order Referring API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Order and Referring API — order_refer","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Order and Referring API — order_refer","text":"","code":"if (FALSE) { order_refer(npi = 1003026055)  order_refer(last = \"phadke\",             first = \"radhika\")  # Unnamed List of NPIs npi_list <- c(1003026055,               1316405939,               1720392988,               1518184605,               1922056829,               1083879860)  npi_list |> purrr::map_dfr(order_refer)  # Data frame of NPIs npi_df <- data.frame(npi = c(1003026055,                              1316405939,                              1720392988,                              1518184605,                              1922056829,                              1083879860)) npi_df |> tibble::deframe() |> purrr::map_dfr(order_refer) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"list enrollment applications pending CMS contractor review physicians & non-physicians.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"","code":"pending_applications(   npi = NULL,   last_name = NULL,   first_name = NULL,   type = c(\"physician\", \"non-physician\"),   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"npi National Provider Identifier (NPI) number last_name Last name provider first_name First name provider type physician non-physician clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Pending Initial Logging Tracking (L & T) dataset provides list pending applications processed CMS contractors.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Medicare Pending Initial Logging Tracking Physicians API Medicare Pending Initial Logging Tracking Non-Physicians API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"","code":"pending_applications(npi = 1487003984, type = \"physician\") #> # A tibble: 1 × 3 #>   npi        last_name first_name #>   <chr>      <chr>     <chr>      #> 1 1487003984 AALAI     MARRIAM    pending_applications(npi = 1487003984, type = \"non-physician\") #> # A tibble: 1 × 3 #>   npi   last_name first_name #>   <lgl> <lgl>     <lgl>      #> 1 NA    NA        NA         pending_applications(last_name = \"Abbott\", type = \"non-physician\") #> # A tibble: 1 × 3 #>   npi        last_name first_name #>   <chr>      <chr>     <chr>      #> 1 1871240168 ABBOTT    ELISE      pending_applications(first_name = \"John\", type = \"physician\") #> # A tibble: 34 × 3 #>    npi        last_name          first_name #>    <chr>      <chr>              <chr>      #>  1 1881791739 ADAMS              JOHN       #>  2 1841280963 BIGBEE             JOHN       #>  3 1619996378 BODDEN             JOHN       #>  4 1588744569 BRUNO              JOHN       #>  5 1861142556 BURKE              JOHN       #>  6 1700348547 CARTER             JOHN       #>  7 1306817531 COMBS              JOHN       #>  8 1144815689 DELA CRUZ PORTUGAL JOHN       #>  9 1730349580 ECHEVARRIA         JOHN       #> 10 1982680997 EVERED             JOHN       #> # … with 24 more rows"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated geography service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"","code":"physician_by_geography(   geo_level = NULL,   fips = NULL,   geo_desc = NULL,   hcpcs_code = NULL,   hcpcs_desc = NULL,   hcpcs_drug = NULL,   pos = NULL,   year = 2020,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"geo_level Identifies level geography data row aggregated. value 'State' indicates data row aggregated single state identified Rendering Provider State column given HCPCS Code Level. value 'National' indicates data row aggregated across states given HCPCS Code Level. fips FIPS code referring provider state. variable blank reported national level. geo_desc state name provider located, reported NPPES. values include 50 United States, District Columbia, U.S. territories, Armed Forces areas, Unknown Foreign Country. Data aggregated National level identified word 'National'. hcpcs_code HCPCS code used identify specific medical service furnished provider. hcpcs_desc Description HCPCS code specific medical service furnished provider. HCPCS descriptions associated CPT codes consumer friendly descriptions provided AMA. CPT Consumer Friendly Descriptors lay synonyms CPT descriptors intended help healthcare consumers medical professionals understand clinical procedures bills patient portals. CPT Consumer Friendly Descriptors used clinical coding documentation. descriptions CMS Level II descriptions provided long form. Due variable length restrictions, CMS Level II descriptions truncated 256 bytes. result, HCPCS description can associated one HCPCS code. hcpcs_drug Identifies whether HCPCS code specific service furnished provider HCPCS listed Medicare Part B Drug Average Sales Price (ASP) File. pos Identifies whether place service submitted claims facility (value ‘F’) non-facility (value ‘O’). Non-facility generally office setting; however entities included non-facility. year Year YYYY format, 2013-2020; default 2020 clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Geography Service dataset contains information utilization, payment (allowed amount Medicare payment), submitted charges organized HCPCS place service national table organized provider state, HCPCS place service state table. national state tables also include HCPCS drug indicator identify whether HCPCS product/service drug defined Medicare Part B Drug ASP list.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Medicare Physician & Practitioners: Geography Service API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"","code":"physician_by_geography(hcpcs_code = \"0002A\",                        year = 2020) #> # A tibble: 9 × 16 #>    year rndrng…¹ rndrn…² rndrn…³ hcpcs…⁴ hcpcs…⁵ hcpcs…⁶ place…⁷ tot_r…⁸ tot_b…⁹ #>   <dbl> <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>     <int>   <int> #> 1  2020 National \"\"      Nation… 0002A   Adm sa… N       O            53     279 #> 2  2020 State    \"06\"    Califo… 0002A   Adm sa… N       O             3      91 #> 3  2020 State    \"12\"    Florida 0002A   Adm sa… N       O             5      16 #> 4  2020 State    \"17\"    Illino… 0002A   Adm sa… N       O             3      18 #> 5  2020 State    \"23\"    Maine   0002A   Adm sa… N       O             1      22 #> 6  2020 State    \"24\"    Maryla… 0002A   Adm sa… N       O             3      18 #> 7  2020 State    \"25\"    Massac… 0002A   Adm sa… N       O             3      16 #> 8  2020 State    \"34\"    New Je… 0002A   Adm sa… N       O             3      14 #> 9  2020 State    \"42\"    Pennsy… 0002A   Adm sa… N       O             4      40 #> # … with 6 more variables: tot_srvcs <int>, tot_bene_day_srvcs <int>, #> #   avg_sbmtd_chrg <dbl>, avg_mdcr_alowd_amt <dbl>, avg_mdcr_pymt_amt <dbl>, #> #   avg_mdcr_stdzd_amt <dbl>, and abbreviated variable names #> #   ¹​rndrng_prvdr_geo_lvl, ²​rndrng_prvdr_geo_cd, ³​rndrng_prvdr_geo_desc, #> #   ⁴​hcpcs_cd, ⁵​hcpcs_desc, ⁶​hcpcs_drug_ind, ⁷​place_of_srvc, #> #   ⁸​tot_rndrng_prvdrs, ⁹​tot_benes if (FALSE) { service <- purrr::map_dfr(as.character(2013:2020),            ~physician_by_service(npi = 1003000126, year = .x))  procedures <- service |>               dplyr::distinct(hcpcs_cd) |>               tibble::deframe()  arg_cross <- purrr::cross_df(list(              x = as.character(2013:2020),              y = procedures))  # National Level purrr::map2_dfr(arg_cross$x, arg_cross$y, ~physician_by_geography(geo_level = \"National\", year = .x, hcpcs_code = .y))  # State Level purrr::map2_dfr(arg_cross$x, arg_cross$y, ~physician_by_geography(geo_level = \"Georgia\", year = .x, hcpcs_code = .y)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"","code":"physician_by_provider(   npi = NULL,   last_org = NULL,   first = NULL,   cred = NULL,   gender = NULL,   type = NULL,   city = NULL,   state = NULL,   fips = NULL,   zip = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par_ind = NULL,   year = 2020,   clean_names = TRUE,   lowercase = TRUE,   nest = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"npi National Provider Identifier (NPI) rendering provider claim. provider NPI numeric identifier registered NPPES. last_org Last name/Organization name provider. provider registered NPPES individual (entity type code ), provider’s last name. provider registered organization (entity type code O), organization name. first individual provider's (entity type code ) first name. organization's (entity type code O) blank. cred individual provider's (entity type code ) credentials. organization's blank. gender individual provider's gender. organization's blank. type Type entity reported NPPES. entity code identifies providers registered individuals entity type code O identifies providers registered organizations. city city provider located, reported NPPES. state state provider located, reported NPPES. fips FIPS code rendering provider's state. zip provider’s zip code, reported NPPES. ruca Rural-Urban Commuting Area Code (RUCA); Census tract-based classification scheme utilizes standard Bureau Census Urbanized Area Urban Cluster definitions combination work commuting information characterize nation's Census tracts regarding rural urban status relationships. Referring Provider ZIP code cross walked United States Department Agriculture (USDA) 2010 Rural-Urban Commuting Area Codes. country country provider located, reported NPPES. specialty Derived provider specialty code reported claim. providers reported one specialty code claims, specialty code associated largest number services. par_ind Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts. value Y provider least one claim identifying provider participating Medicare accepting assignment Medicare allowed amounts within HCPCS code place service. non-participating provider may elect accept Medicare allowed amounts services accept Medicare allowed amounts services. year Year YYYY format, 2013-2020; default 2020 clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE. nest Nest related columns together; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Provider dataset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Medicare Physician & Practitioners: Provider API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"","code":"physician_by_provider(npi = 1003000423,                       year = 2020) #> # A tibble: 1 × 11 #>    year rndrng_…¹ rndrng…² totals…³ drug_s…⁴ med_sr…⁵ bene_age bene_sex bene_r…⁶ #>   <dbl> <chr>     <list>   <list>   <list>   <list>   <list>   <list>   <list>   #> 1  2020 10030004… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> # … with 2 more variables: bene_status <list>, bene_cc <list>, and abbreviated #> #   variable names ¹​rndrng_npi, ²​rndrng_prvdr, ³​totals_srvcs, ⁴​drug_srvcs, #> #   ⁵​med_srvcs, ⁶​bene_race  physician_by_provider(type = \"I\",                       city = \"Hershey\",                       state = \"PA\",                       fips = 42,                       ruca =1,                       gender = \"F\",                       cred = \"M.D.\",                       specialty = \"Anesthesiology\") #> # A tibble: 19 × 11 #>     year rndrng…¹ rndrng…² totals…³ drug_s…⁴ med_sr…⁵ bene_age bene_sex bene_r…⁶ #>    <dbl> <chr>    <list>   <list>   <list>   <list>   <list>   <list>   <list>   #>  1  2020 1023230… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  2  2020 1104213… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  3  2020 1114930… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  4  2020 1124240… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  5  2020 1154522… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  6  2020 1326249… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  7  2020 1376754… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  8  2020 1467763… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  9  2020 1518255… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 10  2020 1538506… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 11  2020 1558780… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 12  2020 1568489… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 13  2020 1578906… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 14  2020 1629289… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 15  2020 1710109… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 16  2020 1841466… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 17  2020 1942460… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 18  2020 1952796… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 19  2020 1972946… <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> # … with 2 more variables: bene_status <list>, bene_cc <list>, and abbreviated #> #   variable names ¹​rndrng_npi, ²​rndrng_prvdr, ³​totals_srvcs, ⁴​drug_srvcs, #> #   ⁵​med_srvcs, ⁶​bene_race if (FALSE) { purrr::map_dfr(as.character(2013:2020), ~physician_by_provider(npi = 1003000126, year = .x)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated provider service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"","code":"physician_by_service(   npi = NULL,   last_org = NULL,   first = NULL,   cred = NULL,   gender = NULL,   type = NULL,   city = NULL,   state = NULL,   fips = NULL,   zip = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par_ind = NULL,   hcpcs_code = NULL,   hcpcs_drug = NULL,   pos = NULL,   year = 2020,   clean_names = TRUE,   lowercase = TRUE,   nest = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"npi National Provider Identifier (NPI) rendering provider claim. provider NPI numeric identifier registered NPPES. last_org Last name/Organization name provider. provider registered NPPES individual (entity type code=’’), provider’s last name. provider registered organization (entity type code = ‘O’), organization name. first individual provider's (entity type code=’’) first name. organization's (entity type code = ‘O’) blank. cred individual provider's (entity type code=’’) credentials. organization's blank. gender individual provider's gender. organization's blank. type Type entity reported NPPES. entity code ‘’ identifies providers registered individuals entity type code ‘O’ identifies providers registered organizations. city city provider located, reported NPPES. state state provider located, reported NPPES. fips FIPS code rendering provider's state. zip provider’s zip code, reported NPPES. ruca Rural-Urban Commuting Area Code (RUCA); Census tract-based classification scheme utilizes standard Bureau Census Urbanized Area Urban Cluster definitions combination work commuting information characterize nation's Census tracts regarding rural urban status relationships. Referring Provider ZIP code cross walked United States Department Agriculture (USDA) 2010 Rural-Urban Commuting Area Codes. country country provider located, reported NPPES. specialty Derived provider specialty code reported claim. providers reported one specialty code claims, specialty code associated largest number services. par_ind Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts. value ‘Y’ provider least one claim identifying provider participating Medicare accepting assignment Medicare allowed amounts within HCPCS code place service. non-participating provider may elect accept Medicare allowed amounts services accept Medicare allowed amounts services. hcpcs_code HCPCS code used identify specific medical service furnished provider. HCPCS codes include two levels. Level codes Current Procedural Terminology (CPT) codes maintained American Medical Association Level II codes created CMS identify products, supplies services covered CPT codes (ambulance services). hcpcs_drug Identifies whether HCPCS code specific service furnished provider HCPCS listed Medicare Part B Drug Average Sales Price (ASP) File. Please visit ASP drug pricing page additional information. pos Identifies whether place service submitted claims facility (value ‘F’) non-facility (value ‘O’). Non-facility generally office setting; however entities included non-facility. year Year YYYY format, 2013-2020; default 2020 clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE. nest Nest related columns together; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Provider Service dataset provides information services procedures provided Medicare (fee--service) Part B beneficiaries physicians healthcare professionals. data based information gathered CMS administrative claims data Part B beneficiaries available CMS Chronic Conditions Data Warehouse. spending utilization data Physician Practitioners Provider Service Dataset aggregated following: NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility). can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Medicare Physician & Practitioners: Provider Service API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"","code":"if (FALSE) { # Search by NPI physician_by_service(npi = 1003000126)  # Search by Last Name for 2019 physician_by_service(last_org = \"Enkeshafi\", year = 2019)  # Multiple NPIs npis <- c(1003026055,           1316405939,           1720392988,           1518184605,           1922056829,           1083879860)  npis |> purrr::map_dfr(physician_by_service)  # Retrieve All Provider Data, 2013-2020 purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Information point time snapshot enrollment level data providers actively enrolled Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"","code":"provider_enrollment(   npi = NULL,   pecos_id = NULL,   enroll_id = NULL,   prov_type_code = NULL,   prov_type_desc = NULL,   state = NULL,   first_name = NULL,   middle_name = NULL,   last_name = NULL,   org_name = NULL,   gender = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"npi NPI 10-digit unique numeric identifier providers must obtain enrolling Medicare. assigned health care providers upon application National Plan Provider Enumeration System (NPPES). pecos_id Provider associate level variable (PAC ID) PECOS database used link across tables. PAC ID 10-digit unique numeric identifier assigned individual organization PECOS. entity-level information (e.g., tax identification numbers organizational names) linked PAC ID. PAC ID may associated multiple Enrollment IDs individual organization enrolled multiple times different circumstances. enroll_id Provider enrollment ID PECOS database used link across tables. Enrollment ID 15-digit unique alphanumeric identifier assigned new provider enrollment application. enrollment-level information (e.g., enrollment type, enrollment state, provider specialty reassignment benefits) linked Enrollment ID. prov_type_code Provider enrollment application enrollment specialty type. field shows provider’s primary specialty code. practitioners DME suppliers, please see Secondary Specialty file list secondary specialties (applicable). 20% practitioners DME suppliers least one secondary specialty. prov_type_desc Provider enrollment application enrollment specialty type description state Provider enrollment state, abbreviated location. Providers enroll state level, one PAC ID may associated multiple ENRLMT_IDs multiple STATE_CD values. first_name Individual provider first name middle_name Individual provider middle name last_name Individual provider last name org_name Organizational provider name gender Individual provider gender; F (female), M (male), 9 (unknown) clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Medicare Fee--Service Public Provider Enrollment dataset includes information providers actively approved bill Medicare completed 855O time data pulled Provider Enrollment Chain Ownership System (PECOS). release provider enrollment data related provider information releases Physician Compare Data Transparency.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Medicare Fee--Service Public Provider Enrollment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"","code":"provider_enrollment(npi = 1417918293,                     prov_type_code = \"14-41\") #> # A tibble: 1 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 14179… 387048… I20040… 14-41   PRACTI… FL      STEVEN  D       SHEINER NA      #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name  provider_enrollment(first_name = \"DEBRA\",                     middle_name = \"L\",                     last_name = \"FROMER\") #> # A tibble: 1 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 18018… 135525… I20031… 14-34   PRACTI… NJ      DEBRA   L       FROMER  NA      #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name  provider_enrollment(org_name = \"ELIZABETHTOWN COMMUNITY HOSPITAL\",                     state = \"NY\",                     prov_type_code = \"00-85\") #> # A tibble: 2 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 18917… 357755… O20101… 00-85   PART A… NY      NA      NA      NA      ELIZAB… #> 2 14070… 357755… O20220… 00-85   PART A… NY      NA      NA      NA      ELIZAB… #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name  provider_enrollment(prov_type_desc = \"PRACTITIONER - ENDOCRINOLOGY\",                     state = \"AK\",                     gender = \"F\") #> # A tibble: 4 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 11846… 892109… I20040… 14-46   PRACTI… AK      JANICE  A       KOVAL   NA      #> 2 17109… 094111… I20091… 14-46   PRACTI… AK      JEANNE  R       BONAR   NA      #> 3 14977… 438567… I20151… 14-46   PRACTI… AK      CYDNEY  NA      FENTON  NA      #> 4 10331… 953725… I20220… 14-46   PRACTI… AK      BRENDA  NA      GOODWIN NA      #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name   provider_enrollment(pecos_id = 2860305554,                     enroll_id = \"I20031110000120\",                     gender = \"9\") #> # A tibble: 1 × 11 #>   npi    pecos…¹ enrlm…² provi…³ provi…⁴ state…⁵ first…⁶ mdl_n…⁷ last_…⁸ org_n…⁹ #>   <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 11341… 286030… I20031… 14-41   PRACTI… TX      ROBERT  NA      YEAMAN  NA      #> # … with 1 more variable: gndr_sw <chr>, and abbreviated variable names #> #   ¹​pecos_asct_cntl_id, ²​enrlmt_id, ³​provider_type_cd, ⁴​provider_type_desc, #> #   ⁵​state_cd, ⁶​first_name, ⁷​mdl_name, ⁸​last_name, ⁹​org_name if (FALSE) { prven <- tibble::tribble( ~fn,         ~params, \"provider_enrollment\", list(npi = 1083879860), \"provider_enrollment\", list(first_name = \"MICHAEL\", middle_name = \"K\", last_name = \"GREENBERG\", state = \"MD\"), \"provider_enrollment\", list(org_name = \"LUMINUS DIAGNOSTICS LLC\", state = \"GA\"))  purrr::invoke_map_dfr(prven$fn, prven$params) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Due Date List API — revalidation_date","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Information revalidation due dates Medicare providers. Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet. lists refreshed every two months two months’ worth due dates appended list","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"revalidation_date(   enroll_id = NULL,   npi = NULL,   first_name = NULL,   last_name = NULL,   org_name = NULL,   state = NULL,   type_code = NULL,   prov_type = NULL,   specialty = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"enroll_id Enrollment ID npi National Provider Identifier (NPI) first_name First name individual provider last_name Last name individual provider org_name Legal business name organizational provider state Enrollment state type_code Provider enrollment type code (1 Part ; 2 DME; 3 Non-DME Part B) prov_type Provider type description specialty Enrollment specialty clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Revalidation Due Date List dataset contains revalidation due dates Medicare providers due revalidate following six months. provider's due date fall within ensuing six months, due date marked 'TBD'. addition dataset also includes subfiles reassignment information given provider well due date listings clinics group practices providers.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Medicare Revalidation Due Date API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"revalidation_date(enroll_id = \"I20031110000070\",                   npi = 1184699621) #> # A tibble: 1 × 13 #>   enrollment_id   npi    first…¹ last_…² organ…³ enrol…⁴ enrol…⁵ provi…⁶ enrol…⁷ #>   <chr>           <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 I20031110000070 11846… Eric    Byrd    NA      NC      3       Non-DM… Intern… #> # … with 4 more variables: revalidation_due_date <dttm>, #> #   adjusted_due_date <dttm>, individual_total_reassign_to <chr>, #> #   receiving_benefits_reassignment <int>, and abbreviated variable names #> #   ¹​first_name, ²​last_name, ³​organization_name, ⁴​enrollment_state_code, #> #   ⁵​enrollment_type, ⁶​provider_type_text, ⁷​enrollment_specialty  revalidation_date(first_name = \"Eric\",                   last_name = \"Byrd\") #> # A tibble: 2 × 13 #>   enrollment_id   npi    first…¹ last_…² organ…³ enrol…⁴ enrol…⁵ provi…⁶ enrol…⁷ #>   <chr>           <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 I20031110000070 11846… Eric    Byrd    NA      NC      3       Non-DM… Intern… #> 2 I20090128000461 15987… Eric    Byrd    NA      SC      3       Non-DM… Genera… #> # … with 4 more variables: revalidation_due_date <dttm>, #> #   adjusted_due_date <dttm>, individual_total_reassign_to <chr>, #> #   receiving_benefits_reassignment <int>, and abbreviated variable names #> #   ¹​first_name, ²​last_name, ³​organization_name, ⁴​enrollment_state_code, #> #   ⁵​enrollment_type, ⁶​provider_type_text, ⁷​enrollment_specialty  revalidation_date(state = \"FL\",                   type_code = \"3\",                   specialty = \"General Practice\") #> # A tibble: 1,480 × 13 #>    enrollment_id   npi   first…¹ last_…² organ…³ enrol…⁴ enrol…⁵ provi…⁶ enrol…⁷ #>    <chr>           <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 I20031104000582 1184… John    Abt     NA      FL      3       Non-DM… Genera… #>  2 I20031105000008 1356… Humber… Fernan… NA      FL      3       Non-DM… Genera… #>  3 I20031105000534 1467… Jorge   Santan… NA      FL      3       Non-DM… Genera… #>  4 I20031111000679 1104… Marian… De La … NA      FL      3       Non-DM… Genera… #>  5 I20031204000571 1437… Mohamm… Sheikh  NA      FL      3       Non-DM… Genera… #>  6 I20031209000730 1417… Richard Rizzo   NA      FL      3       Non-DM… Genera… #>  7 I20031211000318 1689… Rene    Casano… NA      FL      3       Non-DM… Genera… #>  8 I20031211001075 1265… Maria   Montea… NA      FL      3       Non-DM… Genera… #>  9 I20031215000276 1619… Ricardo Doming… NA      FL      3       Non-DM… Genera… #> 10 I20031215000394 1033… Arles   Perdomo NA      FL      3       Non-DM… Genera… #> # … with 1,470 more rows, 4 more variables: revalidation_due_date <dttm>, #> #   adjusted_due_date <dttm>, individual_total_reassign_to <chr>, #> #   receiving_benefits_reassignment <chr>, and abbreviated variable names #> #   ¹​first_name, ²​last_name, ³​organization_name, ⁴​enrollment_state_code, #> #   ⁵​enrollment_type, ⁶​provider_type_text, ⁷​enrollment_specialty  revalidation_date(enroll_id = \"O20110620000324\",                   org_name = \"Lee Memorial Health System\",                   state = \"FL\",                   prov_type = \"DME\",                   type_code = \"2\") #> # A tibble: 1 × 13 #>   enrollment_id   npi    first…¹ last_…² organ…³ enrol…⁴ enrol…⁵ provi…⁶ enrol…⁷ #>   <chr>           <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 O20110620000324 18011… NA      NA      Lee Me… FL      2       DME     Pharma… #> # … with 4 more variables: revalidation_due_date <dttm>, #> #   adjusted_due_date <dttm>, individual_total_reassign_to <chr>, #> #   receiving_benefits_reassignment <chr>, and abbreviated variable names #> #   ¹​first_name, ²​last_name, ³​organization_name, ⁴​enrollment_state_code, #> #   ⁵​enrollment_type, ⁶​provider_type_text, ⁷​enrollment_specialty"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Information clinic group practice revalidation Medicare enrollment.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"","code":"revalidation_group(   group_pac_id = NULL,   group_enroll_id = NULL,   group_bus_name = NULL,   group_state = NULL,   record_type = NULL,   ind_enroll_id = NULL,   ind_npi = NULL,   ind_first = NULL,   ind_last = NULL,   ind_state = NULL,   ind_specialty = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"group_pac_id PAC ID provider receiving reassignment employer group_enroll_id Enrollment ID provider receiving reassignment employer group_bus_name Legal business name provider receiving reassignment employer group_state Enrollment state provider receiving reassignment employer record_type Identifies whether record reassignment (Reassignment) employment (Physician Assistant) ind_enroll_id Enrollment ID provider reassigning benefits employee ind_npi NPI provider reassigning benefits employee ind_first First name provider reassigning benefits employee ind_last Last name provider reassigning benefits employee ind_state Enrollment state provider reassigning benefits employee ind_specialty Enrollment specialty provider reassigning benefits employee clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Revalidation Clinic Group Practice Reassignment dataset provides information physician group practice reassign billing . also includes individual employer association counts revalidation dates individual physician well clinic group practice.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Medicare Revalidation Clinic Group Practice Reassignment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"","code":"revalidation_group(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\") #> # A tibble: 3 × 15 #>   group_pac_id group_e…¹ group…² group…³ group…⁴ group…⁵ recor…⁶ indiv…⁷ indiv…⁸ #>          <dbl> <chr>     <chr>   <chr>   <chr>     <int> <chr>   <chr>     <int> #> 1   4688988371 O2015081… 127197… CT      TBD          34 Physic… I20200…  1.96e9 #> 2   3173866241 O2019051… Hartfo… CT      TBD        1676 Physic… I20200…  1.96e9 #> 3   7618242777 O2017092… Hartfo… CT      TBD         262 Physic… I20200…  1.96e9 #> # … with 6 more variables: individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>, and abbreviated variable #> #   names ¹​group_enrollment_id, ²​group_legal_business_name, ³​group_state_code, #> #   ⁴​group_due_date, ⁵​group_reassignments_and_physician_assistants, #> #   ⁶​record_type, ⁷​individual_enrollment_id, ⁸​individual_npi  revalidation_group(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") #> # A tibble: 1 × 15 #>   group_pac_id group_e…¹ group…² group…³ group…⁴ group…⁵ recor…⁶ indiv…⁷ indiv…⁸ #>          <dbl> <chr>     <chr>   <chr>   <chr>     <int> <chr>   <chr>     <int> #> 1   9436483807 O2019061… 1st Ca… FL      TBD           1 Reassi… I20190…  1.33e9 #> # … with 6 more variables: individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>, and abbreviated variable #> #   names ¹​group_enrollment_id, ²​group_legal_business_name, ³​group_state_code, #> #   ⁴​group_due_date, ⁵​group_reassignments_and_physician_assistants, #> #   ⁶​record_type, ⁷​individual_enrollment_id, ⁸​individual_npi"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Reassignments Providers due Revalidation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"revalidation_reassign(   group_pac_id = NULL,   group_enroll_id = NULL,   group_bus_name = NULL,   group_state = NULL,   record_type = NULL,   ind_enroll_id = NULL,   ind_npi = NULL,   ind_first = NULL,   ind_last = NULL,   ind_state = NULL,   ind_specialty = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"group_pac_id PAC ID provider receiving reassignment employer group_enroll_id Enrollment ID provider receiving reassignment employer group_bus_name Legal business name provider receiving reassignment employer group_state Enrollment state provider receiving reassignment employer record_type Identifies whether record reassignment (Reassignment) employment (Physician Assistant) ind_enroll_id Enrollment ID provider reassigning benefits employee ind_npi NPI provider reassigning benefits employee ind_first First name provider reassigning benefits employee ind_last Last name provider reassigning benefits employee ind_state Enrollment state provider reassigning benefits employee ind_specialty Enrollment specialty provider reassigning benefits employee clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Revalidation Reassignment List dataset provides information reassignments providers due revalidation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Medicare Revalidation Reassignment List API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"revalidation_reassign(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\") #> # A tibble: 3 × 16 #>   group_pac_id group_e…¹ group…² group…³ group…⁴ group…⁵ recor…⁶ indiv…⁷ indiv…⁸ #>          <dbl> <chr>     <chr>   <chr>   <chr>     <int> <chr>     <dbl> <chr>   #> 1   4688988371 O2015081… 127197… CT      TBD          34 Physic…  2.77e9 I20200… #> 2   3173866241 O2019051… Hartfo… CT      TBD        1676 Physic…  2.77e9 I20200… #> 3   7618242777 O2017092… Hartfo… CT      TBD         262 Physic…  2.77e9 I20200… #> # … with 7 more variables: individual_npi <int>, individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>, and abbreviated variable #> #   names ¹​group_enrollment_id, ²​group_legal_business_name, ³​group_state_code, #> #   ⁴​group_due_date, ⁵​group_reassignments_and_physician_assistants, #> #   ⁶​record_type, ⁷​individual_pac_id, ⁸​individual_enrollment_id  revalidation_reassign(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") #> # A tibble: 1 × 16 #>   group_pac_id group_e…¹ group…² group…³ group…⁴ group…⁵ recor…⁶ indiv…⁷ indiv…⁸ #>          <dbl> <chr>     <chr>   <chr>   <chr>     <int> <chr>     <dbl> <chr>   #> 1   9436483807 O2019061… 1st Ca… FL      TBD           1 Reassi…  5.29e9 I20190… #> # … with 7 more variables: individual_npi <int>, individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>, and abbreviated variable #> #   names ¹​group_enrollment_id, ²​group_legal_business_name, ³​group_state_code, #> #   ⁴​group_due_date, ⁵​group_reassignments_and_physician_assistants, #> #   ⁶​record_type, ⁷​individual_pac_id, ⁸​individual_enrollment_id"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"list type providers suppliers proper taxonomy code eligible medicare programs.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(   specialty_code = NULL,   specialty_desc = NULL,   taxonomy_code = NULL,   taxonomy_desc = NULL,   clean_names = TRUE,   lowercase = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"specialty_code Code corresponds listed Medicare specialty specialty_desc Description Medicare Provider/Supplier Type taxonomy_code taxonomy codes providers use taxonomy_desc description taxonomy providers use clean_names Clean column names janitor's clean_names() function; default TRUE. lowercase Convert column names lowercase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Medicare Provider Supplier Taxonomy Crosswalk dataset lists providers suppliers eligible enroll Medicare programs proper healthcare provider taxonomy code. data includes Medicare speciality codes, available, provider/supplier type description, taxonomy code, taxonomy description. dataset derived information gathered National Plan Provider Enumerator System (NPPES) Provider Enrollment, Chain Ownership System (PECOS).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Medicare Provider Supplier Taxonomy Crosswalk API Medicare Find Taxonomy Code","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(specialty_code = \"B4[14]\") #> # A tibble: 13 × 4 #>    medicare_specialty_code medicare_provider_supplier_type_des…¹ provi…² provi…³ #>    <chr>                   <chr>                                 <chr>   <chr>   #>  1 B4[14]                  \"Rehabilitation Agency\"               \"261QR… Ambula… #>  2 B4[14]                  \"Organ Procurement Organization\"      \"335U0… Suppli… #>  3 B4[14]                  \"Community Mental Health Center\"      \"261QM… Ambula… #>  4 B4[14]                  \"Comprehensive Outpatient Rehabilita… \"261QR… Ambula… #>  5 B4[14]                  \"End-Stage Renal Disease Facility\"    \"261QE… Ambula… #>  6 B4[14]                  \"Federally Qualified Health Center\"   \"261QF… Ambula… #>  7 B4[14]                  \"Hospice\"                             \"251G0… Agenci… #>  8 B4[14]                  \"Histocompatibility Laboratory\"       \"291U0… Labora… #>  9 B4[14]                  \"\"                                    \"29190… Labora… #> 10 B4[14]                  \"Outpatient Physical Therapy/Occupat… \"261QR… Ambula… #> 11 B4[14]                  \"Rehabilitation Agency\"               \"315D0… Nursin… #> 12 B4[14]                  \"Religious Non-Medical Health Care I… \"282J0… Hospit… #> 13 B4[14]                  \"Rural Health Clinic \"                \"261QR… Ambula… #> # … with abbreviated variable names #> #   ¹​medicare_provider_supplier_type_description, ²​provider_taxonomy_code, #> #   ³​provider_taxonomy_description_type_classification_specialization  taxonomy_crosswalk(specialty_desc = \"Rehabilitation Agency\") #> # A tibble: 2 × 4 #>   medicare_specialty_code medicare_provider_supplier_type_desc…¹ provi…² provi…³ #>   <chr>                   <chr>                                  <chr>   <chr>   #> 1 B4[14]                  Rehabilitation Agency                  261QR0… Ambula… #> 2 B4[14]                  Rehabilitation Agency                  315D00… Nursin… #> # … with abbreviated variable names #> #   ¹​medicare_provider_supplier_type_description, ²​provider_taxonomy_code, #> #   ³​provider_taxonomy_description_type_classification_specialization  taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") #> # A tibble: 1 × 4 #>   medicare_specialty_code medicare_provider_supplier_type_desc…¹ provi…² provi…³ #>   <chr>                   <chr>                                  <chr>   <chr>   #> 1 2                       Physician/General Surgery              2086S0… Allopa… #> # … with abbreviated variable names #> #   ¹​medicare_provider_supplier_type_description, ²​provider_taxonomy_code, #> #   ³​provider_taxonomy_description_type_classification_specialization  taxonomy_crosswalk(taxonomy_desc = \"Agencies/Hospice Care Community Based\") #> # A tibble: 1 × 4 #>   medicare_specialty_code medicare_provider_supplier_type_desc…¹ provi…² provi…³ #>   <chr>                   <chr>                                  <chr>   <chr>   #> 1 B4[14]                  Hospice                                251G00… Agenci… #> # … with abbreviated variable names #> #   ¹​medicare_provider_supplier_type_description, ²​provider_taxonomy_code, #> #   ³​provider_taxonomy_description_type_classification_specialization"},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009010-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9010 (2023-02-08)","title":"provider 0.0.0.9010 (2023-02-08)","text":"added hospital_enrollment() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009009-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9009 (2023-02-08)","title":"provider 0.0.0.9009 (2023-02-08)","text":"implemented cms_update_ids() applicable functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009008-2023-02-07","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9008 (2023-02-07)","title":"provider 0.0.0.9008 (2023-02-07)","text":"added addl_phone_numbers() function added nucc_taxonomy_230 dataset added examples new functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009007-2023-02-04","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9007 (2023-02-04)","title":"provider 0.0.0.9007 (2023-02-04)","text":"doctors_and_clinicians() function facility_affiliations() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009006-2023-02-03","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9006 (2023-02-03)","title":"provider 0.0.0.9006 (2023-02-03)","text":"pending_applications() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009005-2023-01-22","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9005 (2023-01-22)","title":"provider 0.0.0.9005 (2023-01-22)","text":"nesting larger outputs","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009004-2023-01-21","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9004 (2023-01-21)","title":"provider 0.0.0.9004 (2023-01-21)","text":"initial implementation distribution id update functions open_payments() vignette","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009003-2023-01-16","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9003 (2023-01-16)","title":"provider 0.0.0.9003 (2023-01-16)","text":"open_payments() function added","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009002-2023-01-05","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9002 (2023-01-05)","title":"provider 0.0.0.9002 (2023-01-05)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9001 (2022-08-31)","title":"provider 0.0.0.9001 (2022-08-31)","text":"Updated README.","code":""}]
