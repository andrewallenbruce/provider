[{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/geospatial.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load Packages","title":"Mapping Providers","text":"","code":"library(provider) library(dplyr) library(purrr) library(tidygeocoder) library(tigris) library(rmapshaper) library(ggplot2) library(sf)"},{"path":"https://andrewallenbruce.github.io/provider/articles/geospatial.html","id":"retrieve-addresses-of-all-rhcs-in-georgia","dir":"Articles","previous_headings":"","what":"Retrieve Addresses of all RHCs in Georgia","title":"Mapping Providers","text":"","code":"rhcs <- providers(state = \"GA\",                    specialty_code = \"00-17\") |>    pull(npi) |>    map_dfr(\\(x) nppes(npi = x)) |>    select(organization,           address:zip) |>    mutate(address = paste0(address, \" \", city, \", \", state),          city = NULL,          state = NULL) |>    distinct() rhcs #> # A tibble: 88 × 3 #>    organization                                  address                   zip   #>    <chr>                                         <chr>                     <chr> #>  1 TMC HARALSON FAMILY HEALTHCARE CENTER         204 ALLEN MEMORIAL DR SU… 30110 #>  2 TMC TALLAPOOSA FAMILY HEALTHCARE CENTER       25 W LYON ST TALLAPOOSA,… 30176 #>  3 HIAWASSEE FAMILY PRACTICE P C                 56 HOSPITAL ST HIAWASSEE… 30546 #>  4 TMC WEST CARROLL FAMILY HEALTHCARE CENTER INC 1125 E HIGHWAY 166 BOWDO… 30108 #>  5 BACON COUNTY HEALTH SERVICES, INC             204 E 15TH ST ALMA, GA    31510 #>  6 BOWDON- MT. ZION PRIMARY HEALTH CENTER ,INC.  41 WELLINGTON MILL RD WH… 30185 #>  7 HOSPITAL AUTHORITY OF MITCHELL COUNTY         25 PERRY ST CAMILLA, GA   31730 #>  8 THE MEDICAL CENTER OF ELBERTON, LLP           109 COLLEGE AVE ELBERTON… 30635 #>  9 UNION COUNTY HOSPITAL AUTHORITY               178 A HOSPITAL RD BLAIRS… 30512 #> 10 HOSPITAL AUTHORITY OF MITCHELL COUNTY         259 US HIGHWAY 19 NORTH … 31730 #> # ℹ 78 more rows"},{"path":"https://andrewallenbruce.github.io/provider/articles/geospatial.html","id":"geocode-with-tidygeocoder","dir":"Articles","previous_headings":"","what":"Geocode with {tidygeocoder}","title":"Mapping Providers","text":"","code":"mapbox <- geocode(rhcs,                   address = address,                   method = 'mapbox',                    full_results = TRUE) |>    select(organization:long)"},{"path":"https://andrewallenbruce.github.io/provider/articles/geospatial.html","id":"retrieve-georgia-counties-shapefile-from-tigris","dir":"Articles","previous_headings":"","what":"Retrieve Georgia counties shapefile from {tigris}","title":"Mapping Providers","text":"","code":"sf_cnt <- counties(state = \"GA\",                     year = 2022,                     progress_bar = FALSE) |>            ms_simplify()  sf_cnt$mid <- st_centroid(sf_cnt$geometry)"},{"path":"https://andrewallenbruce.github.io/provider/articles/geospatial.html","id":"map-with-ggplot","dir":"Articles","previous_headings":"","what":"Map with {ggplot}","title":"Mapping Providers","text":"","code":"ggplot(sf_cnt) +    geom_sf(fill = \"skyblue\",            colour = \"white\",            alpha = 0.5) +   geom_sf_text(aes(geometry = mid,                     label = NAME),                size = 3.5,                check_overlap = TRUE) +   geom_jitter(data = mapbox,              mapping = aes(long, lat),               fill = \"yellow\",               color = \"darkred\",               alpha = 0.75,               size = 4.5,               shape = 21,              stroke = 1.5) +   theme_void()"},{"path":"https://andrewallenbruce.github.io/provider/articles/linking-providers.html","id":"individual-provider","dir":"Articles","previous_headings":"","what":"Individual Provider","title":"Linking Providers","text":"Exploring links providers can lead many interesting insights. example, hospital New York named Elizabethtown Community Hospital.  Hospital Enrollment API includes Medicare Part (hospital) providers, get two rows back, include new data point: two facility CCNs. Plugging Facility Affiliations API, can retrieve information individual providers practicing hospital. First, -numeric CCN (331302):   returns individual providers affiliated hospital. Now search alphanumeric CCN (33Z302):  returns affiliated individual providers practice Hospital’s nursing home..  alphanumeric CCN represents sub-unit hospital, nursing home. get result ’d set parent_ccn argument numeric CCN, .e. affiliations(parent_ccn = 331302)","code":"library(chainr)  mark <- chain(   providers    = providers(pac = 7810891009),   reassignment = reassignments(pac = 7810891009),   clinicians   = clinicians(pac = 7810891009),   nppes        = nppes(npi = 1043245657),   referrals    = order_refer(npi = 1043245657),   affiliations = affiliations(pac = 7810891009),   hospitals    = affiliations(pac = 7810891009) |> pull(facility_ccn) |> map_dfr(~hospitals(facility_ccn = .x)),   utilization  = utilization_(npi = 1043245657, type = \"Provider\"))  mark #> $providers #> # A tibble: 1 × 10 #>   npi        pac   enid  specialty_code specialty_description state first middle #>   <chr>      <chr> <chr> <chr>          <chr>                 <ord> <chr> <chr>  #> 1 1043245657 7810… I200… 14-22          PRACTITIONER - PATHO… VT    MARK  K      #> # ℹ 2 more variables: last <chr>, gender <fct> #>  #> $reassignment #> # A tibble: 1 × 12 #>   npi        pac    enid  first last  associations organization pac_org enid_org #>   <chr>      <chr>  <chr> <chr> <chr>        <int> <chr>        <chr>   <chr>    #> 1 1043245657 78108… I200… MARK  FUNG             1 UNIVERSITY … 377949… O200608… #> # ℹ 3 more variables: state_org <ord>, reassignments <int>, entry <fct> #>  #> $clinicians #> # A tibble: 1 × 19 #>   npi        pac     enid  first middle last  gender credential school grad_year #>   <chr>      <chr>   <chr> <chr> <chr>  <chr> <fct>  <chr>      <chr>      <int> #> 1 1043245657 781089… I200… MARK  K      FUNG  Male   MD         UNIVE…      1999 #> # ℹ 9 more variables: specialty <chr>, facility_name <chr>, pac_org <chr>, #> #   members_org <int>, address_org <chr>, city_org <chr>, state_org <ord>, #> #   zip_org <chr>, phone_org <chr> #>  #> $nppes #> # A tibble: 1 × 29 #>   npi        entity_type enum_date  last_update status prefix first middle last  #>   <chr>      <fct>       <date>     <date>      <fct>  <chr>  <chr> <chr>  <chr> #> 1 1043245657 Individual  2006-07-11 2013-10-08  Active Dr.    MARK  K      FUNG  #> # ℹ 20 more variables: gender <fct>, credential <chr>, sole_prop <lgl>, #> #   purpose <fct>, address <chr>, city <chr>, state <ord>, zip <chr>, #> #   country <chr>, phone <chr>, fax <chr>, tx_code <chr>, tx_primary <lgl>, #> #   tx_desc <chr>, tx_license <chr>, tx_state <ord>, id_code <chr>, #> #   id_desc <chr>, id_state <ord>, id_identifier <chr> #>  #> $referrals #> # A tibble: 4 × 4 #>   npi        first last  eligible                  #>   <chr>      <chr> <chr> <fct>                     #> 1 1043245657 MARK  FUNG  Medicare Part B           #> 2 1043245657 MARK  FUNG  Home Health Agency        #> 3 1043245657 MARK  FUNG  Durable Medical Equipment #> 4 1043245657 MARK  FUNG  Power Mobility Devices    #>  #> $affiliations #> # A tibble: 4 × 7 #>   npi        pac        first middle last  facility_type facility_ccn #>   <chr>      <chr>      <chr> <chr>  <chr> <fct>         <chr>        #> 1 1043245657 7810891009 MARK  K      FUNG  Hospital      470003       #> 2 1043245657 7810891009 MARK  K      FUNG  Hospital      330250       #> 3 1043245657 7810891009 MARK  K      FUNG  Hospital      330084       #> 4 1043245657 7810891009 MARK  K      FUNG  Hospital      331302       #>  #> $hospitals #> # A tibble: 6 × 21 #>   npi_org    pac_org    enid_org        enid_state facility_ccn organization     #>   <chr>      <chr>      <chr>           <ord>      <chr>        <chr>            #> 1 1568419976 3779491071 O20021111000009 VT         470003       UNIVERSITY OF V… #> 2 1568419976 3779491071 O20021111000009 VT         470003       UNIVERSITY OF V… #> 3 1033270699 2769396878 O20120110000201 NY         330250       CHAMPLAIN VALLE… #> 4 1114954682 4082525837 O20101129000099 NY         330084       ALICE HYDE MEDI… #> 5 1114954682 4082525837 O20101129000099 NY         330084       ALICE HYDE MEDI… #> 6 1891785184 3577554138 O20101110000259 NY         331302       ELIZABETHTOWN C… #> # ℹ 15 more variables: doing_business_as <chr>, specialty_code <chr>, #> #   specialty <chr>, incorp_date <date>, incorp_state <ord>, structure <chr>, #> #   address <chr>, city <chr>, state <ord>, zip <chr>, location_type <chr>, #> #   registration <fct>, multi_npi <lgl>, reh_conversion <lgl>, subgroup <fct> #>  #> $utilization #> # A tibble: 8 × 20 #>    year npi   entity_type first middle last  gender credential specialty address #>   <int> <chr> <fct>       <chr> <chr>  <chr> <fct>  <chr>      <chr>     <chr>   #> 1  2014 1043… Individual  Mark  K      Fung  Male   MD, PHD    Pathology 111 Co… #> 2  2015 1043… Individual  Mark  K      Fung  Male   MD, PHD    Pathology 111 Co… #> 3  2016 1043… Individual  Mark  K      Fung  Male   MD, PHD    Pathology 111 Co… #> 4  2017 1043… Individual  Mark  K      Fung  Male   MD, PHD    Pathology 111 Co… #> 5  2018 1043… Individual  Mark  K      Fung  Male   MD, PHD    Pathology 111 Co… #> 6  2019 1043… Individual  Mark  K      Fung  Male   MD, PHD    Pathology 111 Co… #> 7  2020 1043… Individual  Mark  K      Fung  Male   MD, PHD    Pathology 111 Co… #> 8  2021 1043… Individual  Mark  K      Fung  Male   MD, PHD    Pathology 111 Co… #> # ℹ 10 more variables: city <chr>, state <ord>, zip <chr>, fips <chr>, #> #   ruca <chr>, country <chr>, par <lgl>, performance <list>, #> #   demographics <list>, conditions <list> #>  #> attr(,\"class\") #> [1] \"chain\" \"list\" vctrs::vec_rbind(   display_long(providers(pac = 7810891009)) |> tibble::add_column(source = \"`providers()`\"),   display_long(reassignments(pac = 7810891009)) |> tibble::add_column(source = \"`reassignments()`\"),   display_long(clinicians(pac = 7810891009)) |> tibble::add_column(source = \"`clinicians()`\"),   display_long(nppes(npi = 1043245657)) |> tibble::add_column(source = \"`nppes()`\"),   display_long(order_refer(npi = 1043245657)) |> tibble::add_column(source = \"`order_refer()`\")) |>    distinct(name, value, .keep_all = TRUE) |>    gt(groupname_col = \"source\",       row_group_as_column = TRUE, process_md = TRUE) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    tab_options(column_labels.hidden = TRUE,                table.width = px(600),               heading.background.color = \"black\",               heading.align = \"left\",                stub_row_group.font.weight = \"bold\") |>    tab_header(title = md(\"**PROVIDER**: Mark, K. Fung, M.D.\")) |>    opt_horizontal_padding(scale = 2) |>    opt_all_caps() affiliations(pac = 7810891009) |>    pull(facility_ccn) |>   map_dfr(~hospitals(facility_ccn = .x)) |>    select(-reh_conversion) |>    display_long(cols = !organization) |>    filter(!is.na(value)) |>    gt(groupname_col = \"organization\",       row_group_as_column = TRUE) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    tab_options(column_labels.hidden = TRUE,                table.width = px(800),               heading.background.color = \"black\",               heading.align = \"left\",                stub_row_group.font.weight = \"bold\") |>    tab_header(title = md(\"**FACILITY** AFFILIATIONS\")) |>    opt_horizontal_padding(scale = 2) |>    opt_all_caps() providers(organization = \"Elizabethtown Community Hospital\") |>    gt_preview(top_n = 10) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) hospitals(organization = \"Elizabethtown Community Hospital\") |>    gt_preview(top_n = 10) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) affiliations(facility_ccn = 331302) |>    gt_preview(top_n = 20) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) affiliations(facility_ccn = \"33Z302\") |>    gt_preview(top_n = 10) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\"))"},{"path":"https://andrewallenbruce.github.io/provider/articles/networks.html","id":"provider-networks","dir":"Articles","previous_headings":"","what":"Provider Networks","title":"Provider Networks","text":"","code":"williams <- provider:::georgia_reassignments() |>   filter(npi          == \"1346391299\") |>    mutate(provider     = str_glue(\"{first} {last}\"),          #provider     = str_to_title(provider),          organization = str_to_title(organization),          organization = str_remove_all(organization,                          regex(\"Llc|Inc| Pc|-|,+|\\\\.\")),          organization = str_squish(organization)) |>    select(provider, organization, reassignments) |>    arrange(desc(reassignments)) williams #> # A tibble: 38 × 3 #>    provider          organization                                  reassignments #>    <glue>            <chr>                                                 <int> #>  1 JONATHAN WILLIAMS Emergency Coverage Corp                                 257 #>  2 JONATHAN WILLIAMS Southland Bainbridge Hospitalist Group                  212 #>  3 JONATHAN WILLIAMS Crisp Regional Hospital                                 200 #>  4 JONATHAN WILLIAMS Phoebe Putney Memorial Hospital                         184 #>  5 JONATHAN WILLIAMS Southland Emergency Medical Services Consoli…           137 #>  6 JONATHAN WILLIAMS Union County Hospital Authority                         117 #>  7 JONATHAN WILLIAMS Clinch County Hospital Authority                        104 #>  8 JONATHAN WILLIAMS Sgmp Southland                                          102 #>  9 JONATHAN WILLIAMS Southland Consolidated Emergency Services                75 #> 10 JONATHAN WILLIAMS Southland Emergency Medical Services                     74 #> # ℹ 28 more rows"},{"path":"https://andrewallenbruce.github.io/provider/articles/networks.html","id":"tidygraph","dir":"Articles","previous_headings":"","what":"{tidygraph}","title":"Provider Networks","text":"","code":"will_tdgrph <- tidygraph::as_tbl_graph(williams, directed = FALSE)  summary(will_tdgrph) #> IGRAPH 17415ea UN-- 39 38 --  #> + attr: name (v/c), reassignments (e/n) will_tdgrph #> # A tbl_graph: 39 nodes and 38 edges #> # #> # An unrooted tree #> # #> # A tibble: 39 × 1 #>   name                                              #>   <chr>                                             #> 1 JONATHAN WILLIAMS                                 #> 2 Emergency Coverage Corp                           #> 3 Southland Bainbridge Hospitalist Group            #> 4 Crisp Regional Hospital                           #> 5 Phoebe Putney Memorial Hospital                   #> 6 Southland Emergency Medical Services Consolidated #> # ℹ 33 more rows #> # #> # A tibble: 38 × 3 #>    from    to reassignments #>   <int> <int>         <int> #> 1     1     2           257 #> 2     1     3           212 #> 3     1     4           200 #> # ℹ 35 more rows ggraph(will_tdgrph, \"stress\") +    geom_edge_link(end_cap = circle(0.5, 'mm'),                   edge.width = 0.5, color = \"grey\") +   geom_node_point(show.legend = FALSE,                    alpha = 1,                    color = 'steelblue',                   size = 2.5) +    geom_node_label(aes(label = name),                  repel = FALSE,                  size = 3,                  alpha = 0.85,                  label.r = unit(0.25, \"lines\"),                  label.size = 0.1,                  check_overlap = TRUE) +   theme_graph(fg_text_colour = 'white') # individuals <- southland |> #   filter(associations > 5) |>  #   distinct(npi_ind, .keep_all = TRUE) |>  #   pull(npi_ind) |> #   map_dfr(~reassignments(npi = .x)) |>  #   mutate(individual = str_glue(\"{first} {last}\")) |>  #   select(individual, #          organization,  #          associations, #          entry,  #          reassignments_org = reassignments,  #          pac_org,  #          enid_org,  #          npi_ind = npi,  #          pac_ind = pac,  #          enid_ind = enid) |>  #   filter(organization != \"SGMP SOUTHLAND LLC\") #  # individuals x <- c(1, 0.9871, 0.9485, 0.8855, 0.7994, 0.6927, 0.5681, 0.4287, 0.2782, 0.1205,     -0.0403, -0.2, -0.3546, -0.5, -0.6324, -0.7485, -0.8452, -0.92, -0.9709, -0.9968,     -0.9968, -0.9709, -0.92, -0.8452, -0.7485, -0.6324, -0.5, -0.3546, -0.2, -0.0403,     0.1205, 0.2782, 0.4287, 0.5681, 0.6927, 0.7994, 0.8855, 0.9485, 0.9871) y <- c(0, 0.1604, 0.3167, 0.4647, 0.6007, 0.7212, 0.823, 0.9035, 0.9605, 0.9927,     0.9992, 0.9798, 0.935, 0.866, 0.7746, 0.6631, 0.5345, 0.392, 0.2393, 0.0805,     -0.0805, -0.2393, -0.392, -0.5345, -0.6631, -0.7746, -0.866, -0.935, -0.9798,     -0.9992, -0.9927, -0.9605, -0.9035, -0.823, -0.7212, -0.6007, -0.4647, -0.3167,     -0.1604)  ggraph(will_tdgrph, layout = \"manual\", x = x, y = y) +      geom_edge_link0(aes(alpha = reassignments, width = reassignments, colour = reassignments)) +      scale_edge_colour_gradient(low = \"#AEDDFC\", high = \"#27408B\") +      scale_edge_width(range = c(0.2, 2)) +      scale_edge_alpha(range = c(0.1, 1)) +      geom_node_point(aes(fill = degree, size = degree), colour = \"#9F94F2\", shape = 21, stroke = 3) +      scale_fill_gradient(low = \"#87CEFF\", high = \"#27408B\") +    scale_size(range = c(1, 5)) +    geom_node_text(aes(label = name), colour = \"#0F0909\", size = 4, family = \"Helvetica\") +    theme_graph() #> Error in `geom_node_point()`: #> ! Problem while computing aesthetics. #> ℹ Error occurred in the 2nd layer. #> Caused by error in `compute_aesthetics()`: #> ! Aesthetics are not valid data columns. #> ✖ The following aesthetics are invalid: #> ✖ `fill = NULL` #> ✖ `size = NULL` #> ℹ Did you mistype the name of a data column or forget to add `after_stat()`?"},{"path":"https://andrewallenbruce.github.io/provider/articles/open.html","id":"open-payments","dir":"Articles","previous_headings":"","what":"Open Payments","title":"Open Payments","text":"","code":"ex <- open_payments(year = 2021, npi = 1043218118, na.rm = TRUE) ex #> # A tibble: 109 × 47 #>    program_year npi      covered_recipient first last  address city  state zip   #>           <int> <chr>    <fct>             <chr> <chr> <chr>   <chr> <ord> <chr> #>  1         2021 1043218… Physician         Ahad  Maho… 6739 G… Zeph… FL    33542 #>  2         2021 1043218… Physician         AHAD  MAHO… 6739 G… ZEPH… FL    33542 #>  3         2021 1043218… Physician         AHAD  MAHO… 6739 G… ZEPH… FL    33542 #>  4         2021 1043218… Physician         AHAD  MAHO… 6739 G… ZEPH… FL    33542 #>  5         2021 1043218… Physician         AHAD  MAHO… 6739 G… ZEPH… FL    33542 #>  6         2021 1043218… Physician         AHAD  MAHO… 6739 G… ZEPH… FL    33542 #>  7         2021 1043218… Physician         AHAD  MAHO… 6739 G… ZEPH… FL    33542 #>  8         2021 1043218… Physician         AHAD  MAHO… 6739 G… ZEPH… FL    33542 #>  9         2021 1043218… Physician         AHAD  MAHO… 6739 G… ZEPH… FL    33542 #> 10         2021 1043218… Physician         AHAD  MAHO… 6739 G… ZEPH… FL    33542 #> # ℹ 99 more rows #> # ℹ 38 more variables: country <chr>, primary <chr>, specialty <chr>, #> #   license_state <ord>, physician_ownership <lgl>, third_party_payment <chr>, #> #   charity <lgl>, publish_date <date>, publish_delay <lgl>, #> #   publish_dispute <lgl>, related_product <lgl>, payer_id <chr>, #> #   payer_sub <chr>, payer_name <chr>, payer_state <ord>, payer_country <chr>, #> #   pay_form <chr>, pay_nature <chr>, pay_total <dbl>, pay_date <date>, … payment <- ex |>    select(payer_name,          pay_form,          pay_nature,          row_id,          group_id,          pay_total,          pay_date,           name:category,          ndc.atc_second) payment #> # A tibble: 109 × 12 #>    payer_name     pay_form pay_nature row_id group_id pay_total pay_date   name  #>    <chr>          <chr>    <chr>       <int>    <int>     <dbl> <date>     <chr> #>  1 Mobius Therap… Cash or… Compensat…      1        1    2500   2021-05-26 Mito… #>  2 Johnson & Joh… In-kind… Food and …      2        1      69.9 2021-03-04 Tecn… #>  3 Horizon Thera… In-kind… Food and …      3        1     108.  2021-08-24 TEPE… #>  4 Horizon Thera… In-kind… Food and …      4        1      97.1 2021-08-24 TEPE… #>  5 Horizon Thera… In-kind… Food and …      5        1      23.9 2021-09-30 TEPE… #>  6 Horizon Thera… In-kind… Food and …      6        1      25.6 2021-11-10 TEPE… #>  7 EyePoint Phar… In-kind… Food and …      7        1      13.8 2021-12-08 YUTIQ #>  8 EyePoint Phar… In-kind… Food and …      8        1      16.6 2021-04-15 DEXY… #>  9 Alcon Vision … In-kind… Food and …      9        1     114.  2021-05-06 Prec… #> 10 Alcon Vision … In-kind… Food and …     10        1      14.7 2021-10-06 Acry… #> # ℹ 99 more rows #> # ℹ 4 more variables: covered <lgl>, type <chr>, category <chr>, #> #   ndc.atc_second <chr> payment |>    filter(!is.na(pay_total)) |>    summarise(payments = n(),             total = sum(pay_total, na.rm = TRUE),             avg_per_pmt = total / payments) |>    gt::gt_preview() |>    gt::fmt_currency(columns = c(total, avg_per_pmt)) |>    gt::opt_all_caps() payment |>    filter(!is.na(pay_total)) |>    group_by(payer_name) |>    summarise(payments = n(),             total = sum(pay_total, na.rm = TRUE),             avg_per_pmt = total / payments) |>    arrange(desc(total)) |>    gt::gt_preview(30) |>    gt::fmt_currency(columns = c(total, avg_per_pmt)) |>    gt::opt_all_caps() payment |>    select(group_id,           pay_total,           name,           type,           category) |>    group_by(type, category, name) |>    summarise(payments = n(),             total = sum(pay_total, na.rm = TRUE),             avg_per_pmt = total / payments) |>    arrange(desc(total)) |>    gt::gt_preview(40) |>    gt::fmt_currency(columns = c(total, avg_per_pmt)) |>    gt::opt_all_caps() payment |>    filter(row_id == \"72\") #> # A tibble: 3 × 12 #>   payer_name      pay_form pay_nature row_id group_id pay_total pay_date   name  #>   <chr>           <chr>    <chr>       <int>    <int>     <dbl> <date>     <chr> #> 1 Bausch & Lomb,… Cash or… Consultin…     72        1      3000 2021-01-04 STEL… #> 2 Bausch & Lomb,… Cash or… Consultin…     72        2        NA 2021-01-04 Crys… #> 3 Bausch & Lomb,… Cash or… Consultin…     72        3        NA 2021-01-04 Trul… #> # ℹ 4 more variables: covered <lgl>, type <chr>, category <chr>, #> #   ndc.atc_second <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/open.html","id":"fuzzy-joins","dir":"Articles","previous_headings":"Open Payments","what":"Fuzzy Joins","title":"Open Payments","text":"","code":"op <- ex |>    filter(type == \"Drug\") |>    select(year = program_year,           pay_total,           group_id,          brand_name = ndc.brand_name,          generic_name = ndc.drug_name) |>    mutate(brand_name = stringr::str_to_title(brand_name),          generic_name = stringr::str_to_title(generic_name)) op #> # A tibble: 50 × 5 #>     year pay_total group_id brand_name generic_name                              #>    <int>     <dbl>    <int> <chr>      <chr>                                     #>  1  2021   2500           1 Mitosol    Mitomycin 0.2 Mg/Ml Ophthalmic Solution … #>  2  2021    108.          1 Tepezza    Teprotumumab-Trbw 500 Mg Injection [Tepe… #>  3  2021     97.1         1 Tepezza    Teprotumumab-Trbw 500 Mg Injection [Tepe… #>  4  2021     23.9         1 Tepezza    Teprotumumab-Trbw 500 Mg Injection [Tepe… #>  5  2021     25.6         1 Tepezza    Teprotumumab-Trbw 500 Mg Injection [Tepe… #>  6  2021     13.8         1 Yutiq      Fluocinolone Acetonide 0.18 Mg Drug Impl… #>  7  2021     16.6         1 Dexycu     0.005 Ml Dexamethasone 103.4 Mg/Ml Injec… #>  8  2021    325           1 Durysta    Bimatoprost 0.01 Mg Drug Implant [Duryst… #>  9  2021     18.6         1 Durysta    Bimatoprost 0.01 Mg Drug Implant [Duryst… #> 10  2021      4.05        1 Durysta    Bimatoprost 0.01 Mg Drug Implant [Duryst… #> # ℹ 40 more rows rx <- prescribers(year = 2021,                    type = 'Drug',                    npi = 1043218118) |>    select(year,          brand_name,           generic_name,           tot_claims,           tot_fills,           tot_supply,           tot_cost,           tot_benes) rx #> # A tibble: 27 × 8 #>     year brand_name        generic_name tot_claims tot_fills tot_supply tot_cost #>    <int> <chr>             <chr>             <int>     <dbl>      <int>    <dbl> #>  1  2021 Acetazolamide Er  Acetazolami…         20      20.5        533     971. #>  2  2021 Alphagan P        Brimonidine…         34      51         1424   12450. #>  3  2021 Azithromycin      Azithromycin        661    1588.       45870    7181. #>  4  2021 Brimonidine Tart… Brimonidine…        306     550.       15746    8700. #>  5  2021 Bromsite          Bromfenac S…         78      80.5       2387   21943. #>  6  2021 Carteolol Hcl     Carteolol H…         79     184.        5482    1578. #>  7  2021 Cephalexin        Cephalexin           57      57          279     444. #>  8  2021 Combigan          Brimonidine…         63      87.8       2444   17835. #>  9  2021 Dorzolamide Hcl   Dorzolamide…         71     151.        4533    2189  #> 10  2021 Dorzolamide-Timo… Dorzolamide…         99     216.        6463    3921. #> # ℹ 17 more rows #> # ℹ 1 more variable: tot_benes <int>"},{"path":"https://andrewallenbruce.github.io/provider/articles/open.html","id":"more-involved-example","dir":"Articles","previous_headings":"Open Payments","what":"More Involved Example","title":"Open Payments","text":"","code":"# plan(multisession, workers = 4) # open  <- open_payments_(npi = 1043218118) # plan(sequential) # open <- open |> janitor::remove_empty(which = c('rows', 'cols')) # open |>  #   select(program_year,  #          payer_name,  #          pay_form, #          pay_nature, #          pay_total,  #          pay_date,  #          pay_count,  #          row_id,  #          group_id,  #          name,  #          covered, #          type,  #          category,  #          ndc, #          pdi) # open |>  #   count(payer_name, #         wt = pay_count, #         sort = TRUE) # open |>  #   count(payer_id, #         wt = pay_count, #         sort = TRUE) # open |>  #   filter(!is.na(type)) |>  #   count(type, sort = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"utilization","dir":"Articles","previous_headings":"","what":"utilization()","title":"Comparing Providers","text":"","code":"future::plan(multisession, workers = 4)  # Retrieve provider's overall utilization data ind     <- utilization_(npi = 1043477615, type = \"Provider\") # Retrieve provider's utilization data by HCPCS srvc    <- utilization_(npi = 1023076643, type = \"Service\")  # Retrieve state & national chronic condition data to compare with chronic <- compare_conditions(ind) # Retrieve state & national HCPCS data to compare with hcpcs   <- compare_hcpcs(srvc)  future::plan(sequential)"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"overall-performance","dir":"Articles","previous_headings":"utilization()","what":"Overall Performance","title":"Comparing Providers","text":"","code":"performance <- ind |>    unnest(performance) |>    select(year, tot_hcpcs:.pymt_per_srvc) performance #> # A tibble: 8 × 12 #>    year tot_hcpcs tot_benes tot_srvcs tot_charges tot_allowed tot_payment #>   <int>     <int>     <int>     <int>       <dbl>       <dbl>       <dbl> #> 1  2014        45       598       823      319401      42429.      33775. #> 2  2015        54      1042      1449      551630      82729.      64720. #> 3  2016        62       619      1000      653517     111283.      87144. #> 4  2017        65       606       972      460677      88160.      68173. #> 5  2018        54       505      1034      504640     102857.      80079. #> 6  2019        55       532      1252      617797     134101.     104987. #> 7  2020        57       650      1260      482488     106512.      81868. #> 8  2021        58       748      1369      444671      97159.      75295. #> # ℹ 5 more variables: tot_std_pymt <dbl>, .copay_deduct <dbl>, #> #   .srvcs_per_bene <dbl>, .pymt_per_bene <dbl>, .pymt_per_srvc <dbl> performance |>    pivot_longer(!year,                names_to = \"measure\",                 values_to = \"value\") |>    pivot_wider(names_from = year,                values_from = value) #> # A tibble: 11 × 9 #>    measure            `2014`    `2015` `2016` `2017` `2018` `2019` `2020` `2021` #>    <chr>               <dbl>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 tot_hcpcs           45        54    6.2 e1 6.5 e1 5.4 e1 5.5 e1 5.7 e1 5.8 e1 #>  2 tot_benes          598      1042    6.19e2 6.06e2 5.05e2 5.32e2 6.5 e2 7.48e2 #>  3 tot_srvcs          823      1449    1   e3 9.72e2 1.03e3 1.25e3 1.26e3 1.37e3 #>  4 tot_charges     319401    551630    6.54e5 4.61e5 5.05e5 6.18e5 4.82e5 4.45e5 #>  5 tot_allowed      42429.    82729.   1.11e5 8.82e4 1.03e5 1.34e5 1.07e5 9.72e4 #>  6 tot_payment      33775.    64720.   8.71e4 6.82e4 8.01e4 1.05e5 8.19e4 7.53e4 #>  7 tot_std_pymt     34339.    66427.   8.93e4 6.95e4 8.37e4 1.06e5 8.26e4 7.55e4 #>  8 .copay_deduct     8654.    18009.   2.41e4 2.00e4 2.28e4 2.91e4 2.46e4 2.19e4 #>  9 .srvcs_per_bene      1.38      1.39 1.62e0 1.60e0 2.05e0 2.35e0 1.94e0 1.83e0 #> 10 .pymt_per_bene      56.5      62.1  1.41e2 1.12e2 1.59e2 1.97e2 1.26e2 1.01e2 #> 11 .pymt_per_srvc      41.0      44.7  8.71e1 7.01e1 7.74e1 8.39e1 6.50e1 5.50e1 performance |>    dplyr::mutate(year = lubridate::make_date(year)) |>    echarts4r::e_chart(x = year, height = \"80px\", width = \"300px\") |>      echarts4r::e_line(tot_hcpcs, symbol = \"none\") |>      echarts4r::e_legend(show = FALSE) |>      echarts4r::e_axis(axis = \"y\", show = FALSE) #> Error in loadNamespace(x): there is no package called 'echarts4r' ggplot(performance, aes(x = .pymt_per_srvc,                          y = .srvcs_per_bene,                          fill = year, group = year)) +   geom_point(shape = 21, size = 4, alpha = 0.75) +   theme_minimal() ind |>    unnest(performance) |>    select(year, tot_hcpcs:tot_srvcs) |>    change(!year, csm = \"_chg\") |>    gt(rowname_col = \"year\") |>    opt_table_font(font = google_font(name = \"Fira Code\")) |>    fmt_currency(columns = starts_with(\"avg_\"), decimals = 0) ind |>    unnest(performance) |>    select(year, tot_charges:tot_payment) |>    change(!year) |>    gt(rowname_col = \"year\") |>    opt_table_font(font = google_font(name = \"Fira Code\")) |>    fmt_currency(columns = c(tot_charges, tot_allowed, tot_payment), decimals = 0) |>    fmt_currency(columns = ends_with(\"_chg\"), decimals = 0, force_sign = TRUE) |>    fmt_percent(columns = ends_with(\"_pct\"), decimals = 0, force_sign = TRUE) |>    fmt_percent(columns = ends_with(\"_ror\"), decimals = 0) ind |>    unnest(performance) |>    select(year, .copay_deduct:.pymt_per_srvc) |>    change(!year) |>    gt(rowname_col = \"year\") |>    opt_table_font(font = google_font(name = \"Fira Code\")) |>    fmt_currency(columns = starts_with(\".pymt\"), decimals = 2)"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"hcpcs-utilization-data","dir":"Articles","previous_headings":"utilization()","what":"HCPCS Utilization Data","title":"Comparing Providers","text":"","code":"srvc |>    group_by(year, family) |>    mutate(hcpcs_level = dplyr::min_rank(dplyr::pick(avg_allowed, avg_payment))) |>    select(year,           hcpcs,           hcpcs_desc,           rank = hcpcs_level,           subcategory,           family,           tot_benes:tot_srvcs,           avg_charge:avg_payment) |>    arrange(year, family, rank) |>    gt(groupname_col = \"subcategory\") |>    gt_merge_stack(hcpcs, hcpcs_desc) |>    fmt_roman(rank) |>    cols_label(     tot_benes = \"Beneficiaries\",     tot_srvcs = \"Services\",     avg_charge = \"Charge\",     avg_allowed= \"Allowed\",     avg_payment = \"Payment\") |>    opt_table_font(font = google_font(name = \"Fira Code\")) |>    fmt_currency(columns = starts_with(\"avg_\"), decimals = 0) |>    opt_all_caps() srvc |>    select(year,           hcpcs,           family,           tot_benes,           tot_srvcs,           avg_charge,           avg_allowed,           avg_payment) |>    group_by(year, family) |>    summarise(tot_benes = sum(tot_benes),             tot_srvcs = sum(tot_srvcs),             avg_charge = mean(avg_charge),              avg_allowed = mean(avg_allowed),              avg_payment = mean(avg_payment), .groups = \"drop\") |>   arrange(family) |>    gt(rowname_col = \"year\") |>    fmt_currency(columns = starts_with(\"avg_\"), decimals = 0) |>   cols_label(     tot_benes = \"Beneficiaries\",     tot_srvcs = \"Services\",     avg_charge = \"Charge\",     avg_allowed= \"Allowed\",     avg_payment = \"Payment\") |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    opt_all_caps() hcpcs |>    group_by(year, level, subcategory) |>   summarise(Beneficiaries = sum(beneficiaries),             Services = sum(services),             \"Average Payment\" = mean(avg_payment), .groups = \"drop\") |>   arrange(year, subcategory) |>   gt(rowname_col = \"year\") |>    cols_align(\"left\", level) |>    cols_move_to_start(columns = subcategory) |>    fmt_integer(columns = c(Beneficiaries, Services)) |>    fmt_currency(columns = c('Average Payment'), decimals = 2) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\")) |>    opt_horizontal_padding(scale = 2) |>    tab_options(table.width = pct(50),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\") |>    opt_all_caps() hcpcs |>    select(year,           level,          hcpcs,          category,          subcategory,          family,           beneficiaries,           services,           avg_charge,           avg_allowed,           avg_payment) |>    arrange(hcpcs, year) |>   gt(rowname_col = \"year\") |>    cols_label(     hcpcs = \"HCPCS\",     avg_charge = \"Charge\",     avg_allowed= \"Allowed\",     avg_payment = \"Payment\") |>    cols_align(columns = \"level\", align = \"left\") |>   fmt_integer(columns = c(beneficiaries, services)) |>   fmt_currency(columns = starts_with(\"avg_\"), decimals = 0) |>   opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    opt_all_caps()"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"demographics","dir":"Articles","previous_headings":"utilization()","what":"Demographics","title":"Comparing Providers","text":"","code":"ind |>    unnest(performance, demographics) |>    select(year, tot_benes, starts_with(\"bene_\")) |>    select(-bene_race_detailed) |>    gt(rowname_col = \"year\") |>    cols_label(tot_benes = \"Total\") |>     fmt_percent(columns = starts_with(\"cc_\"), decimals = 0) |>   opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    sub_missing(missing_text = \"\") |>   sub_zero(zero_text = \"\") |>   opt_all_caps()"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"chronic-conditions","dir":"Articles","previous_headings":"utilization() > Demographics","what":"Chronic Conditions","title":"Comparing Providers","text":"","code":"ind |>    unnest(performance) |>    select(year, tot_benes, conditions) |>    unnest(conditions) |>   gt(rowname_col = \"year\") |>    cols_label(tot_benes = \"Total\") |>     fmt_percent(columns = starts_with(\"cc_\"), decimals = 0) |>   opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    sub_missing(missing_text = \"\") |>   sub_zero(zero_text = \"\") |>   opt_all_caps()"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"comparison-chronic-conditions","dir":"Articles","previous_headings":"utilization() > Demographics","what":"Comparison: Chronic Conditions","title":"Comparing Providers","text":"","code":"chronic |>   # filter(prevalence > 0)   # filter(!if_any(contains(\"20\"), ~ . <= 0)) |>   pivot_wider(names_from = year,                values_from = prevalence) |>   gt(rowname_col = \"level\") |>    fmt_percent(columns = contains('0'), decimals = 0) |>   opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    sub_missing(missing_text = \"\") |>    cols_nanoplot(     columns = starts_with(\"20\"),     plot_type = \"bar\",     new_col_name = \"change\",     new_col_label = \"change\",     missing_vals = \"remove\",     options = nanoplot_options(       show_data_line = FALSE,       show_data_area = FALSE,       data_bar_stroke_color = \"transparent\"     )   )"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"tidy-output","dir":"Articles","previous_headings":"","what":"Tidy Output","title":"Overview of Provider","text":"tidy data, every column variable, every row observation, every cell single value. Many outputs APIs violate form Storing column headers values, variable names Storing multiple variables one column remedy , post-processing done output returned. function tidy parameter set TRUE default:  Setting tidy FALSE return data.frame API’s un-processed output:  Several functions also arguments implement additional optional transformations output, pivot:  tidy transformations applied output function include: Favoring long format wide. descriptive, thematic variable names involving prefixes standardized vocabulary across outputs Various quality--life data transformations (e.g., using snake_case variable names, replacing empty character cells NA; converting years, dates, booleans respective data types) Nesting large groups related columns lists, initially emphasize important output. However, event prefer transformations, simply turn tidy = FALSE.","code":"order_refer(npi = 1043477615) #> # A tibble: 4 × 4 #>   npi        first last    eligible                  #>   <chr>      <chr> <chr>   <fct>                     #> 1 1043477615 SARAH HUSSAIN Medicare Part B           #> 2 1043477615 SARAH HUSSAIN Home Health Agency        #> 3 1043477615 SARAH HUSSAIN Durable Medical Equipment #> 4 1043477615 SARAH HUSSAIN Power Mobility Devices order_refer(npi = 1043477615, tidy = FALSE) #>          NPI LAST_NAME FIRST_NAME PARTB DME HHA PMD #> 1 1043477615   HUSSAIN      SARAH     Y   Y   Y   Y order_refer(npi = 1043477615, pivot = FALSE) #> # A tibble: 1 × 7 #>   npi        last_name first_name partb dme   hha   pmd   #>   <chr>      <chr>     <chr>      <lgl> <lgl> <lgl> <lgl> #> 1 1043477615 HUSSAIN   SARAH      TRUE  TRUE  TRUE  TRUE"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper Functions","title":"Overview of Provider","text":"Several functions required year argument. years available query APIs might change time, accompanying helper function retrieve years available, form <function_name>_years(). instance, quality_payment()’s : can also used pipeline, searching available years: Several functions parallelized versions, denoted underscore end name (_):","code":"qpp_years() #> [1] 2017 2018 2019 2020 2021 map_dfr(qpp_years(), ~quality_payment(year = .x, npi = 1043477615)) |>    select(year,           participation_type,           beneficiaries,          services,          charges,          final_score,          pay_adjust,           org_size,           apms_entity_name) #> # A tibble: 5 × 9 #>    year participation_type beneficiaries services charges final_score pay_adjust #>   <int> <fct>                      <int>    <int>   <dbl>       <dbl>      <dbl> #> 1  2017 MIPS APM                   43007       NA  3.64e7        97.1       1.72 #> 2  2018 MIPS APM                   41034        0  3.50e7       100         1.68 #> 3  2019 MIPS APM                   42222   415298  3.69e7        95.1       1.46 #> 4  2020 MIPS APM                   39624   374278  3.35e7        96.7       1.48 #> 5  2021 MIPS APM                   41404   403720  3.56e7        97.2       1.94 #> # ℹ 2 more variables: org_size <int>, apms_entity_name <chr> quality_payment_(npi = 1043477615) |>    select(year,           participation_type,           beneficiaries,          services,          charges,          final_score,          pay_adjust,           org_size,           apms_entity_name) #> # A tibble: 5 × 9 #>    year participation_type beneficiaries services charges final_score pay_adjust #>   <int> <fct>                      <int>    <int>   <dbl>       <dbl>      <dbl> #> 1  2017 MIPS APM                   43007       NA  3.64e7        97.1       1.72 #> 2  2018 MIPS APM                   41034        0  3.50e7       100         1.68 #> 3  2019 MIPS APM                   42222   415298  3.69e7        95.1       1.46 #> 4  2020 MIPS APM                   39624   374278  3.35e7        96.7       1.48 #> 5  2021 MIPS APM                   41404   403720  3.56e7        97.2       1.94 #> # ℹ 2 more variables: org_size <int>, apms_entity_name <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"validation-checks","dir":"Articles","previous_headings":"","what":"Validation Checks","title":"Overview of Provider","text":"Several validation checks implemented, including checks NPIs, PAC IDs, Enrollment IDs: National Provider Identifier: National Provider Identifier (NPI) unique 10-digit identification number issued health care providers United States Centers Medicare Medicaid Services (CMS) National Plan Provider Enumeration System (NPPES). individual HIPAA–covered healthcare providers organizations must obtain NPI. assigned, provider’s NPI permanent remains provider regardless job location changes.  Provider Associate-level Control ID: Provider associate-level control ID (PAC ID) 10-digit unique numeric identifier assigned individual organization PECOS. PAC ID links entity-level information (e.g., tax identification numbers organizational names) may associated multiple enrollment IDs individual organization enrolled multiple times different circumstances.  Medicare Enrollment ID: Enrollment ID 15-digit unique alphanumeric identifier assigned new provider enrollment application. enrollment-level information (e.g., enrollment type, enrollment state, provider specialty reassignment benefits) linked Enrollment ID.","code":"# Must be 10 digits long open_payments(year = 2021, npi = 12345691234) #> Error in `open_payments()`: #> ! An NPI must be 10 digits long. #> ✖ 12345691234 contains 11 digits.  # Must be numeric nppes(npi = \"O12345678912\") #> Error in `nppes()`: #> ! An NPI must be numeric. #> ✖ \"O12345678912\" contains non-numeric characters.  # Must pass Luhn check pending(npi = 001234569123, type = \"P\") #> Error in `pending()`: #> ! \"1234569123\" is not a valid NPI. #> → Did you mean \"1234569121\"? # Must be 10 digits long affiliations(pac = 0123456789) #> Error in `affiliations()`: #> ! A PAC ID must be 10 digits long. #> ✖ 123456789 contains 9 digits.  # Must be numeric hospitals(pac_org = \"O12345678912\") #> Error in `hospitals()`: #> ! A PAC ID must be numeric. #> ✖ \"O12345678912\" contains non-numeric characters. # Must be a character vector clinicians(enid = 0123456789123456) #> Error in `clinicians()`: #> ! An Enrollment ID must be a <character> vector. #> ✖ 123456789123456 is a <numeric> vector.  # Must be 15 characters long reassignments(enid = \"I123456789123456\") #> Error in `reassignments()`: #> ! An Enrollment ID must be 15 characters long. #> ✖ \"I123456789123456\" contains 16 characters.  # Must begin with a capital I (Individual) or O (Organization/Group) providers(enid = \"L12345678912345\") #> Error in `providers()`: #> ! An Enrollment ID must begin with a capital `I` or `O`. #> ✖ \"L12345678912345\" begins with \"L\".  # Some functions require one of ID types hospitals(enid_org = \"I20180115000174\") #> Error in `hospitals()`: #> ! An Organizational Enrollment ID must begin with a capital `O`. #> ✖ \"I20180115000174\" begins with \"I\"."},{"path":"https://andrewallenbruce.github.io/provider/articles/qpp.html","id":"quality-payment-reporting","dir":"Articles","previous_headings":"","what":"Quality Payment Reporting","title":"Quality Payment Program","text":"","code":"plan(multisession, workers = 4) q <- quality_payment_(npi = 1144544834) plan(sequential) q #> # A tibble: 6 × 47 #>    year npi        npi_type   first middle last   state first_approved_date #>   <int> <chr>      <fct>      <chr> <chr>  <chr>  <ord> <date>              #> 1  2017 1144544834 Individual EMILY T      MANLEY GA    2011-09-13          #> 2  2018 1144544834 Individual EMILY T      MANLEY GA    2011-09-13          #> 3  2018 1144544834 Individual EMILY T      MANLEY GA    2011-09-13          #> 4  2019 1144544834 Individual EMILY T      MANLEY GA    2011-09-13          #> 5  2020 1144544834 Individual EMILY T      MANLEY GA    2011-09-13          #> 6  2021 1144544834 Individual EMILY T      MANLEY GA    2011-09-13          #> # ℹ 39 more variables: years_in_medicare <dbl>, participation_type <fct>, #> #   beneficiaries <int>, services <int>, charges <dbl>, final_score <dbl>, #> #   pay_adjust <dbl>, quality_score <dbl>, pi_score <dbl>, ia_score <dbl>, #> #   cost_score <dbl>, complex_bonus <dbl>, qi_bonus <dbl>, #> #   newly_enrolled <lgl>, is_maqi <lgl>, org_id <int>, org_size <int>, #> #   org_name <chr>, org_address <chr>, org_city <chr>, org_state <ord>, #> #   org_zip <chr>, org_hosp_vbp_name <chr>, org_facility_based <lgl>, …"},{"path":"https://andrewallenbruce.github.io/provider/articles/qpp.html","id":"grouping","dir":"Articles","previous_headings":"","what":"Grouping","title":"Quality Payment Program","text":"","code":"q |>    select(year,           participation_type,          org_name,          org_size,          beneficiaries,          services,          charges,          final_score,          pay_adjust,          ind_lvt_status_desc) #> # A tibble: 6 × 10 #>    year participation_type org_name      org_size beneficiaries services charges #>   <int> <fct>              <chr>            <int>         <int>    <int>   <dbl> #> 1  2017 Group              NORTH GEORGI…        8          2867       NA 1355375 #> 2  2018 Group              NORTH GEORGI…        8          2731        0 1268854 #> 3  2018 Group              ADVANCED DER…       12          3165        0 1051616 #> 4  2019 Group              ADVANCED DER…       13          5621    25215 2720001 #> 5  2020 Group              ADVANCED DER…       13          4804    21667 2383127 #> 6  2021 Group              ADVANCED DER…       11          4722    19234 2270356 #> # ℹ 3 more variables: final_score <dbl>, pay_adjust <dbl>, #> #   ind_lvt_status_desc <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/qpp.html","id":"special-statuses","dir":"Articles","previous_headings":"Grouping","what":"Special Statuses","title":"Quality Payment Program","text":"","code":"select(q, year, participation_type, org_name, org_size, qpp_status) |>    unnest(qpp_status) #> # A tibble: 32 × 5 #>     year participation_type org_name                          org_size qualified #>    <int> <fct>              <chr>                                <int> <fct>     #>  1  2017 Group              NORTH GEORGIA DERMATOLOGY, P.C.          8 Quality … #>  2  2017 Group              NORTH GEORGIA DERMATOLOGY, P.C.          8 Small Pr… #>  3  2018 Group              NORTH GEORGIA DERMATOLOGY, P.C.          8 Quality … #>  4  2018 Group              NORTH GEORGIA DERMATOLOGY, P.C.          8 Engaged   #>  5  2018 Group              NORTH GEORGIA DERMATOLOGY, P.C.          8 Small Pr… #>  6  2018 Group              NORTH GEORGIA DERMATOLOGY, P.C.          8 Quality … #>  7  2018 Group              NORTH GEORGIA DERMATOLOGY, P.C.          8 Engaged   #>  8  2018 Group              NORTH GEORGIA DERMATOLOGY, P.C.          8 Small Pr… #>  9  2018 Group              ADVANCED DERMATOLOGY OF GEORGIA,…       12 Quality … #> 10  2018 Group              ADVANCED DERMATOLOGY OF GEORGIA,…       12 Engaged   #> # ℹ 22 more rows select(q, year, participation_type, org_name, org_size, qpp_status) |>    unnest(qpp_status) |>    count(org_name, qualified, sort = TRUE) #> # A tibble: 9 × 3 #>   org_name                             qualified              n #>   <chr>                                <fct>              <int> #> 1 ADVANCED DERMATOLOGY OF GEORGIA, LLC Engaged                5 #> 2 ADVANCED DERMATOLOGY OF GEORGIA, LLC Small Practitioner     5 #> 3 ADVANCED DERMATOLOGY OF GEORGIA, LLC Quality Bonus          5 #> 4 ADVANCED DERMATOLOGY OF GEORGIA, LLC HPSA Clinician         3 #> 5 ADVANCED DERMATOLOGY OF GEORGIA, LLC PI Hardship            3 #> 6 ADVANCED DERMATOLOGY OF GEORGIA, LLC PI Reweighting         3 #> 7 NORTH GEORGIA DERMATOLOGY, P.C.      Small Practitioner     3 #> 8 NORTH GEORGIA DERMATOLOGY, P.C.      Quality Bonus          3 #> 9 NORTH GEORGIA DERMATOLOGY, P.C.      Engaged                2"},{"path":"https://andrewallenbruce.github.io/provider/articles/qpp.html","id":"individual-category-measures","dir":"Articles","previous_headings":"Grouping","what":"Individual Category Measures","title":"Quality Payment Program","text":"","code":"select(q, year, participation_type, org_name, org_size, qpp_measures) |>   unnest(qpp_measures) #> # A tibble: 70 × 7 #>     year participation_type org_name          org_size category measure_id score #>    <int> <fct>              <chr>                <int> <fct>    <chr>      <dbl> #>  1  2017 Group              NORTH GEORGIA DE…        8 Quality  111          5.5 #>  2  2017 Group              NORTH GEORGIA DE…        8 Quality  110          3.7 #>  3  2017 Group              NORTH GEORGIA DE…        8 Quality  138          3   #>  4  2017 Group              NORTH GEORGIA DE…        8 Quality  265          3   #>  5  2017 Group              NORTH GEORGIA DE…        8 Quality  47           3   #>  6  2017 Group              NORTH GEORGIA DE…        8 Quality  137          3   #>  7  2017 Group              NORTH GEORGIA DE…        8 Improve… IA_BE_6     40   #>  8  2017 Group              NORTH GEORGIA DE…        8 Improve… IA_AHE_1    40   #>  9  2017 Group              NORTH GEORGIA DE…        8 Cost     TPCC_1       4.6 #> 10  2018 Group              NORTH GEORGIA DE…        8 Quality  431          8.9 #> # ℹ 60 more rows select(q, year, participation_type, org_name, org_size, qpp_measures) |>   unnest(qpp_measures) |>    count(year, org_name, category, sort = TRUE) #> # A tibble: 16 × 4 #>     year org_name                             category                   n #>    <int> <chr>                                <fct>                  <int> #>  1  2018 ADVANCED DERMATOLOGY OF GEORGIA, LLC Quality                   12 #>  2  2018 NORTH GEORGIA DERMATOLOGY, P.C.      Quality                   12 #>  3  2017 NORTH GEORGIA DERMATOLOGY, P.C.      Quality                    6 #>  4  2019 ADVANCED DERMATOLOGY OF GEORGIA, LLC Quality                    6 #>  5  2020 ADVANCED DERMATOLOGY OF GEORGIA, LLC Quality                    6 #>  6  2021 ADVANCED DERMATOLOGY OF GEORGIA, LLC Quality                    6 #>  7  2018 ADVANCED DERMATOLOGY OF GEORGIA, LLC Improvement Activities     4 #>  8  2018 NORTH GEORGIA DERMATOLOGY, P.C.      Improvement Activities     4 #>  9  2017 NORTH GEORGIA DERMATOLOGY, P.C.      Improvement Activities     2 #> 10  2018 ADVANCED DERMATOLOGY OF GEORGIA, LLC Cost                       2 #> 11  2018 NORTH GEORGIA DERMATOLOGY, P.C.      Cost                       2 #> 12  2019 ADVANCED DERMATOLOGY OF GEORGIA, LLC Improvement Activities     2 #> 13  2020 ADVANCED DERMATOLOGY OF GEORGIA, LLC Improvement Activities     2 #> 14  2021 ADVANCED DERMATOLOGY OF GEORGIA, LLC Improvement Activities     2 #> 15  2017 NORTH GEORGIA DERMATOLOGY, P.C.      Cost                       1 #> 16  2019 ADVANCED DERMATOLOGY OF GEORGIA, LLC Cost                       1 plan(multisession, workers = 4) qq <- quality_payment_(npi = 1043477615) plan(sequential) qq #> # A tibble: 5 × 57 #>    year npi        npi_type   first middle last    state first_approved_date #>   <int> <chr>      <fct>      <chr> <chr>  <chr>   <ord> <date>              #> 1  2017 1043477615 Individual SARAH K      HUSSAIN PA    2014-01-27          #> 2  2018 1043477615 Individual SARAH K      HUSSAIN PA    2014-01-27          #> 3  2019 1043477615 Individual SARAH K      HUSSAIN PA    2014-01-27          #> 4  2020 1043477615 Individual SARAH K      HUSSAIN PA    2014-01-27          #> 5  2021 1043477615 Individual SARAH K      HUSSAIN PA    2014-01-27          #> # ℹ 49 more variables: years_in_medicare <dbl>, participation_type <fct>, #> #   beneficiaries <int>, services <int>, charges <dbl>, final_score <dbl>, #> #   pay_adjust <dbl>, quality_score <dbl>, pi_score <dbl>, ia_score <dbl>, #> #   cost_score <dbl>, complex_bonus <dbl>, qi_bonus <dbl>, qp_status <chr>, #> #   qp_score_type <chr>, ams_mips_eligible <lgl>, newly_enrolled <lgl>, #> #   is_maqi <lgl>, org_id <int>, org_size <int>, org_name <chr>, #> #   org_address <chr>, org_city <chr>, org_state <ord>, org_zip <chr>, …"},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2023). provider: Access Public Healthcare Provider Data. R package version 0.0.0.9012,  https://github.com/andrewallenbruce/provider, https://andrewallenbruce.github.io/provider/.","code":"@Manual{,   title = {provider: Access Public Healthcare Provider Data},   author = {Andrew Bruce},   year = {2023},   note = {R package version 0.0.0.9012,  https://github.com/andrewallenbruce/provider},   url = {https://andrewallenbruce.github.io/provider/}, }"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"provider-","dir":"","previous_headings":"","what":"provider • Access Healthcare Provider Data","title":"provider • Access Healthcare Provider Data","text":"Providing easy access healthcare provider data publicly available APIs.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"package-installation","dir":"","previous_headings":"","what":"📦 Installation","title":"provider • Access Healthcare Provider Data","text":"can install provider GitHub :","code":"# install.packages(\"pak\") pak::pak(\"andrewallenbruce/provider\")"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"beginner-usage","dir":"","previous_headings":"","what":"🔰 Usage","title":"provider • Access Healthcare Provider Data","text":"","code":"library(provider) library(dplyr) library(tidyr)"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"affiliations","dir":"","previous_headings":"🔰 Usage","what":"affiliations()","title":"provider • Access Healthcare Provider Data","text":"","code":"affiliations(npi = 1023630738,              pac = 9032521372,              facility_ccn = \"37Z324\") |>    glimpse() #> Rows: 1 #> Columns: 7 #> $ npi           <chr> \"1023630738\" #> $ pac           <chr> \"9032521372\" #> $ first         <chr> \"ALYSIA\" #> $ last          <chr> \"SMITH\" #> $ facility_type <fct> Nursing home #> $ facility_ccn  <chr> \"37Z324\" #> $ parent_ccn    <chr> \"371324\""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"beneficiaries","dir":"","previous_headings":"🔰 Usage","what":"beneficiaries()","title":"provider • Access Healthcare Provider Data","text":"","code":"beneficiaries(year   = 2022,                period = \"Year\",                level  = \"County\",                state  = \"GA\",                county = \"Lowndes\") |>    glimpse() #> Rows: 1 #> Columns: 26 #> $ year              <int> 2022 #> $ period            <ord> Year #> $ level             <ord> County #> $ state             <ord> GA #> $ state_name        <ord> Georgia #> $ county            <chr> \"Lowndes\" #> $ fips              <chr> \"13185\" #> $ bene_total        <int> 19782 #> $ bene_orig         <int> 11732 #> $ bene_ma_oth       <int> 8051 #> $ bene_total_aged   <int> 16290 #> $ bene_aged_esrd    <int> 129 #> $ bene_aged_no_esrd <int> 16161 #> $ bene_total_dsb    <int> 3492 #> $ bene_dsb_esrd     <int> 143 #> $ bene_dsb_no_esrd  <int> 3350 #> $ bene_total_ab     <int> 18314 #> $ bene_ab_orig      <int> 10270 #> $ bene_ab_ma_oth    <int> 8044 #> $ bene_total_rx     <int> 14028 #> $ bene_rx_pdp       <int> 6431 #> $ bene_rx_mapd      <int> 7596 #> $ bene_rx_lis_elig  <int> 5146 #> $ bene_rx_lis_full  <int> 464 #> $ bene_rx_lis_part  <int> 143 #> $ bene_rx_lis_no    <int> 8274"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"clinicians","dir":"","previous_headings":"🔰 Usage","what":"clinicians()","title":"provider • Access Healthcare Provider Data","text":"","code":"clinicians(npi = 1932365699) |>    glimpse() #> Rows: 1 #> Columns: 18 #> $ npi           <chr> \"1932365699\" #> $ pac           <chr> \"0042370496\" #> $ enid          <chr> \"I20171107000894\" #> $ first         <chr> \"STEFAN\" #> $ middle        <chr> \"MICHAEL\" #> $ last          <chr> \"SMITH\" #> $ gender        <fct> Male #> $ school        <chr> \"ILLINOIS COLLEGE OF OPTOMETRY AT CHICAGO\" #> $ grad_year     <int> 2008 #> $ specialty     <chr> \"OPTOMETRY\" #> $ facility_name <chr> \"LEE ANN HOVEN OD PC\" #> $ pac_org       <chr> \"5193882009\" #> $ members_org   <int> 2 #> $ address_org   <chr> \"1165 S CAMINO DEL RIO SUITE 100\" #> $ city_org      <chr> \"DURANGO\" #> $ state_org     <ord> CO #> $ zip_org       <chr> \"81303\" #> $ phone_org     <chr> \"9702478762\""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"conditions","dir":"","previous_headings":"🔰 Usage","what":"conditions()","title":"provider • Access Healthcare Provider Data","text":"","code":"conditions(year  = 2018,             set   = \"Multiple\",             level = \"National\",             age   = \"All\",             demo  = \"All\",             mcc   = \"6+\") |>    glimpse() #> Rows: 1 #> Columns: 12 #> $ year                <int> 2018 #> $ level               <ord> National #> $ sublevel            <ord> National #> $ age                 <fct> All #> $ demographic         <fct> All #> $ subdemo             <fct> All #> $ mcc                 <ord> 6+ #> $ prevalence          <dbl> 0.177 #> $ tot_pymt_percap     <dbl> 32475.26 #> $ tot_std_pymt_percap <dbl> 30118.69 #> $ hosp_readmit_rate   <dbl> 0.227 #> $ er_visits_per_1k    <dbl> 1922.216 conditions(year      = 2018,             set       = \"Specific\",             level     = \"National\",             age       = \"All\",             demo      = \"All\",            condition = \"Arthritis\") |>    glimpse() #> Rows: 1 #> Columns: 12 #> $ year                <int> 2018 #> $ level               <ord> National #> $ sublevel            <ord> National #> $ age                 <fct> All #> $ demographic         <fct> All #> $ subdemo             <fct> All #> $ condition           <ord> Arthritis #> $ prevalence          <dbl> 0.3347 #> $ tot_pymt_percap     <dbl> 16890.05 #> $ tot_std_pymt_percap <dbl> 16006.14 #> $ hosp_readmit_rate   <dbl> 0.1843 #> $ er_visits_per_1k    <dbl> 1013.535"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"hospitals","dir":"","previous_headings":"🔰 Usage","what":"hospitals()","title":"provider • Access Healthcare Provider Data","text":"","code":"hospitals(npi = 1720098791) |>    glimpse() #> Rows: 1 #> Columns: 22 #> $ npi_org           <chr> \"1720098791\" #> $ pac_org           <chr> \"7618950643\" #> $ enid_org          <chr> \"O20230310002325\" #> $ enid_state        <ord> GA #> $ facility_ccn      <chr> \"110779\" #> $ organization      <chr> \"IRWIN COUNTY HOSPITAL\" #> $ doing_business_as <chr> \"PROGRESSIVE MEDICAL ENTERPRISE\" #> $ specialty_code    <chr> \"00-24\" #> $ specialty         <chr> \"PART A PROVIDER - RURAL EMERGENCY HOSPITAL (REH)\" #> $ incorp_state      <ord> GA #> $ structure         <chr> \"OTHER: HOSPITAL AUTHORITY\" #> $ address           <chr> \"710 N IRWIN AVE\" #> $ city              <chr> \"OCILLA\" #> $ state             <ord> GA #> $ zip               <chr> \"31774\" #> $ location_type     <chr> \"OTHER HOSPITAL PRACTICE LOCATION: REH\" #> $ registration      <fct> Non-Profit #> $ multi_npi         <lgl> FALSE #> $ reh_date          <date> 2023-03-23 #> $ reh_ccns          <chr> \"110130\" #> $ reh_conversion    <lgl> TRUE #> $ subgroup          <fct> None"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"laboratories","dir":"","previous_headings":"🔰 Usage","what":"laboratories()","title":"provider • Access Healthcare Provider Data","text":"","code":"laboratories(clia = \"11D0265516\") |>    glimpse() #> Rows: 1 #> Columns: 25 #> $ clia_number           <chr> \"11D0265516\" #> $ provider_name         <chr> \"DANIEL FELDMAN MD\" #> $ certificate           <ord> Compliance #> $ clia_medicare         <chr> \"00205114A3\" #> $ effective_date        <date> 1996-08-29 #> $ expiration_date       <date> 1998-08-04 #> $ expired               <lgl> TRUE #> $ termination_reason    <ord> \"Mail Returned No Forward Address Cert Ended (CL… #> $ status                <ord> In Compliance #> $ poc_ind               <lgl> TRUE #> $ type_of_action        <ord> Recertification #> $ ownership_type        <fct> Proprietary #> $ facility_type         <ord> Physician Office #> $ director_affiliations <int> 0 #> $ address               <chr> \"205 WOODROW WILSON DR\" #> $ city                  <chr> \"VALDOSTA\" #> $ state                 <ord> GA #> $ zip                   <chr> \"31602\" #> $ phone                 <chr> \"8032619888\" #> $ orig_part_date        <date> 1992-09-01 #> $ application_date      <date> 1993-01-20 #> $ certification_date    <date> 1996-03-21 #> $ mailed_date           <date> 1996-09-25 #> $ region                <fct> Atlanta #> $ clia_class_current    <fct> CLIA Lab"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"nppes","dir":"","previous_headings":"🔰 Usage","what":"nppes()","title":"provider • Access Healthcare Provider Data","text":"","code":"nppes(npi = 1497535637) |>    add_counties(state,                 zip,                 add_fips = TRUE,                 add_geo = TRUE,                 as_sf = TRUE) #> Simple feature collection with 1 feature and 25 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -83.3 ymin: 30.9 xmax: -83.3 ymax: 30.9 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 26 #>   npi    entity_type enum_date  cert_date  last_update status first last  gender #> * <chr>  <fct>       <date>     <date>     <date>      <fct>  <chr> <chr> <fct>  #> 1 14975… Individual  2023-10-04 2023-10-05 2023-10-05  Active CART… ADAMS Male   #> # ℹ 17 more variables: credential <chr>, sole_prop <lgl>, purpose <fct>, #> #   address <chr>, city <chr>, state <ord>, zip <chr>, country <chr>, #> #   phone <chr>, tx_code <chr>, tx_primary <lgl>, tx_desc <chr>, #> #   tx_license <chr>, tx_state <ord>, county <chr>, county_fips <chr>, #> #   geometry <POINT [°]>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"open_payments","dir":"","previous_headings":"🔰 Usage","what":"open_payments()","title":"provider • Access Healthcare Provider Data","text":"","code":"open_payments(year  = 2021,                npi   = 1023630738,                na.rm = TRUE) |>    glimpse() #> Rows: 1 #> Columns: 46 #> $ program_year        <int> 2021 #> $ npi                 <chr> \"1023630738\" #> $ covered_recipient   <fct> Non-Physician Practitioner #> $ first               <chr> \"ALYSIA\" #> $ middle              <chr> \"MOTA\" #> $ last                <chr> \"SMITH\" #> $ address             <chr> \"610 N HOY ST\" #> $ city                <chr> \"BUFFALO\" #> $ state               <ord> OK #> $ zip                 <chr> \"73834\" #> $ country             <chr> \"United States\" #> $ primary             <chr> \"Physician Assistant\" #> $ specialty           <chr> \"Physician Assistants & Advanced Practice Nursing … #> $ license_state       <ord> OK #> $ physician_ownership <lgl> FALSE #> $ third_party_payment <chr> \"No Third Party Payment\" #> $ publish_date        <date> 2023-06-30 #> $ publish_delay       <lgl> FALSE #> $ publish_dispute     <lgl> FALSE #> $ related_product     <lgl> TRUE #> $ payer_id            <chr> \"100000866821\" #> $ payer_sub           <chr> \"Organon LLC\" #> $ payer_name          <chr> \"Organon LLC\" #> $ payer_state         <ord> NJ #> $ payer_country       <chr> \"United States\" #> $ pay_form            <chr> \"In-kind items and services\" #> $ pay_nature          <chr> \"Food and Beverage\" #> $ pay_total           <dbl> 17.43 #> $ pay_date            <date> 2021-08-25 #> $ pay_count           <int> 1 #> $ row_id              <int> 1 #> $ group_id            <int> 1 #> $ name                <chr> \"NEXPLANON\" #> $ covered             <lgl> TRUE #> $ type                <chr> \"Drug\" #> $ category            <chr> \"CONTRACEPTIVES\" #> $ ndc                 <chr> \"78206-145-01\" #> $ ndc.rxcui           <chr> \"1111011\" #> $ ndc.atc             <chr> \"G03AC\" #> $ ndc.status          <chr> \"ACTIVE\" #> $ ndc.brand_name      <chr> \"NEXPLANON\" #> $ ndc.drug_name       <chr> \"etonogestrel 68 MG Drug Implant [Nexplanon]\" #> $ ndc.atc_first       <chr> \"genito urinary system and sex hormones\" #> $ ndc.atc_second      <chr> \"sex hormones and modulators of the genital system\" #> $ ndc.atc_third       <chr> \"hormonal contraceptives for systemic use\" #> $ ndc.atc_fourth      <chr> \"progestogens\""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"opt_out","dir":"","previous_headings":"🔰 Usage","what":"opt_out()","title":"provider • Access Healthcare Provider Data","text":"","code":"opt_out(npi = 1043522824) |>    glimpse() #> Rows: 1 #> Columns: 12 #> $ npi               <chr> \"1043522824\" #> $ first             <chr> \"James\" #> $ last              <chr> \"Smith\" #> $ specialty         <chr> \"Nurse Practitioner\" #> $ order_refer       <lgl> TRUE #> $ optout_start_date <date> 2019-07-01 #> $ optout_end_date   <date> 2025-07-01 #> $ last_updated      <date> 2023-09-15 #> $ address           <chr> \"8585 E HARTFORD DR STE 111\" #> $ city              <chr> \"SCOTTSDALE\" #> $ state             <ord> AZ #> $ zip               <chr> \"85255\""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"order_refer","dir":"","previous_headings":"🔰 Usage","what":"order_refer()","title":"provider • Access Healthcare Provider Data","text":"","code":"order_refer(npi = 1043522824) #> # A tibble: 4 × 4 #>   npi        first last  service                   #>   <chr>      <chr> <chr> <fct>                     #> 1 1043522824 JAMES SMITH Medicare Part B           #> 2 1043522824 JAMES SMITH Home Health Agency        #> 3 1043522824 JAMES SMITH Durable Medical Equipment #> 4 1043522824 JAMES SMITH Power Mobility Devices"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"outpatient","dir":"","previous_headings":"🔰 Usage","what":"outpatient()","title":"provider • Access Healthcare Provider Data","text":"","code":"outpatient(year  = 2021,             state = \"GA\",             city  = \"Valdosta\",             apc   = \"5072\") |>    glimpse() #> Rows: 1 #> Columns: 18 #> $ year                <int> 2021 #> $ ccn                 <chr> \"110122\" #> $ organization        <chr> \"South Georgia Medical Center\" #> $ address             <chr> \"2501 North Patterson Street, Po Box 1727\" #> $ city                <chr> \"Valdosta\" #> $ state               <ord> GA #> $ fips                <chr> \"13\" #> $ zip                 <chr> \"31602\" #> $ ruca                <chr> \"1\" #> $ apc                 <chr> \"5072\" #> $ apc_desc            <chr> \"Level 2 Excision/ Biopsy/ Incision and Drainage\" #> $ tot_benes           <int> 210 #> $ comp_apc_srvcs      <int> 222 #> $ avg_charges         <dbl> 6454.778 #> $ avg_allowed         <dbl> 1233.753 #> $ avg_payment         <dbl> 981.9733 #> $ tot_outlier_srvcs   <int> 0 #> $ avg_outlier_payment <dbl> 0"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"prescribers","dir":"","previous_headings":"🔰 Usage","what":"prescribers()","title":"provider • Access Healthcare Provider Data","text":"","code":"prescribers(year = 2019,              type = 'Provider',              npi = 1003000423) |>    glimpse() #> Rows: 1 #> Columns: 67 #> $ year                      <int> 2019 #> $ npi                       <chr> \"1003000423\" #> $ entity_type               <fct> Individual #> $ first                     <chr> \"Jennifer\" #> $ middle                    <chr> \"A\" #> $ last                      <chr> \"Velotta\" #> $ gender                    <fct> Female #> $ credential                <chr> \"MD\" #> $ specialty                 <chr> \"Obstetrics & Gynecology\" #> $ source                    <fct> Medicare Specialty Code #> $ address                   <chr> \"11100 Euclid Ave\" #> $ city                      <chr> \"Cleveland\" #> $ state                     <ord> OH #> $ zip                       <chr> \"44106\" #> $ fips                      <chr> \"39\" #> $ ruca                      <chr> \"1\" #> $ country                   <chr> \"US\" #> $ tot_claims                <int> 199 #> $ tot_fills                 <dbl> 344.0667 #> $ tot_cost                  <dbl> 21614.75 #> $ tot_supply                <int> 8759 #> $ tot_benes                 <int> 65 #> $ tot_claims_ge65           <int> 150 #> $ tot_fills_ge65            <dbl> 260.8667 #> $ tot_cost_ge65             <dbl> 17660.51 #> $ tot_supply_ge65           <int> 6495 #> $ tot_benes_ge65            <int> 49 #> $ tot_claims_brand          <int> 49 #> $ tot_cost_brand            <dbl> 14343.73 #> $ tot_claims_generic        <int> 150 #> $ tot_cost_generic          <dbl> 7271.02 #> $ tot_claims_other          <int> 0 #> $ tot_cost_other            <dbl> 0 #> $ tot_claims_mapd           <int> 78 #> $ tot_cost_mapd             <dbl> 9438.54 #> $ tot_claims_pdp            <int> 121 #> $ tot_cost_pdp              <dbl> 12176.21 #> $ tot_claims_lis            <int> 73 #> $ tot_cost_lis              <dbl> 9659.24 #> $ tot_claims_nlis           <int> 126 #> $ tot_cost_nlis             <dbl> 11955.51 #> $ tot_claims_opioid         <int> 0 #> $ tot_cost_opioid           <dbl> 0 #> $ tot_supply_opioid         <int> 0 #> $ tot_benes_opioid          <int> 0 #> $ rx_rate_opioid            <dbl> 0 #> $ tot_claims_opioid_la      <int> 0 #> $ tot_cost_opioid_la        <dbl> 0 #> $ tot_supply_opioid_la      <int> 0 #> $ tot_benes_opioid_la       <int> 0 #> $ tot_claims_antibioc       <int> 14 #> $ tot_cost_antibioc         <dbl> 177.68 #> $ tot_benes_antibioc        <int> 11 #> $ tot_claims_antipsych_ge65 <int> 0 #> $ tot_cost_antipsych_ge65   <dbl> 0 #> $ tot_benes_antipsych_ge65  <int> 0 #> $ bene_age_avg              <dbl> 66.63077 #> $ bene_age_lt65             <int> 16 #> $ bene_age_65_74            <int> 33 #> $ bene_race_wht             <int> 60 #> $ bene_race_nonwht          <int> 5 #> $ bene_race_api             <int> 0 #> $ bene_race_nat             <int> 0 #> $ bene_race_oth             <int> 0 #> $ bene_dual                 <int> 17 #> $ bene_ndual                <int> 48 #> $ hcc_risk_avg              <dbl> 0.8426269 prescribers(year = 2019,              npi = 1003000126,             type = 'Drug',             brand_name = 'Atorvastatin Calcium') |>    glimpse() #> Rows: 1 #> Columns: 22 #> $ year            <int> 2019 #> $ npi             <chr> \"1003000126\" #> $ last            <chr> \"Enkeshafi\" #> $ first           <chr> \"Ardalan\" #> $ city            <chr> \"Cumberland\" #> $ state           <ord> MD #> $ fips            <chr> \"24\" #> $ specialty       <chr> \"Internal Medicine\" #> $ source          <fct> Medicare Specialty Code #> $ brand_name      <chr> \"Atorvastatin Calcium\" #> $ generic_name    <chr> \"Atorvastatin Calcium\" #> $ tot_claims      <int> 41 #> $ tot_fills       <dbl> 50 #> $ tot_supply      <int> 1482 #> $ tot_cost        <dbl> 373.6 #> $ tot_benes       <int> 22 #> $ tot_claims_ge65 <int> 41 #> $ tot_fills_ge65  <dbl> 50 #> $ tot_cost_ge65   <dbl> 373.6 #> $ tot_supply_ge65 <int> 1482 #> $ tot_benes_ge65  <int> 22 #> $ level           <ord> Provider prescribers(year = 2021,              type = 'Geography',             level = 'National',             brand_name = 'Clotrimazole-Betamethasone') |>    glimpse() #> Rows: 1 #> Columns: 20 #> $ year            <int> 2021 #> $ level           <ord> National #> $ state           <ord> National #> $ brand_name      <chr> \"Clotrimazole-Betamethasone\" #> $ generic_name    <chr> \"Clotrimazole/Betamethasone Dip\" #> $ tot_prescribers <int> 203283 #> $ tot_claims      <int> 1611886 #> $ tot_fills       <dbl> 1694182 #> $ tot_cost        <dbl> 43735273 #> $ tot_benes       <int> 887643 #> $ tot_claims_ge65 <int> 1363536 #> $ tot_fills_ge65  <dbl> 1435849 #> $ tot_cost_ge65   <dbl> 36509742 #> $ tot_benes_ge65  <int> 763073 #> $ tot_cost_lis    <dbl> 877005.8 #> $ tot_cost_nlis   <dbl> 11891222 #> $ opioid          <lgl> FALSE #> $ opioid_la       <lgl> FALSE #> $ antibiotic      <lgl> FALSE #> $ antipsychotic   <lgl> FALSE"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"providers","dir":"","previous_headings":"🔰 Usage","what":"providers()","title":"provider • Access Healthcare Provider Data","text":"","code":"providers(npi  = 1720098791,            enid = \"O20040610001257\") |>    glimpse() #> Rows: 1 #> Columns: 7 #> $ npi                   <chr> \"1720098791\" #> $ pac                   <chr> \"7618950643\" #> $ enid                  <chr> \"O20040610001257\" #> $ specialty_code        <chr> \"12-70\" #> $ specialty_description <chr> \"PART B SUPPLIER - CLINIC/GROUP PRACTICE\" #> $ state                 <ord> GA #> $ organization          <chr> \"IRWIN COUNTY HOSPITAL\""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"quality_payment","dir":"","previous_headings":"🔰 Usage","what":"quality_payment()","title":"provider • Access Healthcare Provider Data","text":"","code":"quality_payment(year = 2021,                  npi  = 1932365699) |>    glimpse() #> Rows: 1 #> Columns: 20 #> $ year            <int> 2021 #> $ npi             <chr> \"1932365699\" #> $ state           <ord> CO #> $ size            <int> 3 #> $ specialty       <chr> \"Optometry\" #> $ med_years       <int> 14 #> $ type            <fct> Group #> $ beneficiaries   <int> 555 #> $ services        <int> 1157 #> $ allowed_charges <dbl> 112449 #> $ final_score     <dbl> 60 #> $ pay_adjust      <dbl> 0 #> $ quality_score   <dbl> 45 #> $ pi_score        <dbl> 0 #> $ ia_score        <dbl> 0 #> $ cost_score      <dbl> 0 #> $ complex_bonus   <dbl> 2.54 #> $ qi_bonus        <dbl> 0 #> $ statuses        <list> [<tbl_df[9 x 1]>] #> $ measures        <list> [<tbl_df[6 x 3]>] q <- quality_payment(year = 2021,                       npi = 1932365699)  select(q, year, statuses) |>    unnest(statuses) #> # A tibble: 9 × 2 #>    year category                   #>   <int> <fct>                      #> 1  2021 Engaged                    #> 2  2021 Small Practitioner         #> 3  2021 Rural Clinician            #> 4  2021 HPSA Clinician             #> 5  2021 Extreme Hardship           #> 6  2021 Extreme Hardship (Quality) #> 7  2021 Extreme Hardship (PI)      #> 8  2021 Extreme Hardship (IA)      #> 9  2021 Extreme Hardship (Cost) select(q, year, measures) |>    unnest(measures) #> # A tibble: 6 × 4 #>    year measure id    score #>   <int> <fct>   <chr> <dbl> #> 1  2021 Quality 141       3 #> 2  2021 Quality 014       3 #> 3  2021 Quality 110       3 #> 4  2021 Quality 47        3 #> 5  2021 Quality 1         0 #> 6  2021 Quality 117       0"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"quality_eligibility","dir":"","previous_headings":"🔰 Usage","what":"quality_eligibility()","title":"provider • Access Healthcare Provider Data","text":"","code":"quality_eligibility(year = 2021,                      npi  = 1932365699) |>    glimpse() #> Rows: 1 #> Columns: 29 #> $ year                <int> 2021 #> $ npi                 <chr> \"1932365699\" #> $ npi_type            <fct> Individual #> $ first               <chr> \"STEFAN\" #> $ middle              <chr> \"MICHAEL\" #> $ last                <chr> \"SMITH\" #> $ first_approved_date <date> 2008-11-15 #> $ pecos_year          <int> 2008 #> $ newly_enrolled      <lgl> FALSE #> $ specialty_desc      <chr> \"Optometry\" #> $ specialty_type      <chr> \"Doctor of Optometry\" #> $ specialty_cat       <chr> \"Physicians\" #> $ is_maqi             <lgl> FALSE #> $ org_name            <chr> \"LEE ANN HOVEN OD PC\" #> $ org_hosp_vbp_name   <chr> NA #> $ org_facility_based  <lgl> FALSE #> $ org_address         <chr> \"ADVANCED EYE CARE 1165S CAMINO DEL RIO SUITE 100\" #> $ org_city            <chr> \"DURANGO\" #> $ org_state           <ord> CO #> $ org_zip             <chr> \"81303\" #> $ ind_lvt_status_code <chr> \"BOTH\" #> $ ind_lvt_status_desc <chr> \"Both the unique beneficiaries and Part B\" #> $ ind_hosp_vbp_score  <int> 0 #> $ ind_specialty_code  <chr> \"41\" #> $ ind_specialty_desc  <chr> \"Optometry\" #> $ ind_specialty_type  <chr> \"Doctor of Optometry\" #> $ ind_specialty_cat   <chr> \"Physicians\" #> $ ind_status          <list> [<tbl_df[8 x 1]>] #> $ grp_status          <list> [<tbl_df[10 x 1]>]"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"reassignments","dir":"","previous_headings":"🔰 Usage","what":"reassignments()","title":"provider • Access Healthcare Provider Data","text":"","code":"reassignments(npi = 1932365699,                pac_org = 7719037548) |>    glimpse() #> Rows: 1 #> Columns: 12 #> $ npi           <chr> \"1932365699\" #> $ pac           <chr> \"42370496\" #> $ enid          <chr> \"I20171107000894\" #> $ first         <chr> \"STEFAN\" #> $ last          <chr> \"SMITH\" #> $ associations  <int> 2 #> $ organization  <chr> \"EYE CENTER OF THE ROCKIES PC\" #> $ pac_org       <chr> \"7719037548\" #> $ enid_org      <chr> \"O20090616000599\" #> $ state_org     <ord> CO #> $ reassignments <int> 5 #> $ entry         <fct> Reassignment"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"utilization","dir":"","previous_headings":"🔰 Usage","what":"utilization()","title":"provider • Access Healthcare Provider Data","text":"","code":"utilization(year = 2021,              npi  = 1932365699,              type = \"provider\") |>    glimpse() #> Rows: 1 #> Columns: 20 #> $ year         <int> 2021 #> $ npi          <chr> \"1932365699\" #> $ entity_type  <fct> Individual #> $ first        <chr> \"Stefan\" #> $ middle       <chr> \"M\" #> $ last         <chr> \"Smith\" #> $ gender       <fct> Male #> $ credential   <chr> \"OD\" #> $ specialty    <chr> \"Optometry\" #> $ address      <chr> \"724 St. Louis Road\" #> $ city         <chr> \"Collinsville\" #> $ state        <ord> IL #> $ zip          <chr> \"62234\" #> $ fips         <chr> \"17\" #> $ ruca         <chr> \"1\" #> $ country      <chr> \"US\" #> $ par          <lgl> TRUE #> $ performance  <list> [<tbl_df[1 x 11]>] #> $ demographics <list> [<tbl_df[1 x 12]>] #> $ conditions   <list> [<tbl_df[1 x 17]>] p <- utilization(year = 2021,                   npi = 1932365699,                   type = \"provider\")  select(p, year, performance) |>    unnest(performance) |>    glimpse() #> Rows: 1 #> Columns: 12 #> $ year            <int> 2021 #> $ tot_hcpcs       <int> 19 #> $ tot_benes       <int> 279 #> $ tot_srvcs       <int> 475 #> $ tot_charges     <dbl> 57098.8 #> $ tot_allowed     <dbl> 48345.19 #> $ tot_payment     <dbl> 31966.13 #> $ tot_std_pymt    <dbl> 31316.51 #> $ .copay_deduct   <dbl> 16379.06 #> $ .srvcs_per_bene <dbl> 1.702509 #> $ .pymt_per_bene  <dbl> 114.5739 #> $ .pymt_per_srvc  <dbl> 67.29712 select(p, year, demographics) |>    unnest(demographics) |>    glimpse() #> Rows: 1 #> Columns: 13 #> $ year               <int> 2021 #> $ bene_age_avg       <int> 72 #> $ bene_age_lt65      <int> 16 #> $ bene_age_65_74     <int> 181 #> $ bene_age_75_84     <int> 63 #> $ bene_age_gt84      <int> 19 #> $ bene_gen_female    <int> 157 #> $ bene_gen_male      <int> 122 #> $ bene_race_wht      <int> 245 #> $ bene_race_nonwht   <int> 34 #> $ bene_dual          <int> 40 #> $ bene_ndual         <int> 239 #> $ bene_race_detailed <list> [<tbl_df[1 x 5]>] select(p, year, conditions) |>    unnest(conditions) |>    glimpse() #> Rows: 1 #> Columns: 18 #> $ year         <int> 2021 #> $ hcc_risk_avg <dbl> 0.7719 #> $ cc_af        <dbl> 0.08 #> $ cc_alz       <dbl> 0.07 #> $ cc_asth      <dbl> 0.06 #> $ cc_canc      <dbl> 0.09 #> $ cc_chf       <dbl> 0.06 #> $ cc_ckd       <dbl> 0.15 #> $ cc_copd      <dbl> 0.06 #> $ cc_dep       <dbl> 0.19 #> $ cc_diab      <dbl> 0.16 #> $ cc_hplip     <dbl> 0.32 #> $ cc_hpten     <dbl> 0.33 #> $ cc_ihd       <dbl> 0.18 #> $ cc_opo       <dbl> 0.13 #> $ cc_raoa      <dbl> 0.3 #> $ cc_sz        <dbl> NA #> $ cc_strk      <dbl> NA utilization(year  = 2021,              npi   = 1932365699,             hcpcs = \"99214\",             type  = \"service\") |>    glimpse() #> Rows: 1 #> Columns: 32 #> $ year         <int> 2021 #> $ npi          <chr> \"1932365699\" #> $ level        <ord> Provider #> $ first        <chr> \"Stefan\" #> $ middle       <chr> \"M\" #> $ last         <chr> \"Smith\" #> $ gender       <fct> Male #> $ credential   <chr> \"O.D.\" #> $ specialty    <chr> \"Optometry\" #> $ address      <chr> \"724 St. Louis Road\" #> $ city         <chr> \"Collinsville\" #> $ state        <ord> IL #> $ zip          <chr> \"62234\" #> $ fips         <chr> \"17\" #> $ ruca         <chr> \"1\" #> $ country      <chr> \"US\" #> $ par          <lgl> TRUE #> $ hcpcs        <chr> \"99214\" #> $ hcpcs_desc   <chr> \"Established patient outpatient visit, total time 30-39 m… #> $ category     <chr> \"E&M\" #> $ subcategory  <chr> \"Office/Outpatient Services\" #> $ family       <chr> \"Office E&M - Established\" #> $ procedure    <fct> Non-procedure #> $ drug         <lgl> FALSE #> $ pos          <fct> Non-facility #> $ tot_benes    <int> 24 #> $ tot_srvcs    <int> 27 #> $ tot_day      <int> 27 #> $ avg_charge   <dbl> 134.7407 #> $ avg_allowed  <dbl> 132.7281 #> $ avg_payment  <dbl> 102.7159 #> $ avg_std_pymt <dbl> 99.46074 utilization(year  = 2021,              hcpcs = \"99205\",              level = \"National\",             pos   = \"F\",             type  = \"geography\") |>    glimpse() #> Rows: 1 #> Columns: 19 #> $ year         <int> 2021 #> $ level        <ord> National #> $ state        <ord> National #> $ hcpcs        <chr> \"99205\" #> $ hcpcs_desc   <chr> \"New patient outpatient visit, total time 60-74 minutes\" #> $ category     <chr> \"E&M\" #> $ subcategory  <chr> \"Office/Outpatient Services\" #> $ family       <chr> \"Office E&M - New\" #> $ procedure    <fct> Non-procedure #> $ drug         <lgl> FALSE #> $ pos          <fct> Facility #> $ tot_provs    <int> 65502 #> $ tot_benes    <int> 574426 #> $ tot_srvcs    <int> 653339 #> $ tot_day      <int> 653311 #> $ avg_charge   <dbl> 493.5003 #> $ avg_allowed  <dbl> 186.2096 #> $ avg_payment  <dbl> 143.4408 #> $ avg_std_pymt <dbl> 139.6115"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"balance_scale-code-of-conduct","dir":"","previous_headings":"","what":"⚖️ Code of Conduct","title":"provider • Access Healthcare Provider Data","text":"Please note provider project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"classical_building-governance","dir":"","previous_headings":"","what":"🏛️ Governance","title":"provider • Access Healthcare Provider Data","text":"project primarily maintained Andrew Bruce. authors may occasionally assist duties.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/add_counties.html","id":null,"dir":"Reference","previous_headings":"","what":"Add county name, FIPs, and geometry to data frame with zip codes — add_counties","title":"Add county name, FIPs, and geometry to data frame with zip codes — add_counties","text":"Add county name, FIPs, geometry data frame zip codes","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/add_counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add county name, FIPs, and geometry to data frame with zip codes — add_counties","text":"","code":"add_counties(   df,   statecol,   zipcol,   add_fips = FALSE,   add_geo = FALSE,   as_sf = FALSE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/add_counties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add county name, FIPs, and geometry to data frame with zip codes — add_counties","text":"df data frame statecol bare column name column containing state abbreviations zipcol bare column name containing zip codes add_fips add county FIPS code column, default FALSE add_geo add county geometry column, default FALSE as_sf convert tibble {sf} object, default FALSE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/add_counties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add county name, FIPs, and geometry to data frame with zip codes — add_counties","text":"","code":"if (FALSE) { # interactive()  # Example data frame containing state abbreviation and zip code ex <- dplyr::tibble(state = \"GA\",                     zip = \"31605\") ex  # Adds county name and latitude/longitude ex |> add_counties(state, zip)  # Adds county FIPS ex |> add_counties(state,                    zip,                    add_fips = TRUE)  # Adds county `geometry` column, # based on county FIPS column ex |> add_counties(state,                    zip,                    add_fips = TRUE,                    add_geo  = TRUE)  # Converts data frame to an `sf` object ex |> add_counties(state,                    zip,                    add_fips = TRUE,                    add_geo  = TRUE,                    as_sf    = TRUE) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":null,"dir":"Reference","previous_headings":"","what":"Provider Facility Affiliations — affiliations","title":"Provider Facility Affiliations — affiliations","text":"affiliations() allows user access data concerning providers' facility affiliations","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provider Facility Affiliations — affiliations","text":"","code":"affiliations(   npi = NULL,   pac = NULL,   first = NULL,   middle = NULL,   last = NULL,   facility_type = NULL,   facility_ccn = NULL,   parent_ccn = NULL,   offset = 0L,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provider Facility Affiliations — affiliations","text":"npi < integer > 10-digit Individual National Provider Identifier pac < integer > 10-digit Individual PECOS Associate Control ID first, middle, last < character > Individual Provider's name facility_type < character > \"Hospital\" \"hp\" \"Long-term care hospital\" \"ltch\" \"Nursing home\" \"nh\" \"Inpatient rehabilitation facility\" \"irf\" \"Home health agency\" \"hha\" \"Skilled nursing facility\" \"snf\" \"Hospice\" \"hs\" \"Dialysis facility\" \"df\" facility_ccn < character > 6-digit CMS Certification Number facility unit within hospital individual provider provides service parent_ccn < integer > 6-digit CMS Certification Number sub-unit's primary hospital, provider provide services said unit offset < integer > // default: 0L API pagination tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provider Facility Affiliations — affiliations","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Provider Facility Affiliations — affiliations","text":"Physician Facility Affiliations Certification Number (CCN) State Codes Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provider Facility Affiliations — affiliations","text":"","code":"if (FALSE) { # interactive() affiliations(parent_ccn = 670055) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Beneficiary Enrollment in Medicare — beneficiaries","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"beneficiaries() allows user access current data enrolled Medicare beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"","code":"beneficiaries(   year = NULL,   period = NULL,   level = NULL,   state = NULL,   county = NULL,   fips = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"year < integer > Calendar year Medicare enrollment; current years can checked : bene_years(\"year\"): Years available 12 months bene_years(\"month\"): Years available individual months period < character > Time frame Medicare enrollment; options \"Year\", Month, individual month name level < character > Geographic level data; options \"National\", \"State\", \"County\" state < character > Full state name abbreviation beneficiary residence county < character > County beneficiary residence fips < character > FIPS code beneficiary residence tidy < boolean > // default: TRUE Tidy output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"medicare-monthly-enrollment","dir":"Reference","previous_headings":"","what":"Medicare Monthly Enrollment","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"Current monthly information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographic areas including national, state county. hospital/medical coverage data can broken health care delivery (Original Medicare versus Medicare Advantage Health Plans) prescription drug coverage data can examined enrolled stand-alone Prescription Drug Plans enrolled Medicare Advantage Prescription Drug plans. dataset includes enrollee counts rolling 12 month basis.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"Medicare Monthly Enrollment Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"","code":"if (FALSE) { # interactive() beneficiaries(year   = 2022,               period = \"Year\",               level  = \"County\",               county = \"Autauga\")  beneficiaries(year   = 2022,               period = \"July\",               state  = \"Georgia\")  beneficiaries(level = \"State\",               fips  = \"10\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":null,"dir":"Reference","previous_headings":"","what":"Restructured BETOS Classification for HCPCS — betos","title":"Restructured BETOS Classification for HCPCS — betos","text":"betos() allows user group HCPCS codes clinically meaningful categories based original Berenson-Eggers Type Service (BETOS) classification.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restructured BETOS Classification for HCPCS — betos","text":"","code":"betos(   hcpcs = NULL,   rbcs = NULL,   category = NULL,   subcategory = NULL,   family = NULL,   procedure = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restructured BETOS Classification for HCPCS — betos","text":"hcpcs < character > HCPCS CPT code rbcs < character > RBCS ID category < character > RBCS Category Description, e.g. Anesthesia DME E&M Imaging Procedure Test Treatment subcategory < character > RBCS Subcategory Description family < character > RBCS Family Description procedure < character > Whether HCPCS code Major (\"M\"), (\"O\"), Non-Procedure code (\"N\"). tidy < boolean > // default: TRUE Tidy output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restructured BETOS Classification for HCPCS — betos","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"from-betos-to-rbcs","dir":"Reference","previous_headings":"","what":"From BETOS to RBCS","title":"Restructured BETOS Classification for HCPCS — betos","text":"Restructured BETOS Classification System (RBCS) taxonomy allows researchers group Medicare Part B healthcare service codes clinically meaningful categories subcategories. Based original Berenson-Eggers Type Service (BETOS) classification created 1980s, includes notable updates Part B non-physician services undergoes annual updates technical expert panel researchers clinicians. general framework grouping service codes new RBCS taxonomy largely follows structure BETOS. Like BETOS, RBCS groups HCPCS codes categories, subcategories, families – categories aggregate level families granular level. Medicare Part B service codes, including non-physician services, assigned 6-character RBCS taxonomy code.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Restructured BETOS Classification for HCPCS — betos","text":"Restructured BETOS Classification System RBCS Data Dictionary","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"update-frequency","dir":"Reference","previous_headings":"","what":"Update Frequency","title":"Restructured BETOS Classification for HCPCS — betos","text":"Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restructured BETOS Classification for HCPCS — betos","text":"","code":"if (FALSE) { # interactive() betos(hcpcs = \"0001U\") betos(category = \"Test\") betos(subcategory = \"General Laboratory\") betos(family = \"Immunoassay\") betos(procedure = \"M\") betos(family = \"No RBCS Family\") betos(rbcs = \"TL001N\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility Functions — calculations","title":"Utility Functions — calculations","text":"Common utility functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility Functions — calculations","text":"","code":"change(df, cols, csm = NULL, digits = 5)  chg(x, n = 1L, fill_na = 0L)  pct(x, n = 1L, fill_na = 0L)  ror(df, col, n = 1L)  geomean(x)  years_df(df, date_col)  years_vec(date_col)  duration_vec(date_col)  make_interval(df, start, end = lubridate::today())  summary_stats(   df,   condition = NULL,   group_vars = NULL,   summary_vars = NULL,   arr = NULL,   digits = 3 )  gen_data(years)"},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility Functions — calculations","text":"df data frame cols numeric columns calculate absolute/relative change & rate return csm numeric cols calculate cumulative sum digits Number digits round , default 3 x numeric vector n values offset fill_na fill value NAs; default 0 col numeric column date_col date column start start date column end end date column condition filter condition, .e. patient == \"new\" group_vars variables group , .e. c(specialty, state, hcpcs, cost) summary_vars variables summarise, .e. c(min, max, mode, range) arr column arrange data , .e. cost years sequence years, e.g. 2010:2020","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility Functions — calculations","text":"tibble() vector tibble","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility Functions — calculations","text":"","code":"# Example data ex <- gen_data(2020:2025) head(ex) #> # A tibble: 6 × 3 #>    year group   pay #>   <int> <chr> <int> #> 1  2020 A      1720 #> 2  2021 A      1997 #> 3  2022 A      1980 #> 4  2023 A      1598 #> 5  2024 A      1950 #> 6  2025 A      1976  # Lagged absolute/percentage change, rate of return and cumulative sum # `change()` dplyr::filter(ex, group == \"A\") |> change(pay) #> # A tibble: 6 × 6 #>    year group   pay pay_chg  pay_pct pay_ror #>   <int> <chr> <int>   <int>    <dbl>   <dbl> #> 1  2020 A      1720       0  0         1     #> 2  2021 A      1997     277  0.161     1.16  #> 3  2022 A      1980     -17 -0.00851   0.991 #> 4  2023 A      1598    -382 -0.193     0.807 #> 5  2024 A      1950     352  0.220     1.22  #> 6  2025 A      1976      26  0.0133    1.01   # `geomean()` # Geometric mean ex |> dplyr::filter(group == \"A\") |> ror(pay) |> dplyr::summarise(gmean = geomean(pay_ror)) #> # A tibble: 1 × 1 #>   gmean #>   <dbl> #> 1  1.03  # When performing a `group_by()`, watch for # the correct order of the variables ex |> dplyr::group_by(group) |> change(pay) #> # A tibble: 12 × 6 #> # Groups:   group [2] #>     year group   pay pay_chg  pay_pct pay_ror #>    <int> <chr> <int>   <int>    <dbl>   <dbl> #>  1  2020 A      1720       0  0         1     #>  2  2021 A      1997     277  0.161     1.16  #>  3  2022 A      1980     -17 -0.00851   0.991 #>  4  2023 A      1598    -382 -0.193     0.807 #>  5  2024 A      1950     352  0.220     1.22  #>  6  2025 A      1976      26  0.0133    1.01  #>  7  2020 B      1192       0  0         1     #>  8  2021 B      1687     495  0.415     1.42  #>  9  2022 B      1928     241  0.143     1.14  #> 10  2023 B      1578    -350 -0.182     0.818 #> 11  2024 B      1112    -466 -0.295     0.705 #> 12  2025 B      1144      32  0.0288    1.03   ex |> dplyr::group_by(group) |> change(pay) |> dplyr::summarise(mean_pay = mean(pay, na.rm = TRUE),                  csm_chg  = sum(pay_chg),                  csm_pct  = sum(pay_pct),                  mean_ror = mean(pay_ror, na.rm = TRUE),                  geomean  = geomean(pay_ror)) #> # A tibble: 2 × 6 #>   group mean_pay csm_chg csm_pct mean_ror geomean #>   <chr>    <dbl>   <int>   <dbl>    <dbl>   <dbl> #> 1 A        1870.     256   0.193     1.03   1.02  #> 2 B        1440.     -48   0.110     1.02   0.993  # Timespans dt <- dplyr::tibble(date = lubridate::today() - 366)  # `years_df()` years_df(dt, date) #> # A tibble: 1 × 2 #>   date       years_passed #>   <date>            <dbl> #> 1 2022-12-04            1  # `duration_vec()` dplyr::mutate(dt, dur = duration_vec(date)) #> # A tibble: 1 × 2 #>   date       dur                    #>   <date>     <Duration>             #> 1 2022-12-04 -31622400s (~-1 years)  # `make_interval()` dplyr::tibble(date = lubridate::today() - 1000) |> make_interval(start = date, end = lubridate::today() - 500) #> # A tibble: 1 × 4 #>   date       interval                       period             timelength_days #>   <date>     <Interval>                     <Period>                     <dbl> #> 1 2021-03-10 2021-03-10 UTC--2022-07-23 UTC 1y 4m 13d 0H 0M 0S             500   # `summary_stats()` sm <- dplyr::tibble(provider = sample(c(\"A\", \"B\", \"C\"), size = 200, replace = TRUE),                     city = sample(c(\"ATL\", \"NYC\"), size = 200, replace = TRUE),                     charges = sample(1000:2000, size = 200),                     payment = sample(1000:2000, size = 200))  head(sm) #> # A tibble: 6 × 4 #>   provider city  charges payment #>   <chr>    <chr>   <int>   <int> #> 1 B        NYC      1987    1464 #> 2 C        NYC      1151    1709 #> 3 B        ATL      1278    1360 #> 4 B        ATL      1933    1687 #> 5 C        ATL      1134    1073 #> 6 B        NYC      1246    1179  summary_stats(sm,               condition    = city == \"ATL\",               group_vars   = provider,               summary_vars = c(charges, payment),               arr          = provider) #> # A tibble: 3 × 8 #>   provider charges_median charges_mean charges_sd payment_median payment_mean #>   <chr>             <dbl>        <dbl>      <dbl>          <dbl>        <dbl> #> 1 C                 1376.        1438        282.          1504.        1543. #> 2 B                 1477         1497.       284.          1440.        1485. #> 3 A                 1636         1562.       290.          1311         1387. #> # ℹ 2 more variables: payment_sd <dbl>, n <int>  if (FALSE) { # interactive() dplyr::filter(ex, group == \"A\") |> change(pay) } if (FALSE) { # interactive() dplyr::filter(ex, group == \"A\") |> dplyr::mutate(change = chg(pay)) } if (FALSE) { # interactive() dplyr::filter(ex, group == \"A\") |> dplyr::mutate(pct_change = pct(pay)) } if (FALSE) { # interactive() dplyr::filter(ex, group == \"A\") |> ror(pay)  ex |> dplyr::group_by(group) |> ror(pay) } if (FALSE) { # interactive() dplyr::filter(ex, group == \"A\") |> ror(pay) |> dplyr::summarise(gmean = geomean(pay_ror))  ex |> dplyr::group_by(group) |> ror(pay) |> dplyr::summarise(gmean = geomean(pay_ror)) } if (FALSE) { # interactive() dt <- dplyr::tibble(date = lubridate::today() - 366) dplyr::mutate(dt, years = years_vec(date)) } if (FALSE) { # interactive() dplyr::tibble(date = lubridate::today() - 366,               date2 = date - 789) |> dplyr::mutate(dur = duration_vec(date),               dur2 = duration_vec(date2)) } if (FALSE) { # interactive() dt <- dplyr::tibble(date = lubridate::today() - 366) make_interval(dt, start = date) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinicians Enrolled in Medicare — clinicians","title":"Clinicians Enrolled in Medicare — clinicians","text":"clinicians() allows access information providers enrolled Medicare, including medical school attended year graduated Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinicians Enrolled in Medicare — clinicians","text":"","code":"clinicians(   npi = NULL,   pac = NULL,   enid = NULL,   first = NULL,   middle = NULL,   last = NULL,   gender = NULL,   credential = NULL,   school = NULL,   grad_year = NULL,   specialty = NULL,   facility_name = NULL,   pac_org = NULL,   city = NULL,   state = NULL,   zip = NULL,   offset = 0L,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clinicians Enrolled in Medicare — clinicians","text":"npi < integer > 10-digit Individual National Provider Identifier pac < integer > 10-digit Individual PECOS Associate Control ID enid < character > 15-digit Individual Medicare Enrollment ID first, middle, last < character > Individual provider's name gender < character > Individual provider's gender; \"F\" (Female) \"M\" (Male) credential Individual provider’s credential school < character > Individual provider’s medical school grad_year < integer > Individual provider’s graduation year specialty < character > Individual provider’s primary medical specialty reported selected enrollment facility_name < character > Name facility associated individual provider pac_org < integer > 10-digit Organizational PECOS Associate Control ID city < character > Provider's city state < character > Provider's state zip < character > Provider's ZIP code offset < integer > // default: 0L API pagination tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinicians Enrolled in Medicare — clinicians","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Clinicians Enrolled in Medicare — clinicians","text":"National Downloadable File Provider Data Catalog (PDC) Data Dictionary","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clinicians Enrolled in Medicare — clinicians","text":"","code":"if (FALSE) { # interactive() clinicians(enid = \"I20081002000549\") # enid not working clinicians(school = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Provider Performance — compare","title":"Compare Provider Performance — compare","text":"compare_hcpcs() allows user compare provider's yearly HCPCS utilization data state national averages compare_conditions() allows user compare average yearly prevalence chronic conditions among provider's patient mix state national averages","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Provider Performance — compare","text":"","code":"compare_hcpcs(df)  compare_conditions(df, pivot = FALSE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Provider Performance — compare","text":"df < tbl_df > // required tibble() returned utilization(type = \"Provider\") pivot < boolean > // default: FALSE Pivot output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Provider Performance — compare","text":"tibble containing: compare_hcpcs() compare_conditions()","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Provider Performance — compare","text":"","code":"if (FALSE) { # interactive()  compare_hcpcs(utilization(year = 2018,                           type = \"Service\",                           npi = 1023076643))  map_dfr(util_years(), ~utilization(year = .x,                                    npi = 1023076643,                                    type = \"Service\")) |> compare_hcpcs() } if (FALSE) { # interactive()  compare_conditions(utilization(year = 2018,                                type = \"Provider\",                                npi = 1023076643))  map_dfr(util_years(), ~utilization(year = .x,                                    npi = 1023076643,                                    type = \"Provider\")) |> compare_conditions() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Chronic Conditions Prevalence — conditions","title":"Chronic Conditions Prevalence — conditions","text":"conditions() allows user access data concerning chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chronic Conditions Prevalence — conditions","text":"","code":"conditions(   year,   condition = NULL,   sublevel = NULL,   set = c(\"Multiple\", \"Specific\"),   level = NULL,   fips = NULL,   age = NULL,   demo = NULL,   subdemo = NULL,   mcc = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chronic Conditions Prevalence — conditions","text":"year < integer > Calendar year Medicare enrollment, YYYY format. Run cc_years() return vector currently available years. condition < character > Chronic condition prevalence utilization compiled (see details list conditions) sublevel < character > Beneficiary's state county set < character > // required \"Multiple\" \"Specific\" level < character > Geographic level aggregation: \"National\", \"State\", \"County\" fips < character > Beneficiary's state county FIPS code age < character > Age level aggregation: \"\", \"<65\", \"65+\" demo, subdemo < character > Demographic/subdemographic level aggregation: mcc < character > Number chronic conditions: \"0-1\", \"2-3\", \"4-5\", \"6+\" tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chronic Conditions Prevalence — conditions","text":"tibble following columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"specific-conditions","dir":"Reference","previous_headings":"","what":"Specific Conditions","title":"Chronic Conditions Prevalence — conditions","text":"Specific Chronic Conditions(set = \"Specific\") dataset provides information prevalence, use spending organized geography 21 distinct chronic conditions: Alcohol Abuse Alzheimer's Disease/Dementia Arthritis Asthma Atrial Fibrillation Autism Spectrum Disorders Cancer Chronic Kidney Disease COPD Depression Diabetes Drug Abuse/Substance Abuse Heart Failure Hepatitis (Chronic Viral B & C) HIV/AIDS Hyperlipidemia Hypertension Ischemic Heart Disease Osteoporosis Schizophrenia Psychotic Disorders Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"multiple-conditions","dir":"Reference","previous_headings":"","what":"Multiple Conditions","title":"Chronic Conditions Prevalence — conditions","text":"Multiple Chronic Conditions(set = \"Multiple\") dataset provides information prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions binned four categories: 0-1 2-3 4-5 6 ","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"prevalence","dir":"Reference","previous_headings":"","what":"Prevalence","title":"Chronic Conditions Prevalence — conditions","text":"Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"hospital-readmission-rates","dir":"Reference","previous_headings":"","what":"Hospital Readmission Rates","title":"Chronic Conditions Prevalence — conditions","text":"Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, .","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"emergency-department-visits","dir":"Reference","previous_headings":"","what":"Emergency Department Visits","title":"Chronic Conditions Prevalence — conditions","text":"Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"payment-per-capita","dir":"Reference","previous_headings":"","what":"Payment Per Capita","title":"Chronic Conditions Prevalence — conditions","text":"Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Chronic Conditions Prevalence — conditions","text":"Medicare Multiple Chronic Conditions Medicare Specific Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chronic Conditions Prevalence — conditions","text":"","code":"if (FALSE) { # interactive() conditions(year = 2018,            set = \"Specific\",            sublevel = \"CA\",            demo = \"All\")  conditions(year = 2018,            set = \"Specific\",            sublevel = \"CA\",            subdemo = \"Female\",            age = \"All\")  conditions(year = 2018,            set = \"Multiple\",            sublevel = \"California\",            subdemo = \"Female\")  conditions(year = 2007,            set = \"Specific\",            level = \"National\",            demo = \"Race\",            condition = \"Alzheimer's Disease/Dementia\")  conditions(year = 2007,            set = \"Multiple\",            level = \"National\",            demo = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/df2chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data.frame cols to character — df2chr","title":"Convert data.frame cols to character — df2chr","text":"Convert data.frame cols character","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/df2chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data.frame cols to character — df2chr","text":"","code":"df2chr(df)"},{"path":"https://andrewallenbruce.github.io/provider/reference/df2chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data.frame cols to character — df2chr","text":"df data frame","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/display_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot data frame to long format for easy printing — display_long","title":"Pivot data frame to long format for easy printing — display_long","text":"Pivot data frame long format easy printing","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/display_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot data frame to long format for easy printing — display_long","text":"","code":"display_long(df, cols = dplyr::everything())"},{"path":"https://andrewallenbruce.github.io/provider/reference/display_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot data frame to long format for easy printing — display_long","text":"df data frame cols columns pivot long, default dplyr::everything()","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_check_xmark.html","id":null,"dir":"Reference","previous_headings":"","what":"check or x mark icon — gt_check_xmark","title":"check or x mark icon — gt_check_xmark","text":"check x mark icon","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_check_xmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check or x mark icon — gt_check_xmark","text":"","code":"gt_check_xmark(gt_tbl, cols)"},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_check_xmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check or x mark icon — gt_check_xmark","text":"gt_tbl gt_tbl object cols columns data frame","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_datadict.html","id":null,"dir":"Reference","previous_headings":"","what":"data dictionary theme — gt_datadict","title":"data dictionary theme — gt_datadict","text":"data dictionary theme","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_datadict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data dictionary theme — gt_datadict","text":"","code":"gt_datadict(df)"},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_datadict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data dictionary theme — gt_datadict","text":"df data frame","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_entype_badge.html","id":null,"dir":"Reference","previous_headings":"","what":"entity type badge — gt_entype_badge","title":"entity type badge — gt_entype_badge","text":"entity type badge","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_entype_badge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"entity type badge — gt_entype_badge","text":"","code":"gt_entype_badge(x)"},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_entype_badge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"entity type badge — gt_entype_badge","text":"x column","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_prov.html","id":null,"dir":"Reference","previous_headings":"","what":"gt theme — gt_prov","title":"gt theme — gt_prov","text":"gt theme","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_prov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gt theme — gt_prov","text":"","code":"gt_prov(   df,   divider = NULL,   title = NULL,   subtitle = NULL,   source = NULL,   checkmark = NULL,   qmark = NULL,   dollars = NULL,   pct = NULL,   pctchg = NULL,   clean = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_prov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gt theme — gt_prov","text":"df data frame divider description title description subtitle description source description checkmark description qmark description dollars description pct description pctchg description","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_qmark.html","id":null,"dir":"Reference","previous_headings":"","what":"check, x, question mark — gt_qmark","title":"check, x, question mark — gt_qmark","text":"check, x, question mark","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_qmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check, x, question mark — gt_qmark","text":"","code":"gt_qmark(gt_tbl, cols)"},{"path":"https://andrewallenbruce.github.io/provider/reference/gt_qmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check, x, question mark — gt_qmark","text":"gt_tbl gt_tbl object cols columns data frame","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":null,"dir":"Reference","previous_headings":"","what":"Hospitals Enrolled in Medicare — hospitals","title":"Hospitals Enrolled in Medicare — hospitals","text":"hospitals() allows user search information hospitals currently enrolled Medicare. Data returned includes hospital's sub-group types, legal business name, -business-name, organization type address. Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hospitals Enrolled in Medicare — hospitals","text":"","code":"hospitals(   npi = NULL,   facility_ccn = NULL,   enid_org = NULL,   enid_state = NULL,   pac_org = NULL,   specialty_code = NULL,   organization = NULL,   dba = NULL,   city = NULL,   state = NULL,   zip = NULL,   registration = NULL,   multi_npi = NULL,   reh = NULL,   subgroup = list(),   tidy = TRUE,   pivot = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hospitals Enrolled in Medicare — hospitals","text":"npi < integer > 10-digit Organizational National Provider Identifier facility_ccn < integer > 6-digit CMS Certification Number enid_org < character > 15-digit Organizational Medicare Enrollment ID enid_state < character > Hospital’s enrollment state pac_org < integer > 10-digit Organizational PECOS Associate Control ID specialty_code < character > Medicare Part Provider specialty code: \"00-00\": Religious Non-Medical Healthcare Institution (RNHCI) \"00-01\": Community Mental Health Center \"00-02\": Comprehensive Outpatient Rehabilitation Facility (CORF) \"00-03\": End-Stage Renal Disease Facility (ESRD) \"00-04\": Federally Qualified Health Center (FQHC) \"00-05\": Histocompatibility Laboratory \"00-06\": Home Health Agency (HHA) \"00-08\": Hospice \"00-09\": Hospital \"00-10\": Indian Health Services Facility \"00-13\": Organ Procurement Organization (OPO) \"00-14\": Outpatient PT/Occupational Therapy/Speech Pathology \"00-17\": Rural Health Clinic (RHC) \"00-18\": Skilled Nursing Facility (SNF) \"00-19\": \"00-24\": Rural Emergency Hospital (REH) \"00-85\": Critical Access Hospital (CAH) organization < character > Hospital’s legal business name dba < character > Hospital’s -business-name city < character > City hospital’s practice location state < character > State hospital’s practice location zip < integer > Zip code hospital’s practice location registration < character > Hospital's IRS designation: \"P\": Registered Proprietor \"N\": Registered Non-Profit multi_npi < boolean > Indicates hospital one NPI reh < boolean > Indicates former Hospital Critical Access Hospital (CAH) converted Rural Emergency Hospital (REH) subgroup < list > subgroup = list(acute = TRUE, swing = FALSE) Indicates hospital’s subgroup/unit designation: acute: Acute Care alc_drug: Alcohol/Drug child: Children's Hospital gen: General long: Long-Term short: Short-Term psych: Psychiatric rehab: Rehabilitation swing: Swing-Bed Approved psych_unit: Psychiatric Unit rehab_unit: Rehabilitation Unit spec: Specialty Hospital : listed CMS form tidy < boolean > // default: TRUE Tidy output pivot < boolean > // default: TRUE Pivot output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hospitals Enrolled in Medicare — hospitals","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Hospitals Enrolled in Medicare — hospitals","text":"Hospital Enrollments","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hospitals Enrolled in Medicare — hospitals","text":"","code":"if (FALSE) { # interactive() hospitals(pac_org = 6103733050)  hospitals(state = \"GA\", reh = TRUE)  hospitals(city = \"Savannah\", state = \"GA\") |>           dplyr::select(organization, subgroup)  hospitals(city = \"Savannah\", state = \"GA\",           subgroup = list(acute = FALSE)) |>           dplyr::select(organization, subgroup)  hospitals(city = \"Savannah\", state = \"GA\",           subgroup = list(gen = TRUE,           rehab = FALSE)) |>           dplyr::select(organization, subgroup) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Laboratories — laboratories","title":"Clinical Laboratories — laboratories","text":"laboratories() allows search information clinical laboratories including demographics type testing services facility provides.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Laboratories — laboratories","text":"","code":"laboratories(   name = NULL,   clia = NULL,   certificate = NULL,   city = NULL,   state = NULL,   zip = NULL,   active = FALSE,   tidy = TRUE,   na.rm = TRUE,   pivot = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clinical Laboratories — laboratories","text":"name < character > Provider clinical laboratory's name clia < character > 10-character CLIA number certificate < character > CLIA certificate type: \"waiver\" \"ppm\" \"registration\" \"compliance\" \"accreditation\" city < character > City state < character > State zip < character > Zip code active < boolean > // default: FALSE Return active providers tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns pivot < boolean > // default: TRUE Pivot output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinical Laboratories — laboratories","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"clinical-laboratory-improvement-amendments-clia-","dir":"Reference","previous_headings":"","what":"Clinical Laboratory Improvement Amendments (CLIA)","title":"Clinical Laboratories — laboratories","text":"CMS regulates laboratory testing (except research) performed humans U.S. Clinical Laboratory Improvement Amendments (CLIA). total, CLIA covers approximately 320,000 laboratory entities. Division Clinical Laboratory Improvement & Quality, within Quality, Safety & Oversight Group, Center Clinical Standards Quality (CCSQ) responsibility implementing CLIA Program. Although clinical laboratories must properly certified receive Medicare Medicaid payments, CLIA direct Medicare Medicaid program responsibilities.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"clia-certificates","dir":"Reference","previous_headings":"","what":"CLIA Certificates","title":"Clinical Laboratories — laboratories","text":"five CLIA certificate types effective period two years. follows, order increasing complexity: Certificate Waiver: Issued laboratory perform waived tests; waive lab CLIA requirements. Waived tests laboratory tests simple perform. Routine inspections conducted waiver labs, although 2% visited year ensure quality laboratory testing. Certificate Provider-Performed Microscopy Procedures (PPM): Issued laboratory physician, midlevel practitioner dentist performs limited tests require microscopic examination. PPM tests considered moderate complexity. Waived tests can also performed certificate type. routine inspections conducted PPM labs. Certificate Registration: Initially issued laboratory applied Certificate Compliance Accreditation, enabling lab conduct moderate/high complexity testing survey performed laboratory found CLIA compliance. Includes PPM waived testing. Certificate Compliance: Allows laboratory conduct moderate/high complexity testing issued inspection finds lab compliance applicable CLIA requirements. Includes PPM waived testing. Certificate Accreditation: Exactly Certificate Compliance, except laboratory must accredited one following CMS-approved accreditation organizations: American Association Laboratory Accreditation (A2LA) Association Advancement Blood & Biotherapies (AABB) American Osteopathic Association (AOA) American Society Histocompatibility Immunogenetics (ASHI) College American Pathologists (CAP) Commission Office Laboratory Accreditation (COLA) Joint Commission (JCAHO) Links: Provider Services File - Clinical Laboratories Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clinical Laboratories — laboratories","text":"","code":"if (FALSE) { # interactive() laboratories(clia = \"11D0265516\") laboratories(certificate = \"ppm\", city = \"Valdosta\", state = \"GA\", active = TRUE) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/medline.html","id":null,"dir":"Reference","previous_headings":"","what":"Medline Plus API — medline","title":"Medline Plus API — medline","text":"Medline Plus API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/medline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Medline Plus API — medline","text":"","code":"medline(ndc)"},{"path":"https://andrewallenbruce.github.io/provider/reference/medline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Medline Plus API — medline","text":"ndc < character > // required 10- 11-digit National Drug Code","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/medline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Medline Plus API — medline","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/ndc_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"National Drug Code (NDC) Lookup — ndc_lookup","text":"","code":"ndc_lookup(ndc, ...)"},{"path":"https://andrewallenbruce.github.io/provider/reference/ndc_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"National Drug Code (NDC) Lookup — ndc_lookup","text":"ndc < character > // required 10- 11-digit National Drug Code ... future use.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/ndc_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"National Drug Code (NDC) Lookup — ndc_lookup","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/ndc_lookup.html","id":"ndc","dir":"Reference","previous_headings":"","what":"NDC","title":"National Drug Code (NDC) Lookup — ndc_lookup","text":"National Drug Code (NDC) unique 10- 11-digit, 3-segment numeric identifier assigned medication listed Section 510 US Federal Food, Drug, Cosmetic Act.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/ndc_lookup.html","id":"rxcui","dir":"Reference","previous_headings":"","what":"RxCUI","title":"National Drug Code (NDC) Lookup — ndc_lookup","text":"RxCUI machine-readable code identifier points common meaning shared various source names grouped assigned particular concept. RxNorm provides normalized names clinical drugs links names many drug vocabularies commonly used pharmacy management drug interaction software, including First Databank, Micromedex, Multum, Gold Standard Drug Database. providing links vocabularies, RxNorm can mediate messages systems using software vocabulary.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/ndc_lookup.html","id":"atc","dir":"Reference","previous_headings":"","what":"ATC","title":"National Drug Code (NDC) Lookup — ndc_lookup","text":"ATC classifies drugs five different levels. level different grouping drugs. Groupings active substances include organ system drug acts well therapeutic, pharmacological, chemical properties drug. Anatomical Therapeutic Chemical (ATC) classification developed modification extension EphMRA classification system. ATC classification system, active substances classified hierarchy five different levels. system fourteen main anatomical/pharmacological groups 1st Levels. ATC main group divided 2nd Levels either pharmacological therapeutic groups. 3rd 4th Levels chemical, pharmacological therapeutic subgroups 5th Level chemical substance. 2nd, 3rd 4th levels often used identify pharmacological subgroups considered appropriate therapeutic chemical subgroups.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/ndc_lookup.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"National Drug Code (NDC) Lookup — ndc_lookup","text":"ATCs RxNorm","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/ndc_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"National Drug Code (NDC) Lookup — ndc_lookup","text":"","code":"if (FALSE) { # interactive() ndc_lookup(\"0002-1433-80\")  medline(\"0002-1433-80\")  rxnorm(\"0002-1433-80\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":null,"dir":"Reference","previous_headings":"","what":"National Registry of Health Care Providers — nppes","title":"National Registry of Health Care Providers — nppes","text":"nppes() allows user search National Plan Provider Enumeration System (NPPES) NPI Registry, free directory active NPI records.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"National Registry of Health Care Providers — nppes","text":"","code":"nppes(   npi = NULL,   entype = NULL,   first = NULL,   last = NULL,   organization = NULL,   name_type = NULL,   taxonomy_desc = NULL,   city = NULL,   state = NULL,   zip = NULL,   country = NULL,   limit = 1200L,   skip = 0L,   unnest = TRUE,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"National Registry of Health Care Providers — nppes","text":"npi < integer | character > 10-digit Organizational National Provider Identifier entype < character > Entity/enumeration type criteria entered. \"\": Individual provider (NPI-1) \"O\": Organizational provider (NPI-2) first, last < character > // WC Individual provider's name organization < character > // WC Organization's name. Many types names (LBN, DBA, Former LBN, Name) may match. , results might contain name different one entered. name_type < character > Type individual name arguments refer : \"AO\": search Authorized Officials \"Provider\": search Individual Providers taxonomy_desc < character > Provider's taxonomy description, e.g. \"Pharmacist\", \"Pediatrics\" city < character > Provider's city. search military address, enter either \"APO\" \"FPO\". state < character > Provider's state abbreviation. input, one param besides entype country must input. zip < character > // WC Provider's zip code country < character > Provider's country code. Can used input, long input \"US\". limit < integer > // default: 1200L Max results return skip < integer > // default: 0L Number results skip returned unnest < boolean > // default: TRUE Unnest list columns tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"National Registry of Health Care Providers — nppes","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"national-provider-identifier-npi-","dir":"Reference","previous_headings":"","what":"National Provider Identifier (NPI)","title":"National Registry of Health Care Providers — nppes","text":"Healthcare providers acquire unique 10-digit NPIs identify standard way throughout industry. CMS supplies NPI, publish parts NPI record public relevance, including provider’s name, taxonomy practice address.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"entity-enumeration-type","dir":"Reference","previous_headings":"","what":"Entity/Enumeration Type","title":"National Registry of Health Care Providers — nppes","text":"Two categories health care providers exist NPI enumeration purposes: Type 1: Individual providers may get NPI Entity Type 1. Sole Proprietorship sole proprietor one conduct business corporation , thus, incorporated individual. incorporated individual individual provider forms conducts business corporation. provider may Type 1 NPI corporation Type 2 NPI. solo practitioner necessarily sole proprietor, vice versa. following factors affect whether sole proprietor Type 1 entity: Multiple office locations employees EIN Type 2: Organizational providers eligible Entity Type 2 NPIs. Organizational Group providers may single employee thousands employees. example incorporated individual organization's employee. organization health care providers made parts work somewhat independently parent organization. parts may offer different types health care offer health care separate physical locations. parts physical locations legal entities part organization health care provider (legal entity). NPI Final Rule refers parts locations sub-parts. organization health care provider can get sub-parts NPIs. sub-part conducts HIPAA standard transactions (separately parent), must get NPI. Sub-part determination makes sure entities within covered organization uniquely identified HIPAA standard transactions conduct Medicare covered entities. example, hospital offers acute care, laboratory, pharmacy, rehabilitation services. sub-parts may need NPI sends standard transactions one health plans. Sub-part delegation affect Entity Type 1 health care providers. individuals, health care providers choose sub-parts sub-parts. Authorized Official  appointed official (e.g., chief executive officer, chief financial officer, general partner, chairman board, direct owner) organization granted legal authority enroll Medicare program, make changes updates organization's status Medicare program, commit organization fully abide statutes, regulations, program instructions Medicare program.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"National Registry of Health Care Providers — nppes","text":"NPPES NPI Registry API Documentation NPPES NPI Registry API Demo NPPES Available Countries","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"trailing-wildcard-entries","dir":"Reference","previous_headings":"","what":"Trailing Wildcard Entries","title":"National Registry of Health Care Providers — nppes","text":"Arguments allow trailing wildcard entries denoted parameter description WC. Wildcard entries require least two characters entered, e.g. \"jo*\"","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"update-frequency","dir":"Reference","previous_headings":"","what":"Update Frequency","title":"National Registry of Health Care Providers — nppes","text":"Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"National Registry of Health Care Providers — nppes","text":"","code":"if (FALSE) { # interactive() nppes(npi = 1528060837)  nppes(city = \"CARROLLTON\", state = \"GA\", zip = 301173889, entype = \"I\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":null,"dir":"Reference","previous_headings":"","what":"Relationships with Drug & Medical Device Companies — open_payments","title":"Relationships with Drug & Medical Device Companies — open_payments","text":"open_payments() allows user access CMS' Open Payments Program API Open Payments program national disclosure program collects publishes information financial relationships drug medical device companies (referred \"reporting entities\") certain health care providers (referred \"covered recipients\"). relationships may involve payments providers things including limited research, meals, travel, gifts speaking fees.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationships with Drug & Medical Device Companies — open_payments","text":"","code":"open_payments(   year,   npi = NULL,   covered_type = NULL,   first = NULL,   last = NULL,   city = NULL,   state = NULL,   zip = NULL,   teaching_hospital = NULL,   payer = NULL,   payer_id = NULL,   pay_form = NULL,   pay_nature = NULL,   offset = 0L,   tidy = TRUE,   pivot = TRUE,   add.ndc = TRUE,   na.rm = FALSE,   ... )  open_payments_(year = open_years(), ...)"},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relationships with Drug & Medical Device Companies — open_payments","text":"year < integer > // required Year data reported, YYYY format. Run open_years() return vector years currently available. npi < integer > Covered recipient's 10-digit National Provider Identifier covered_type < character > Type covered recipient, e.g.: \"Physician\" \"Non-Physician Practitioner\" \"Teaching Hospital\" first, last < character > Covered recipient's name city < character > Covered recipient's city state < character > Covered recipient's state abbreviation zip < character > Covered recipient's zip code teaching_hospital < character > Name teaching hospital, e.g.: \"Vanderbilt University Medical Center\" payer < character > Paying entity's name, e.g.: \"Pharmacosmos Therapeutics Inc.\" \"Getinge USA Sales, LLC\" \"Agiliti Health, Inc.\" \"OrthoScan, Inc.\" payer_id < integer > Paying entity's unique 10-digit Open Payments ID pay_form < character > Form payment, e.g.: \"Stock option\" \"Cash cash equivalent\" \"-kind items services\" pay_nature < character > Nature payment transfer value, e.g.: \"Royalty License\" \"Charitable Contribution\" \"Current prospective ownership investment interest\" \"Food Beverage\" offset < integer > // default: 0L API pagination tidy < boolean > // default: TRUE Tidy output pivot < boolean > // default: TRUE Pivot output add.ndc < boolean > // default: TRUE Add output ndc_lookup() na.rm < boolean > // default: FALSE Remove empty rows columns ... Pass arguments open_payments().","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relationships with Drug & Medical Device Companies — open_payments","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"terminology","dir":"Reference","previous_headings":"","what":"Terminology","title":"Relationships with Drug & Medical Device Companies — open_payments","text":"Reporting Entities: Applicable manufacturers GPOs. Applicable Group Purchasing Organizations (GPOs) entities operate United States purchase, arrange negotiate purchase covered drugs, devices, biologicals, medical supplies group individuals entities, solely use entity . Applicable Manufacturers entities operate United States (1) engaged production, preparation, propagation, compounding, conversion covered drug, device, biological, medical supply, covered drug, device, biological medical supply solely use within entity entity's patients (definition include distributors wholesalers (including, limited , re-packagers, re-labelers, kit assemblers) hold title covered drug, device, biological medical supply); (2) entities common ownership entity described part (1) definition, provides assistance support entities respect production, preparation, propagation, compounding, conversion, marketing, promotion, sale, distribution covered drug, device, biological medical supply. Covered Recipients physician, physician assistant, nurse practitioner, clinical nurse specialist, certified registered nurse anesthetist, certified nurse-midwife bona fide employee applicable manufacturer reporting payment; teaching hospital, institution received payment. Teaching Hospitals hospitals receive payment Medicare direct graduate medical education (GME), IPPS indirect medical education (IME), psychiatric hospital IME programs. Natures Payment categories must used describe payment transfer value made. applicable “general” payment type, research ownership. categories : Acquisitions (2021 - current) Charitable contributions: Compensation services consulting Compensation serving faculty speaker /: Accredited/certified continuing education program (2013 - 2020) Unaccredited/non-certified continuing education program (2013 - 2020) Medical education program (2021 - current) Consulting fees Current prospective ownership investment interest (prior 2023) Debt Forgiveness (2021 - current) Education Entertainment Food beverage Gift Grant Honoraria Long-term medical supply device loan (2021 - current) Royalty license Space rental facility fees (Teaching Hospitals ) Travel lodging Transfers Value anything value given applicable manufacturer applicable GPO covered recipient physician owner/investor fall within one excluded categories rule. Ownership Investment Interests include, limited : Stock Stock option(s) (received compensation, exercised) Partnership share(s) Limited liability company membership(s) Loans Bonds Financial instruments secured entity’s property revenue may direct indirect debt, equity means.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Relationships with Drug & Medical Device Companies — open_payments","text":"Open Payments Program? Open Payments: General Resources","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"update-frequency","dir":"Reference","previous_headings":"","what":"Update Frequency","title":"Relationships with Drug & Medical Device Companies — open_payments","text":"Yearly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relationships with Drug & Medical Device Companies — open_payments","text":"","code":"if (FALSE) { # interactive() open_payments(year = 2021, npi = 1043218118) open_payments(year = 2021, pay_nature = \"Royalty or License\") open_payments(year = 2021, pay_form = \"Stock option\") open_payments(year = 2021, payer = \"Adaptive Biotechnologies Corporation\") open_payments(year = 2021, teaching_hospital = \"Nyu Langone Hospitals\")  # Use the years helper function to retrieve results for all available years: open_years() |> map(\\(x) open_payments(year = x, npi = 1043477615)) |> list_rbind()  # Or simply use the parallelized version open_payments_(npi = 1043218118) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Providers Opted Out of Medicare — opt_out","title":"Providers Opted Out of Medicare — opt_out","text":"opt_out() allows user access information providers decided participate Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Providers Opted Out of Medicare — opt_out","text":"","code":"opt_out(   npi = NULL,   first = NULL,   last = NULL,   specialty = NULL,   address = NULL,   city = NULL,   state = NULL,   zip = NULL,   order_refer = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Providers Opted Out of Medicare — opt_out","text":"npi < integer > 10-digit Opt-National Provider Identifier first, last < character > Opt-provider's name specialty < character > Opt-provider's specialty address < character > Opt-provider's address city < character > Opt-provider's city state < character > Opt-provider's state abbreviation zip < character > Opt-provider's zip code order_refer < boolean > Indicates order refer eligibility tidy < boolean > // default: TRUE Tidy output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Providers Opted Out of Medicare — opt_out","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"opting-out","dir":"Reference","previous_headings":"","what":"Opting Out","title":"Providers Opted Out of Medicare — opt_out","text":"Providers wish enroll Medicare program may “opt-”, meaning neither beneficiary can bill Medicare services rendered. Instead, private contract provider beneficiary signed, neither party reimbursed Medicare beneficiary pays provider --pocket. opt , provider must: eligible specialty type Submit opt-affidavit Medicare Enter private contract Medicare patients, reflecting agreement pay --pocket one submit bill Medicare reimbursement","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"opt-out-periods","dir":"Reference","previous_headings":"","what":"Opt-Out Periods","title":"Providers Opted Out of Medicare — opt_out","text":"Opt-periods last two years terminated early unless provider opting first time terminates opt-later 90 days opt-period's effective date. Opt-statuses also effective two years automatically renew. Providers want extend opt-status end opt-period may cancel notifying MACs affidavit filed least 30 days prior start next opt-period. provider retires, surrenders license, longer wants participate Medicare program, must officially withdraw within 90 days. DMEPOS suppliers must withdraw within 30 days. Providers may opt-intend Medicare Advantage (Part C) provider furnish services covered traditional Medicare fee--service (Part B). Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Providers Opted Out of Medicare — opt_out","text":"Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Providers Opted Out of Medicare — opt_out","text":"","code":"if (FALSE) { # interactive() opt_out(npi = 1043522824)  # For opt-out providers eligible # to order and refer, use [order_refer()] # to look up their eligibility status:  opt_out(npi = 1043522824) |>         pull(npi) |>         map(\\(x) order_refer(npi = x)) |>         list_rbind() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":null,"dir":"Reference","previous_headings":"","what":"Order and Referral Eligibility — order_refer","title":"Order and Referral Eligibility — order_refer","text":"order_refer() returns provider's eligibility order refer within Medicare : Part B: Clinical Laboratory Services, Imaging Services DME: Durable Medical Equipment, Prosthetics, Orthotics, & Supplies (DMEPOS) Part : Home Health Services eligible, provider must: Individual NPI enrolled Medicare either Approved Opt-status Eligible Specialty type Ordering Providers can order non-physician services patients. Referring (Certifying) Providers can request items services Medicare may reimburse behalf beneficiaries. Opt-Providers: Providers opted Medicare may still order refer. can also enroll solely order refer.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order and Referral Eligibility — order_refer","text":"","code":"order_refer(   npi = NULL,   first = NULL,   last = NULL,   partb = NULL,   dme = NULL,   hha = NULL,   pmd = NULL,   tidy = TRUE,   pivot = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order and Referral Eligibility — order_refer","text":"npi < integer > 10-digit national provider identifier first, last < character > Individual provider's first/last name partb, dme, hha, pmd < boolean > Whether provider eligible order refer : partb: Medicare Part B dme: Durable Medical Equipment hha: Home Health Agency pmd: Power Mobility Devices tidy < boolean > // default: TRUE Tidy output pivot < boolean > // default: TRUE Pivot output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order and Referral Eligibility — order_refer","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Order and Referral Eligibility — order_refer","text":"links: Medicare Order Referring API CMS.gov: Ordering & Certifying Order Referring Methodology Update Frequency: Twice Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order and Referral Eligibility — order_refer","text":"","code":"if (FALSE) { # interactive() order_refer(npi = 1003026055)  # Filter for certain privileges order_refer(last = \"Smith\", partb = FALSE, hha = TRUE) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/outpatient.html","id":null,"dir":"Reference","previous_headings":"","what":"Outpatient Hospitals Enrolled in Medicare — outpatient","title":"Outpatient Hospitals Enrolled in Medicare — outpatient","text":"Outpatient Hospitals Enrolled Medicare","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/outpatient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outpatient Hospitals Enrolled in Medicare — outpatient","text":"","code":"outpatient(   year,   ccn = NULL,   organization = NULL,   street = NULL,   city = NULL,   state = NULL,   fips = NULL,   zip = NULL,   ruca = NULL,   apc = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/outpatient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outpatient Hospitals Enrolled in Medicare — outpatient","text":"year < integer > // required Year data reported, YYYY format. Run out_years() return vector years currently available. ccn < integer > 6-digit CMS Certification Number organization < character > Organization's name street < character > Street provider located city < character > City provider located state < character > State provider located fips < character > Provider's state FIPS code zip < character > Provider’s zip code ruca < character > Provider’s RUCA code apc < character > comprehensive ambulatory payment classification code tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/outpatient.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Outpatient Hospitals Enrolled in Medicare — outpatient","text":"State/FIP values restricted 49 United States District Columbia hospitals subjected Medicare's Outpatient Prospective Payment System (OPPS). Maryland US territory hospitals excluded.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/outpatient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Outpatient Hospitals Enrolled in Medicare — outpatient","text":"","code":"if (FALSE) { # interactive() outpatient(year = 2021, ccn = \"110122\")  outpatient(year = 2021, state = \"GA\")  out_years() |> map(\\(x) outpatient(year = x,                     ccn = \"110122\")) |>                     list_rbind() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":null,"dir":"Reference","previous_headings":"","what":"Pending Medicare Enrollment Applications — pending","title":"Pending Medicare Enrollment Applications — pending","text":"pending() allows user search providers pending Medicare enrollment applications.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pending Medicare Enrollment Applications — pending","text":"","code":"pending(type = \"P\", npi = NULL, first = NULL, last = NULL, tidy = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pending Medicare Enrollment Applications — pending","text":"type < character > // default: \"P\" Physician (P) Non-physician (N) npi < integer > 10-digit National Provider Identifier first, last < character > Provider's name tidy < boolean > // default: TRUE Tidy output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pending Medicare Enrollment Applications — pending","text":"tibble() columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"update-frequency","dir":"Reference","previous_headings":"","what":"Update Frequency","title":"Pending Medicare Enrollment Applications — pending","text":"QUARTERLY","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pending Medicare Enrollment Applications — pending","text":"Medicare Pending Initial Logging Tracking Physicians API Medicare Pending Initial Logging Tracking Non-Physicians API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pending Medicare Enrollment Applications — pending","text":"","code":"if (FALSE) { # interactive()  pending(type = \"P\", first = \"John\")  pending(type = \"N\", last = \"Smith\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/prescribers.html","id":null,"dir":"Reference","previous_headings":"","what":"Prescriber Utilization & Demographics by Year — prescribers","title":"Prescriber Utilization & Demographics by Year — prescribers","text":"prescribers() allows access information prescription drugs provided Medicare beneficiaries enrolled Part D (Prescription Drug Coverage), physicians health care providers; aggregated provider, drug geography. Medicare Part D Prescribers Datasets contain information prescription drug events (PDEs) incurred Medicare beneficiaries Part D prescription drug plan. Part D Prescribers Datasets organized National Provider Identifier (NPI) drug name contains information drug utilization (claim counts day supply) total drug costs.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/prescribers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prescriber Utilization & Demographics by Year — prescribers","text":"","code":"prescribers(   year,   type,   npi = NULL,   first = NULL,   last = NULL,   organization = NULL,   credential = NULL,   gender = NULL,   entype = NULL,   city = NULL,   state = NULL,   zip = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   brand_name = NULL,   generic_name = NULL,   level = NULL,   opioid = NULL,   opioidLA = NULL,   antibiotic = NULL,   antipsychotic = NULL,   tidy = TRUE,   nest = TRUE,   na.rm = TRUE,   ... )  prescribers_(year = rx_years(), ...)"},{"path":"https://andrewallenbruce.github.io/provider/reference/prescribers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prescriber Utilization & Demographics by Year — prescribers","text":"year < integer > // required Year data reported, YYYY format. Run rx_years() return vector years currently available. type < character > // required dataset query, \"Provider\", \"Drug\", \"Geography\" npi < integer > 10-digit national provider identifier first, last, organization < character > Individual/Organizational prescriber's name credential < character > Individual prescriber's credentials gender < character > Individual prescriber's gender; \"F\" (Female), \"M\" (Male) entype < character > Prescriber entity type; \"\" (Individual), \"O\" (Organization) city < character > City prescriber located state < character > State prescriber located zip < character > Prescriber’s zip code fips < character > Prescriber's state's FIPS code ruca < character > Prescriber’s RUCA code country < character > Country prescriber located specialty < character > Prescriber specialty code reported largest number claims submitted brand_name < character > Brand name (trademarked name) drug filled, derived linking National Drug Codes (NDCs) PDEs drug information database. generic_name < character > USAN generic name drug filled (short version); term referring chemical ingredient drug rather trademarked brand name drug sold, derived linking National Drug Codes (NDCs) PDEs drug information database. level < character > Geographic level data aggregated: \"State\": Data aggregated state \"National\": Data aggregated across states given HCPCS Code opioid < boolean > type = 'Geography', TRUE returns Opioid drugs opioidLA < boolean > type = 'Geography', TRUE returns Long-acting Opioids antibiotic < boolean > type = 'Geography', TRUE returns antibiotics antipsychotic < boolean > type = 'Geography', TRUE returns antipsychotics tidy < boolean > // default: TRUE Tidy output nest < boolean > // default: TRUE Nest output na.rm < boolean > // default: TRUE Remove empty rows columns ... Pass arguments prescribers().","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/prescribers.html","id":"by-provider","dir":"Reference","previous_headings":"","what":"By Provider","title":"Prescriber Utilization & Demographics by Year — prescribers","text":"type =\"Provider\": Medicare Part D Prescribers Provider dataset summarizes prescriber total number prescriptions dispensed, include original prescriptions refills, total drug cost.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/prescribers.html","id":"by-provider-and-drug","dir":"Reference","previous_headings":"","what":"By Provider and Drug","title":"Prescriber Utilization & Demographics by Year — prescribers","text":"type =\"Drug\": Medicare Part D Prescribers Provider Drug dataset contains total number prescription fills dispensed total drug cost paid organized prescribing National Provider Identifier (NPI), drug brand name (applicable) drug generic name.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/prescribers.html","id":"by-geography-and-drug","dir":"Reference","previous_headings":"","what":"By Geography and Drug","title":"Prescriber Utilization & Demographics by Year — prescribers","text":"type =\"Geography\": drug, Geography Drug dataset includes total number prescriptions dispensed, include original prescriptions refills, total drug cost. total drug cost includes ingredient cost medication, dispensing fees, sales tax, applicable administration fees based amount paid Part D plan, Medicare beneficiary, government subsidies, third-party payers.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/prescribers.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Prescriber Utilization & Demographics by Year — prescribers","text":"Medicare Part D Prescribers: Provider Medicare Part D Prescribers: Provider Drug Medicare Part D Prescribers: Geography Drug Medicare Part D Prescribers Technical Specifications Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/prescribers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prescriber Utilization & Demographics by Year — prescribers","text":"","code":"if (FALSE) { # interactive() prescribers(year = 2020,             type = 'Provider',             npi = 1003000423)  prescribers(year = 2019,             type = 'Drug',             npi = 1003000126)  prescribers(year = 2021,             type = 'Geography',             brand_name = 'Clotrimazole-Betamethasone')  prescribers(year = 2017,             type = 'Geography',             level = 'National',             brand_name = 'Paroxetine Hcl')  prescribers(year = 2017,             type = 'Geography',             opioid = TRUE)  # Use the years helper function to # retrieve results for every year: rx_years() |> map(\\(x) prescribers(year = x,                      type = 'Provider',                      npi = 1043477615)) |> list_rbind()  # Parallelized version prescribers_(type = 'Provider',              npi = 1043477615)  prescribers_(type = 'Drug',              npi = 1003000423)  prescribers_(type = 'Geography',              level = 'National',              generic_name = 'Mirabegron') }"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider-package.html","id":null,"dir":"Reference","previous_headings":"","what":"provider: Access Public Healthcare Provider Data — provider-package","title":"provider: Access Public Healthcare Provider Data — provider-package","text":"Provides various features facilitate easy access publicly available healthcare provider data. Includes functions tidy data accessed, whether reporting purposes updating internal records.","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/provider-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"provider: Access Public Healthcare Provider Data — provider-package","text":"Maintainer: Andrew Bruce andrewbruce.himni@gmail.com [copyright holder]","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":null,"dir":"Reference","previous_headings":"","what":"Provider Enrollment in Medicare — providers","title":"Provider Enrollment in Medicare — providers","text":"providers() allows access enrollment level data individual organizational providers actively approved bill Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provider Enrollment in Medicare — providers","text":"","code":"providers(   npi = NULL,   pac = NULL,   enid = NULL,   specialty_code = NULL,   specialty_description = NULL,   first = NULL,   middle = NULL,   last = NULL,   organization = NULL,   state = NULL,   gender = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provider Enrollment in Medicare — providers","text":"npi < integer > 10-digit Individual National Provider Identifier pac < integer > 10-digit PECOS Associate Control ID enid < character > 15-digit Medicare Enrollment ID specialty_code < character > Enrollment specialty code specialty_description < character > Enrollment specialty description first, middle, last < character > Individual provider's name organization < character > Organizational provider's name state < character > Enrollment state, full abbreviation gender < character > Individual provider's gender: \"F\" (Female), \"M\" (Male), \"9\" (Unknown/Organization) tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provider Enrollment in Medicare — providers","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Provider Enrollment in Medicare — providers","text":"Provider Enrollment API Provider Enrollment Data Dictionary Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provider Enrollment in Medicare — providers","text":"","code":"if (FALSE) { # interactive() providers(enid = \"I20040309000221\") providers(npi = 1417918293, specialty_code = \"14-41\") providers(pac = 2860305554, gender = \"9\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Payment Program Eligibility — quality_eligibility","title":"Quality Payment Program Eligibility — quality_eligibility","text":"quality_eligibility() allows user access information eligibility Merit-based Incentive Payment System (MIPS) Advanced Alternative Payment Models (APMs) tracks. Data pulled across CMS used create eligibility determination clinician. Using CMS knows clinician billing patterns enrollments, eligibility \"calculated\" multiple times performance year.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Payment Program Eligibility — quality_eligibility","text":"","code":"quality_eligibility(   year,   npi,   tidy = TRUE,   unnest = TRUE,   pivot = TRUE,   na.rm = FALSE,   stats = FALSE,   ... )  quality_eligibility_(year = 2017:2023, ...)"},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Payment Program Eligibility — quality_eligibility","text":"year < integer > // required Year data reported, YYYY format. Run qpp_years() return vector years currently available. npi < integer > 10-digit Individual National Provider Identifier assigned clinician enrolled Medicare. Multiple rows NPI indicate multiple TIN/NPI combinations. tidy < boolean > // default: TRUE Tidy output unnest < boolean > // default: TRUE Tidy output pivot < boolean > // default: TRUE Tidy output na.rm < boolean > // default: FALSE Remove empty rows columns stats < boolean > // default: FALSE Return QPP stats ... Pass arguments quality_eligibility().","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Payment Program Eligibility — quality_eligibility","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"quality-payment-program-qpp-eligibility","dir":"Reference","previous_headings":"","what":"Quality Payment Program (QPP) Eligibility","title":"Quality Payment Program Eligibility — quality_eligibility","text":"QPP Eligibility System aggregates data across CMS create eligibility determination every clinician system. Using CMS knows clinician billing patterns enrollments, eligibility \"calculated\" multiple times performance year. information contained endpoints includes basic enrollment information, associated organizations, information organizations, individual group special status information, future, available Alternative Payment Model (APM) affiliations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"types","dir":"Reference","previous_headings":"","what":"Types","title":"Quality Payment Program Eligibility — quality_eligibility","text":"Clinicians represent healthcare providers referenced using NPI. Practices represent clinician group clinicians assign billing rights TIN. represented TIN, EIN, SSN, querying number requires authorization token. Virtual Groups represent combination two TINs certain characteristics, represented virtual group identifier, also requiring authorization token. APM Entities represent group practices participate APM, characterized APM Entity ID.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"stats-true","dir":"Reference","previous_headings":"","what":"stats == TRUE","title":"Quality Payment Program Eligibility — quality_eligibility","text":"Public statistics derived QPP providers:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"hcc-risk-score-average-","dir":"Reference","previous_headings":"","what":"HCC Risk Score Average:","title":"Quality Payment Program Eligibility — quality_eligibility","text":"National average individual (NPI) group (TIN) risk score MIPS eligible individual/group. Scores calculated follows: Individual = sum(Clinician Risk Scores) / n(Eligible Clinicians) Group = sum(Practice Risk Scores) / n(Eligible Practices)","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"dual-eligibility-average-","dir":"Reference","previous_headings":"","what":"Dual Eligibility Average:","title":"Quality Payment Program Eligibility — quality_eligibility","text":"National average individual (NPI) group (TIN) dual-eligibility score MIPS eligible individual/group. Individual = sum(Clinician Dual-Eligibility Scores) / n(Eligible Clinicians) Group = sum(Practice Dual-Eligibility Scores) / n(Eligible Practices)","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Quality Payment Program Eligibility — quality_eligibility","text":"QPP Eligibility API Documentation QPP Eligibility & MVP/CAHPS/Subgroups Registration Services (v6) QPP Eligibility & MVP/CAHPS/Subgroups Registration Services (v6) (Multiple NPIs)","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"update-frequency","dir":"Reference","previous_headings":"","what":"Update Frequency","title":"Quality Payment Program Eligibility — quality_eligibility","text":"Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_eligibility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality Payment Program Eligibility — quality_eligibility","text":"","code":"if (FALSE) { # interactive() # Single NPI/year quality_eligibility(year = 2020, npi = 1144544834)  # Multiple NPIs aff_npis <- affiliations(facility_ccn = 331302) |>             dplyr::pull(npi)  quality_eligibility(year = 2021,                     npi = c(aff_npis[1:5],                             1234567893,                             1043477615,                             1144544834))  # Multiple NPIs/years 2017:2023 |> purrr::map(\\(x)        quality_eligibility(year = x,                            npi = c(aff_npis[1:5],                                    1234567893,                                    1043477615,                                    1144544834))) |>        purrr::list_rbind()  # Same as quality_eligibility_(npi = c(aff_npis[1:5],                              1234567893,                              1043477615,                              1144544834))  # Quality Stats 2017:2023 |> purrr::map(\\(x) quality_eligibility(year = x, stats = TRUE)) |> purrr::list_rbind()  # Same as quality_eligibility_(stats = TRUE) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Payment Program Experience — quality_payment","title":"Quality Payment Program Experience — quality_payment","text":"quality_payment()  allows user access information participation performance Merit-based Incentive Payment System (MIPS) Advanced Alternative Payment Models (APMs) tracks.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Payment Program Experience — quality_payment","text":"","code":"quality_payment(   year,   npi = NULL,   state = NULL,   specialty = NULL,   type = NULL,   tidy = TRUE,   nest = TRUE,   eligibility = TRUE,   ... )  quality_payment_(year = qpp_years(), ...)"},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Payment Program Experience — quality_payment","text":"year < integer > // required Year data reported, YYYY format. Run qpp_years() return vector years currently available. npi < integer > 10-digit Individual National Provider Identifier assigned clinician enrolled Medicare. Multiple rows NPI indicate multiple TIN/NPI combinations. state < character > State US territory code location TIN associated clinician. specialty < character > Specialty corresponding type service clinician submitted Medicare Part B claims TIN/NPI combination. Nurse Practitioner Internal Medicine Physician Assistant Family Practice Emergency Medicine Diagnostic Radiology Anesthesiology Neurology Cardiology type < character > Participation type; level performance data collected, submitted reported final score attributed clinician; drives data returned. \"Group\" \"Individual\" \"MIPS APM\" tidy < boolean > // default: TRUE Tidy output nest < boolean > // default: TRUE Nest status & measures eligibility < boolean > // default: TRUE Append results quality_eligibility() ... Pass arguments quality_payment().","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Payment Program Experience — quality_payment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"quality-payment-program-qpp-experience","dir":"Reference","previous_headings":"","what":"Quality Payment Program (QPP) Experience","title":"Quality Payment Program Experience — quality_payment","text":"QPP dataset provides participation performance information Merit-based Incentive Payment System (MIPS) performance year. cover eligibility participation, performance categories, final score payment adjustments. dataset provides additional details TIN/NPI level published previous performance year.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Quality Payment Program Experience — quality_payment","text":"Quality Payment Program Experience","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"update-frequency","dir":"Reference","previous_headings":"","what":"Update Frequency","title":"Quality Payment Program Experience — quality_payment","text":"Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality Payment Program Experience — quality_payment","text":"","code":"if (FALSE) { # interactive() quality_payment(year = 2020, npi = 1144544834) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Reassignment of Benefits — reassignments","title":"Reassignment of Benefits — reassignments","text":"reassignments() returns information : Individual providers reassigning benefits employee Organizational/Group providers receiving reassignment benefits employer individual provider provides information regarding physician group practice reassign billing , including individual employer association counts.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reassignment of Benefits — reassignments","text":"","code":"reassignments(   npi = NULL,   pac = NULL,   enid = NULL,   first = NULL,   last = NULL,   state = NULL,   specialty = NULL,   organization = NULL,   pac_org = NULL,   enid_org = NULL,   state_org = NULL,   entry = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reassignment of Benefits — reassignments","text":"npi < integer > Individual 10-digit National Provider Identifier pac < integer > Individual 10-digit PECOS Associate Control ID enid < character > Individual 15-digit Medicare Enrollment ID first, last < character > Individual Provider's name state < character > Individual Enrollment state abbreviation specialty < character > Individual Enrollment specialty organization < character > Organizational Legal business name pac_org < integer > Organizational 10-digit PECOS Associate Control ID enid_org < character > Organizational 15-digit Medicare Enrollment ID state_org < character > Organizational Enrollment state abbreviation entry < character > Entry type, reassignment (\"R\") employment (\"E\") tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reassignment of Benefits — reassignments","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Reassignment of Benefits — reassignments","text":"Medicare Revalidation Reassignment List API Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reassignment of Benefits — reassignments","text":"","code":"if (FALSE) { # interactive() reassignments(enid = \"I20200929003184\")  reassignments(pac = 9830437441)  reassignments(pac_org = 3173525888) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/rxnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"RxNorm API — rxnorm","title":"RxNorm API — rxnorm","text":"RxNorm API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/rxnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RxNorm API — rxnorm","text":"","code":"rxnorm(ndc, ...)"},{"path":"https://andrewallenbruce.github.io/provider/reference/rxnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RxNorm API — rxnorm","text":"ndc < character > // required 10- 11-digit National Drug Code ... future use","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/rxnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RxNorm API — rxnorm","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Provider Taxonomies — taxonomy_codes","title":"Provider Taxonomies — taxonomy_codes","text":"taxonomy_codes() returns tibble() current Health Care Provider Taxonomy code set Update Frequency: Biannually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provider Taxonomies — taxonomy_codes","text":"","code":"taxonomy_codes(shape = c(\"wide\", \"long\"))"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Provider Taxonomies — taxonomy_codes","text":"https://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provider Taxonomies — taxonomy_codes","text":"shape shape data frame returned, 'wide' 'long'","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provider Taxonomies — taxonomy_codes","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"taxonomy-codes","dir":"Reference","previous_headings":"","what":"Taxonomy Codes","title":"Provider Taxonomies — taxonomy_codes","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. contain embedded logic. code set Levels organized allow drilling provider's specific level specialization, three distinct \"Levels\":","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"level-i-provider-grouping","dir":"Reference","previous_headings":"","what":"Level I Provider Grouping","title":"Provider Taxonomies — taxonomy_codes","text":"major grouping service(s) occupation(s) health care providers. Examples: Allopathic & Osteopathic Physicians, Dental Providers, Hospitals","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"level-ii-classification","dir":"Reference","previous_headings":"","what":"Level II Classification","title":"Provider Taxonomies — taxonomy_codes","text":"specific service occupation related Provider Grouping. example, classification Allopathic & Osteopathic Physicians based upon General Specialty Certificates issued appropriate national boards. following boards , however, general certificates appear Level III Areas specialization strictly due display limitations code set Boards multiple general certificates: Medical Genetics, Preventive Medicine, Psychiatry & Neurology, Radiology, Surgery, Otolaryngology, Pathology","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"level-iii-area-of-specialization","dir":"Reference","previous_headings":"","what":"Level III Area of Specialization","title":"Provider Taxonomies — taxonomy_codes","text":"specialized area Classification provider chooses practice make services available. example, area specialization Allopathic & Osteopathic Physicians based upon Subspecialty Certificates issued appropriate national boards.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"categories-level-","dir":"Reference","previous_headings":"","what":"Categories (Level 0)","title":"Provider Taxonomies — taxonomy_codes","text":"code set includes three specialty categories: Group (Individuals): Multi-Specialty Single Specialty Individuals: Allopathic & Osteopathic Physicians Behavioral Health Social Service Providers Chiropractic Providers Dental Providers Dietary Nutritional Service Providers Emergency Medical Service Providers Eye Vision Service Providers Nursing Service Providers Nursing Service Related Providers Service Providers Pharmacy Service Providers Physician Assistants Advanced Practice Nursing Providers Podiatric Medicine Surgery Service Providers Respiratory, Developmental, Rehabilitative Restorative Service Providers Speech, Language Hearing Service Providers Student, Health Care Technologists, Technicians, Technical Service Providers Non-Individuals: Agencies Ambulatory Health Care Facilities Hospital Units Hospitals Laboratories Managed Care Organizations Nursing Custodial Care Facilities Service Providers Residential Treatment Facilities Respite Care Facilities Suppliers Transportation Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"display-name","dir":"Reference","previous_headings":"","what":"Display Name","title":"Provider Taxonomies — taxonomy_codes","text":"display name combination code name Level code nested, precisely identifies code. example, Addiction Medicine physician subspecialty Anesthesiology, Family Medicine, Internal Medicine, Preventive Medicine, Psychiatry & Neurology. \"Addiction Medicine\" identify specialty physician, display name \"Addiction Medicine (Internal Medicine) Physician\" clearly . another example, \"Radiology\" confused several taxonomies, \"Radiology Chiropractor\" accurately specifies provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"description","dir":"Reference","previous_headings":"","what":"Description","title":"Provider Taxonomies — taxonomy_codes","text":"taxonomy_code: Provider Taxonomy Code taxonomy_category: Indicates whether Taxonomy Individual Non-Individual, .e., group taxonomy taxonomy_grouping: Level , Provider Grouping taxonomy_classification: Level II, Classification taxonomy_specialization: Level III, Area Specialization taxonomy_display_name: Consumer-friendly taxonomy name, made code name Level code nested. taxonomy_definition: Definition Taxonomy version: Three digit version code set. first two digits indicate year third digit indicates either first release year (\"0\") second release year (\"1\"). release_date: Date version code set released","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provider Taxonomies — taxonomy_codes","text":"","code":"if (FALSE) { # interactive() taxonomy_codes() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomy Code // Medicare Specialty — taxonomy_crosswalk","title":"Taxonomy Code // Medicare Specialty — taxonomy_crosswalk","text":"taxonomy_crosswalk() allows search types providers suppliers eligible Medicare programs taxonomy code Medicare specialty type code.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"taxonomy-codes","dir":"Reference","previous_headings":"","what":"Taxonomy Codes","title":"Taxonomy Code // Medicare Specialty — taxonomy_crosswalk","text":"Healthcare Provider Taxonomy Code Set hierarchical HIPAA standard code set designed categorize type, classification, specialization health care providers. consists two sections: Individuals Groups Individuals Non-Individuals applying NPI, provider must report taxonomy closely describes type/classification/specialization. situations, provider may need report one taxonomy must indicate one primary. codes selected may categorizations used Medicare enrollment. Links: Provider Supplier Taxonomy Crosswalk Taxonomy Crosswalk Methodology Find Taxonomy Code Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomy Code // Medicare Specialty — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(   taxonomy_code = NULL,   taxonomy_description = NULL,   specialty_code = NULL,   specialty_description = NULL,   keyword_search = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxonomy Code // Medicare Specialty — taxonomy_crosswalk","text":"taxonomy_code < character > 10-digit taxonomy code taxonomy_description < character > Provider's taxonomy description specialty_code < character > Medicare specialty code specialty_description < character > Medicare provider/supplier type keyword_search < character > Search term use quick full-text search. tidy < boolean > // default: TRUE Tidy output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxonomy Code // Medicare Specialty — taxonomy_crosswalk","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxonomy Code // Medicare Specialty — taxonomy_crosswalk","text":"","code":"if (FALSE) { # interactive() taxonomy_crosswalk(keyword_search = \"B4\") taxonomy_crosswalk(keyword_search = \"Histocompatibility\") taxonomy_crosswalk(specialty_description = \"Rehabilitation Agency\") taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/tidyup.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy a Data Frame — tidyup","title":"Tidy a Data Frame — tidyup","text":"Tidy Data Frame","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/tidyup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy a Data Frame — tidyup","text":"","code":"tidyup(   df,   dtype = NULL,   dt = \"date\",   yn = NULL,   int = NULL,   dbl = NULL,   chr = NULL,   up = NULL,   cred = NULL,   zip = NULL,   lgl = NULL,   cma = NULL )"},{"path":"https://andrewallenbruce.github.io/provider/reference/tidyup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy a Data Frame — tidyup","text":"df data frame dtype mdy ymd dt convert date, default 'date' yn convert logical int convert integer dbl convert double chr convert character convert upper case cred remove periods zip normalize zip code lgl convert logical cma remove commas","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/tidyup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy a Data Frame — tidyup","text":"tidy data frame","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":null,"dir":"Reference","previous_headings":"","what":"Provider Utilization & Demographics by Year — utilization","title":"Provider Utilization & Demographics by Year — utilization","text":"utilization() allows access information services procedures provided Original Medicare (fee--service) Part B beneficiaries physicians healthcare professionals; aggregated provider, service geography.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provider Utilization & Demographics by Year — utilization","text":"","code":"utilization(   year,   type,   npi = NULL,   first = NULL,   last = NULL,   organization = NULL,   credential = NULL,   gender = NULL,   entype = NULL,   city = NULL,   state = NULL,   zip = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par = NULL,   level = NULL,   hcpcs = NULL,   drug = NULL,   pos = NULL,   tidy = TRUE,   nest = TRUE,   detailed = FALSE,   rbcs = TRUE,   na.rm = TRUE,   ... )  utilization_(year = util_years(), ...)"},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provider Utilization & Demographics by Year — utilization","text":"year < integer > // required Year data reported, YYYY format. Run util_years() return vector years currently available. type < character > // required dataset query, \"Provider\", \"Service\", \"Geography\" npi < integer > 10-digit national provider identifier first, last, organization < character > Individual/Organizational provider's name credential < character > Individual provider's credentials gender < character > Individual provider's gender; \"F\" (Female), \"M\" (Male) entype < character > Provider entity type; \"\" (Individual), \"O\" (Organization) city < character > City provider located state < character > State provider located zip < character > Provider’s zip code fips < character > Provider's state's FIPS code ruca < character > Provider’s RUCA code country < character > Country provider located specialty < character > Provider specialty code reported largest number claims submitted par < boolean > Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts level < character > Geographic level data aggregated: \"State\": Data aggregated state \"National\": Data aggregated across states given HCPCS Code hcpcs < character > HCPCS code used identify specific medical service furnished provider drug < boolean > Identifies whether HCPCS code listed Medicare Part B Drug Average Sales Price (ASP) File pos < character > Identifies whether Place Service (POS) submitted claims : Facility (\"F\"): Hospital, Skilled Nursing Facility, etc. Non-facility (\"O\"): Office, Home, etc. tidy < boolean > // default: TRUE Tidy output nest < boolean > // default: TRUE Nest performance, demographics conditions detailed < boolean > // default: FALSE Include nested medical drug columns rbcs < boolean > // default: TRUE Add Restructured BETOS Classifications HCPCS codes na.rm < boolean > // default: TRUE Remove empty rows columns ... Pass arguments utilization().","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"by-provider","dir":"Reference","previous_headings":"","what":"By Provider","title":"Provider Utilization & Demographics by Year — utilization","text":"type =\"Provider\": Provider dataset allows user access data services procedures performed; charges submitted payment received; beneficiary demographic health characteristics providers treating Original Medicare (fee--service) Part B beneficiaries, aggregated year.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"by-provider-and-service","dir":"Reference","previous_headings":"","what":"By Provider and Service","title":"Provider Utilization & Demographics by Year — utilization","text":"type =\"Service\": Provider Service dataset aggregated : Rendering provider's NPI Healthcare Common Procedure Coding System (HCPCS) code Place Service (Facility Non-facility) can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"by-geography-and-service","dir":"Reference","previous_headings":"","what":"By Geography and Service","title":"Provider Utilization & Demographics by Year — utilization","text":"type =\"Geography\": Geography Service dataset contains information utilization, allowed amount, Medicare payment, submitted charges organized nationally state-wide HCPCS code place service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Provider Utilization & Demographics by Year — utilization","text":"Medicare Physician & Practitioners: Provider API Medicare Physician & Practitioners: Provider Service API Medicare Physician & Practitioners: Geography Service API Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provider Utilization & Demographics by Year — utilization","text":"","code":"if (FALSE) { # interactive() utilization(year = 2020,             type = 'Provider',             npi = 1003000423)  utilization(year = 2019,             type = 'Service',             npi = 1003000126)  utilization(year = 2020,             type = 'Geography',             hcpcs = '0002A')  # Use the years helper function to # retrieve results for every year: util_years() |> map(\\(x) utilization(year = x,                      type = 'Provider',                      npi = 1043477615)) |> list_rbind()  # Parallelized version utilization_(type = 'Provider',              npi = 1043477615)  utilization_(type = 'Service',              npi = 1043477615)  utilization_(type = 'Geography',              hcpcs = '0002A') }"},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":null,"dir":"Reference","previous_headings":"","what":"Years Currently Searchable for APIs — years","title":"Years Currently Searchable for APIs — years","text":"Years Currently Searchable APIs","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Years Currently Searchable for APIs — years","text":"","code":"open_years()  out_years()  rx_years()  util_years()  cc_years()  qpp_years()  bene_years(period = c(\"year\", \"month\"))"},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Years Currently Searchable for APIs — years","text":"period One \"year\" \"month\"","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Years Currently Searchable for APIs — years","text":"integer vector years available search","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Years Currently Searchable for APIs — years","text":"","code":"if (FALSE) { # interactive() # `beneficiaries()` bene_years(\"year\") bene_years(\"month\")  # `open_payments()` open_years()  # `utilization()` util_years()  # `conditions()` cc_years()  # `quality_payment()` qpp_years()  # `outpatient()` out_years()  # `prescribers()` rx_years() }"},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009010-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9010 (2023-02-08)","title":"provider 0.0.0.9010 (2023-02-08)","text":"added hospital_enrollment() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009009-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9009 (2023-02-08)","title":"provider 0.0.0.9009 (2023-02-08)","text":"implemented cms_update_ids() applicable functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009008-2023-02-07","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9008 (2023-02-07)","title":"provider 0.0.0.9008 (2023-02-07)","text":"added addl_phone_numbers() function added nucc_taxonomy_230 dataset added examples new functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009007-2023-02-04","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9007 (2023-02-04)","title":"provider 0.0.0.9007 (2023-02-04)","text":"doctors_and_clinicians() function facility_affiliations() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009006-2023-02-03","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9006 (2023-02-03)","title":"provider 0.0.0.9006 (2023-02-03)","text":"pending_applications() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009005-2023-01-22","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9005 (2023-01-22)","title":"provider 0.0.0.9005 (2023-01-22)","text":"nesting larger outputs","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009004-2023-01-21","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9004 (2023-01-21)","title":"provider 0.0.0.9004 (2023-01-21)","text":"initial implementation distribution id update functions open_payments() vignette","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009003-2023-01-16","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9003 (2023-01-16)","title":"provider 0.0.0.9003 (2023-01-16)","text":"open_payments() function added","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9001 (2022-08-31)","title":"provider 0.0.0.9001 (2022-08-31)","text":"Updated README.","code":""}]
