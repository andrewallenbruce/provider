[{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"CMS Missing Digital Contact Information API","text":"npi last_name first_name","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-miss-contact-info.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"CMS Missing Digital Contact Information API","text":"CMS Public Reporting Missing Digital Contact Information Endpoints Information Methodology & Policy","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"applicable-group-purchasing-organization-gpo","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Applicable Group Purchasing Organization (GPO)","title":"CMS Open Payments API","text":"Applicable group purchasing organizations (GPOs) entities operate United States purchase, arrange negotiate purchase covered drugs, devices, biologicals, medical supplies group individuals entities, solely use entity .","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"applicable-manufacturers","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Applicable Manufacturers","title":"CMS Open Payments API","text":"Applicable manufacturers entities operate United States (1) engaged production, preparation, propagation, compounding, conversion covered drug, device, biological, medical supply, covered drug, device, biological medical supply solely use within entity entity’s patients (definition include distributors wholesalers (including, limited , repackagers, relabelers, kit assemblers) hold title covered drug, device, biological medical supply); (2) entities common ownership entity described part (1) definition, provides assistance support entities respect production, preparation, propagation, compounding, conversion, marketing, promotion, sale, distribution covered drug, device, biological medical supply. (See 42 CFR 403.902)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"covered-recipients","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Covered Recipients","title":"CMS Open Payments API","text":"physician, physician assistant, nurse practitioner, clinical nurse specialist, certified registered nurse anesthetist, certified nurse-midwife bona fide employee applicable manufacturer reporting payment; teaching hospital, institution received payment 1886(d)(5)(B), 1886(h), 1886(s) Act last calendar year information available.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"natures-of-payment","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Natures of Payment","title":"CMS Open Payments API","text":"Natures payment categories categories must used describe payment transfer value made (See 42 CFR 403.904(e)(2)). applicable “general” payment type, research ownership. categories : Acquisitions (applicable Program Year 2021 subsequent program years) Charitable contributions Compensation services consulting, including serving faculty speaker event continuing education program Compensation serving faculty speaker accredited certified continuing education program (Applicable Program Years 2013 - 2020) Compensation serving faculty speaker unaccredited non-certified continuing education program (Applicable Program Years 2013 - 2020) Compensation serving faculty speaker medical education program (Applicable beginning Program Year 2021 subsequent program years) Consulting fees Current prospective ownership investment interest (removed starting Program Year 2023) Debt Forgiveness (Applicable beginning Program Year 2021 subsequent program years) Education Entertainment Food beverage Gift Grant Honoraria Long-term medical supply device loan (Applicable beginning Program Year 2021 subsequent program years) Royalty license Space rental facility fees (teaching hospitals ) Travel lodging","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"national-provider-identifier-npi","dir":"Articles","previous_headings":"Open Payments Glossary","what":"National Provider Identifier (NPI)","title":"CMS Open Payments API","text":"NPI unique identification number covered health care providers. NPI 10-position numeric identifier, check digit 10th position intelligence health care provider number. (See 45 CFR 162.406)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"newly-added-covered-recipients","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Newly Added Covered Recipients","title":"CMS Open Payments API","text":"Open Payments expanded January 2021 include five new provider types: Physician Assistants: physician assistant performs services individual legally authorized perform (State individual performs services) accordance State law (State regulatory mechanism provided State law), meets training, education, experience requirements (combination thereof) Secretary may prescribe regulations. Nurse Practitioners: nurse practitioner performs services individual legally authorized perform (State individual performs services) accordance State law (State regulatory mechanism provided State law), meets training, education, experience requirements (combination thereof) Secretary may prescribe regulations. Clinical Nurse Specialists: individual registered nurse licensed practice nursing State clinical nurse specialist services performed; holds master’s degree defined clinical area nursing accredited educational institution. Certified Registered Nurse Anesthetists: certified registered nurse anesthetist licensed State meets education, training, requirements relating anesthesia services related care Secretary may prescribe. prescribing requirements Secretary may use requirements established national organization certification nurse anesthetists. term also includes, prescribed Secretary, Anesthesiologist Assistant. Certified Nurse-Midwives: registered nurse successfully completed program study clinical experience meeting guidelines prescribed Secretary, certified organization recognized Secretary.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"non-physician-practitioner-covered-recipient","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Non-Physician Practitioner Covered Recipient","title":"CMS Open Payments API","text":"Health care providers practice either collaboration supervision physician, including physician assistants, nurse practitioners, clinical nurse specialists, referred non-physician practitioners (NPPs).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"ownership-or-investment-interest","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Ownership or Investment Interest","title":"CMS Open Payments API","text":"Ownership investment interest includes, limited : Stock Stock option(s) (received compensation, exercised) Partnership share(s) Limited liability company membership(s) Loans Bonds financial instruments secured entity’s property revenue portion property revenue may direct indirect debt, equity means (See 42 CFR 403.902). Please note exceptions definition.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"physician","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Physician","title":"CMS Open Payments API","text":"purposes Open Payments, “physician” following types professionals legally authorized state practice, regardless whether Medicare, Medicaid, Children’s health Insurance Program (CHIP) providers: Doctors Medicine Osteopathic Medicine Doctors Dental Medicine Dental Surgery Doctors Podiatric Medicine Doctors Optometry Chiropractors Note: Medical residents excluded definition physicians purpose program.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"reporting-entities","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Reporting Entities","title":"CMS Open Payments API","text":"Reporting entities applicable manufacturers applicable GPOs.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"research","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Research","title":"CMS Open Payments API","text":"Research systematic investigation develop contribute generalized knowledge public health, including behavioral social-sciences research. definition includes basic applied research, product development. (See 42 CFR 403.902)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"teaching-hospital","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Teaching Hospital","title":"CMS Open Payments API","text":"Teaching hospitals hospitals receive payment Medicare direct graduate medical education (GME), IPPS indirect medical education (IME), psychiatric hospital IME programs last calendar year information available. (See 42 CFR 403.902) purposes Open Payments, “teaching hospitals” hospitals received payment Medicare direct graduate medical education (GME), inpatient prospective payment system (IPPS) indirect medical education (IME), psychiatric hospital IME programs last calendar year information available.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"third-parties","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Third Parties","title":"CMS Open Payments API","text":"Third parties individuals entities, whether operate United States.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"transfers-of-value","dir":"Articles","previous_headings":"Open Payments Glossary","what":"Transfers of Value","title":"CMS Open Payments API","text":"Payments transfers value anything value given applicable manufacturer applicable GPO covered recipient physician owner/investor fall within one excluded categories rule. (See 42 CFR 403.902)","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"CMS Open Payments API","text":"","code":"open_payments(recipient_npi = 1043218118, year = 2020) #> # A tibble: 73 × 48 #>    program_year record_number change_type covered_recipient_type      #>    <chr>        <chr>         <chr>       <chr>                       #>  1 2020         9248756       UNCHANGED   Covered Recipient Physician #>  2 2020         9248761       UNCHANGED   Covered Recipient Physician #>  3 2020         9248766       UNCHANGED   Covered Recipient Physician #>  4 2020         9248771       UNCHANGED   Covered Recipient Physician #>  5 2020         9248776       UNCHANGED   Covered Recipient Physician #>  6 2020         10170581      UNCHANGED   Covered Recipient Physician #>  7 2020         10170586      UNCHANGED   Covered Recipient Physician #>  8 2020         10170591      UNCHANGED   Covered Recipient Physician #>  9 2020         10170596      UNCHANGED   Covered Recipient Physician #> 10 2020         10170601      UNCHANGED   Covered Recipient Physician #> # ℹ 63 more rows #> # ℹ 44 more variables: covered_recipient_profile_id <chr>, #> #   covered_recipient_npi <chr>, covered_recipient_first_name <chr>, #> #   covered_recipient_last_name <chr>, #> #   recipient_primary_business_street_address_line1 <chr>, #> #   recipient_city <chr>, recipient_state <chr>, recipient_zip_code <chr>, #> #   recipient_country <chr>, covered_recipient_primary_type_1 <chr>, … open_payments(recipient_npi = 1043218118, year = 2019) #> # A tibble: 68 × 51 #>    program_year record_number change_type covered_recipient_type      #>    <chr>        <chr>         <chr>       <chr>                       #>  1 2019         14968401      UNCHANGED   Covered Recipient Physician #>  2 2019         14968416      UNCHANGED   Covered Recipient Physician #>  3 2019         14968421      UNCHANGED   Covered Recipient Physician #>  4 2019         14968426      UNCHANGED   Covered Recipient Physician #>  5 2019         14968431      UNCHANGED   Covered Recipient Physician #>  6 2019         14968436      UNCHANGED   Covered Recipient Physician #>  7 2019         14968441      UNCHANGED   Covered Recipient Physician #>  8 2019         14968446      UNCHANGED   Covered Recipient Physician #>  9 2019         14968451      UNCHANGED   Covered Recipient Physician #> 10 2019         14968456      UNCHANGED   Covered Recipient Physician #> # ℹ 58 more rows #> # ℹ 47 more variables: covered_recipient_profile_id <chr>, #> #   covered_recipient_npi <chr>, covered_recipient_first_name <chr>, #> #   covered_recipient_last_name <chr>, #> #   recipient_primary_business_street_address_line1 <chr>, #> #   recipient_city <chr>, recipient_state <chr>, recipient_zip_code <chr>, #> #   recipient_country <chr>, covered_recipient_primary_type_1 <chr>, … open_payments(recipient_city = \"Jacksonville\", recipient_state = \"FL\") #> # A tibble: 500 × 65 #>    program_year record_number change_type covered_recipient_type                 #>    <chr>        <chr>         <chr>       <chr>                                  #>  1 2021         25646         UNCHANGED   Covered Recipient Non-Physician Pract… #>  2 2021         25761         UNCHANGED   Covered Recipient Non-Physician Pract… #>  3 2021         34446         UNCHANGED   Covered Recipient Non-Physician Pract… #>  4 2021         78726         UNCHANGED   Covered Recipient Non-Physician Pract… #>  5 2021         80201         UNCHANGED   Covered Recipient Non-Physician Pract… #>  6 2021         83016         UNCHANGED   Covered Recipient Non-Physician Pract… #>  7 2021         83021         UNCHANGED   Covered Recipient Non-Physician Pract… #>  8 2021         83196         UNCHANGED   Covered Recipient Non-Physician Pract… #>  9 2021         83201         UNCHANGED   Covered Recipient Non-Physician Pract… #> 10 2021         83391         UNCHANGED   Covered Recipient Non-Physician Pract… #> # ℹ 490 more rows #> # ℹ 61 more variables: covered_recipient_profile_id <chr>, #> #   covered_recipient_npi <chr>, covered_recipient_first_name <chr>, #> #   covered_recipient_middle_name <chr>, covered_recipient_last_name <chr>, #> #   recipient_primary_business_street_address_line1 <chr>, #> #   recipient_primary_business_street_address_line2 <chr>, #> #   recipient_city <chr>, recipient_state <chr>, recipient_zip_code <chr>, … open_payments(manufacturer_gpo_id = 100000151589, offset = 0) #> # A tibble: 500 × 52 #>    program_year record_number change_type covered_recipient_type      #>    <chr>        <chr>         <chr>       <chr>                       #>  1 2021         55248441      UNCHANGED   Covered Recipient Physician #>  2 2021         55248451      UNCHANGED   Covered Recipient Physician #>  3 2021         55248461      UNCHANGED   Covered Recipient Physician #>  4 2021         55248471      UNCHANGED   Covered Recipient Physician #>  5 2021         55248486      UNCHANGED   Covered Recipient Physician #>  6 2021         55248496      UNCHANGED   Covered Recipient Physician #>  7 2021         55248501      UNCHANGED   Covered Recipient Physician #>  8 2021         55248511      UNCHANGED   Covered Recipient Physician #>  9 2021         55248521      UNCHANGED   Covered Recipient Physician #> 10 2021         55248536      UNCHANGED   Covered Recipient Physician #> # ℹ 490 more rows #> # ℹ 48 more variables: covered_recipient_profile_id <chr>, #> #   covered_recipient_npi <chr>, covered_recipient_first_name <chr>, #> #   covered_recipient_middle_name <chr>, covered_recipient_last_name <chr>, #> #   covered_recipient_name_suffix <chr>, #> #   recipient_primary_business_street_address_line1 <chr>, #> #   recipient_primary_business_street_address_line2 <chr>, … open_payments(manufacturer_gpo_id = 100000151589, offset = 500) #> # A tibble: 500 × 51 #>    program_year record_number change_type covered_recipient_type      #>    <chr>        <chr>         <chr>       <chr>                       #>  1 2021         55253511      UNCHANGED   Covered Recipient Physician #>  2 2021         55253526      UNCHANGED   Covered Recipient Physician #>  3 2021         55253536      UNCHANGED   Covered Recipient Physician #>  4 2021         55253556      UNCHANGED   Covered Recipient Physician #>  5 2021         55253566      UNCHANGED   Covered Recipient Physician #>  6 2021         55253571      UNCHANGED   Covered Recipient Physician #>  7 2021         55253581      UNCHANGED   Covered Recipient Physician #>  8 2021         55253591      UNCHANGED   Covered Recipient Physician #>  9 2021         55253606      UNCHANGED   Covered Recipient Physician #> 10 2021         55253616      UNCHANGED   Covered Recipient Physician #> # ℹ 490 more rows #> # ℹ 47 more variables: covered_recipient_profile_id <chr>, #> #   covered_recipient_npi <chr>, covered_recipient_first_name <chr>, #> #   covered_recipient_middle_name <chr>, covered_recipient_last_name <chr>, #> #   covered_recipient_name_suffix <chr>, #> #   recipient_primary_business_street_address_line1 <chr>, #> #   recipient_primary_business_street_address_line2 <chr>, … open_payments(manufacturer_gpo_id = 100000151589, year = 2020) #> # A tibble: 500 × 65 #>    program_year record_number change_type covered_recipient_type      #>    <chr>        <chr>         <chr>       <chr>                       #>  1 2020         9340966       UNCHANGED   Covered Recipient Physician #>  2 2020         9341906       UNCHANGED   Covered Recipient Physician #>  3 2020         9240916       UNCHANGED   Covered Recipient Physician #>  4 2020         9298051       UNCHANGED   Covered Recipient Physician #>  5 2020         9270451       UNCHANGED   Covered Recipient Physician #>  6 2020         9240931       UNCHANGED   Covered Recipient Physician #>  7 2020         9325281       UNCHANGED   Covered Recipient Physician #>  8 2020         9276031       UNCHANGED   Covered Recipient Physician #>  9 2020         9243621       UNCHANGED   Covered Recipient Physician #> 10 2020         9248981       UNCHANGED   Covered Recipient Physician #> # ℹ 490 more rows #> # ℹ 61 more variables: covered_recipient_profile_id <chr>, #> #   covered_recipient_npi <chr>, covered_recipient_first_name <chr>, #> #   covered_recipient_middle_name <chr>, covered_recipient_last_name <chr>, #> #   covered_recipient_name_suffix <chr>, #> #   recipient_primary_business_street_address_line1 <chr>, #> #   recipient_primary_business_street_address_line2 <chr>, … open_payments(manufacturer_gpo_id = \"100000151589\", year = 2019) #> # A tibble: 500 × 57 #>    program_year record_number change_type covered_recipient_type      #>    <chr>        <chr>         <chr>       <chr>                       #>  1 2019         45257226      UNCHANGED   Covered Recipient Physician #>  2 2019         45257196      UNCHANGED   Covered Recipient Physician #>  3 2019         45257221      UNCHANGED   Covered Recipient Physician #>  4 2019         45257211      UNCHANGED   Covered Recipient Physician #>  5 2019         45257191      UNCHANGED   Covered Recipient Physician #>  6 2019         45257186      UNCHANGED   Covered Recipient Physician #>  7 2019         45257216      UNCHANGED   Covered Recipient Physician #>  8 2019         45257181      UNCHANGED   Covered Recipient Physician #>  9 2019         45257206      UNCHANGED   Covered Recipient Physician #> 10 2019         45257201      UNCHANGED   Covered Recipient Physician #> # ℹ 490 more rows #> # ℹ 53 more variables: covered_recipient_profile_id <chr>, #> #   covered_recipient_npi <chr>, covered_recipient_first_name <chr>, #> #   covered_recipient_middle_name <chr>, covered_recipient_last_name <chr>, #> #   covered_recipient_name_suffix <chr>, #> #   recipient_primary_business_street_address_line1 <chr>, #> #   recipient_primary_business_street_address_line2 <chr>, … open_payments(recipient_npi = 1346540572) #> # A tibble: 20 × 54 #>    program_year record_number change_type covered_recipient_type                 #>    <chr>        <chr>         <chr>       <chr>                                  #>  1 2021         11156         UNCHANGED   Covered Recipient Non-Physician Pract… #>  2 2021         16015026      UNCHANGED   Covered Recipient Non-Physician Pract… #>  3 2021         17481356      UNCHANGED   Covered Recipient Non-Physician Pract… #>  4 2021         17481371      UNCHANGED   Covered Recipient Non-Physician Pract… #>  5 2021         17481376      UNCHANGED   Covered Recipient Non-Physician Pract… #>  6 2021         17481381      UNCHANGED   Covered Recipient Non-Physician Pract… #>  7 2021         17481386      UNCHANGED   Covered Recipient Non-Physician Pract… #>  8 2021         17481391      UNCHANGED   Covered Recipient Non-Physician Pract… #>  9 2021         17481396      UNCHANGED   Covered Recipient Non-Physician Pract… #> 10 2021         17481401      UNCHANGED   Covered Recipient Non-Physician Pract… #> 11 2021         17481411      UNCHANGED   Covered Recipient Non-Physician Pract… #> 12 2021         17481416      UNCHANGED   Covered Recipient Non-Physician Pract… #> 13 2021         32843216      UNCHANGED   Covered Recipient Non-Physician Pract… #> 14 2021         37626276      UNCHANGED   Covered Recipient Non-Physician Pract… #> 15 2021         37626281      UNCHANGED   Covered Recipient Non-Physician Pract… #> 16 2021         37626286      UNCHANGED   Covered Recipient Non-Physician Pract… #> 17 2021         37873006      UNCHANGED   Covered Recipient Non-Physician Pract… #> 18 2021         40456961      UNCHANGED   Covered Recipient Non-Physician Pract… #> 19 2021         56314646      UNCHANGED   Covered Recipient Non-Physician Pract… #> 20 2021         56881486      CHANGED     Covered Recipient Non-Physician Pract… #> # ℹ 50 more variables: covered_recipient_profile_id <chr>, #> #   covered_recipient_npi <chr>, covered_recipient_first_name <chr>, #> #   covered_recipient_middle_name <chr>, covered_recipient_last_name <chr>, #> #   recipient_primary_business_street_address_line1 <chr>, #> #   recipient_primary_business_street_address_line2 <chr>, #> #   recipient_city <chr>, recipient_state <chr>, recipient_zip_code <chr>, #> #   recipient_country <chr>, covered_recipient_primary_type_1 <chr>, …"},{"path":"https://andrewallenbruce.github.io/provider/articles/cms-open-payments.html","id":"related-links","dir":"Articles","previous_headings":"Examples","what":"Related Links","title":"CMS Open Payments API","text":"Natures Payment Law Policy Audits Penalties Reporting Entities Open Payments: General Resources","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/geocoding.html","id":"providers-current-practice-address","dir":"Articles","previous_headings":"","what":"Provider’s Current Practice Address","title":"Healthcare Providers: Why Geocode?","text":"","code":"geo_nppes <- nppes_npi(npi = 1760485387)  geo_nppes #> # A tibble: 1 × 19 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1760… NPI-1            2005-05-27       566179200s (~17.94 years) 2012-12-04   #> # ℹ 14 more variables: status <chr>, first_name <chr>, middle_name <chr>, #> #   last_name <chr>, credential <chr>, gender <chr>, sole_proprietor <chr>, #> #   country <chr>, street <chr>, city <chr>, state <chr>, zipcode <chr>, #> #   phone_number <chr>, fax_number <chr> geo_add <- geo_nppes |>    dplyr::select(address_1, city, state, postal_code) |>   dplyr::filter(dplyr::row_number() %in% 1) |>    dplyr::mutate(address_1 = stringr::str_remove_all(address_1, \"\\\\.\")) #> Error in `dplyr::select()`: #> ! Can't subset columns that don't exist. #> ✖ Column `address_1` doesn't exist.  geo_add #> Error in eval(expr, envir, enclos): object 'geo_add' not found geo_ltlg <- geo_add |> tidygeocoder::geocode(street = address_1,                                              city = city,                                              state = state,                                              postalcode = postal_code,                                              method = \"census\",                                              lat = latitude,                                               long = longitude,                                               full_results = TRUE) #> Error in eval(expr, envir, enclos): object 'geo_add' not found geo_ltlg #> Error in eval(expr, envir, enclos): object 'geo_ltlg' not found leaflet::leaflet() |>    leaflet::addTiles() |>    leaflet::addMarkers(lng = geo_ltlg$longitude,                        lat = geo_ltlg$latitude) #> Error in eval(expr, envir, enclos): object 'geo_ltlg' not found"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"medicare-multiple-chronic-conditions-api","dir":"Articles","previous_headings":"","what":"Medicare Multiple Chronic Conditions API","title":"Medicare Chronic Conditions APIs","text":"Multiple Chronic Conditions dataset provides information number chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories (0-1, 2-3, 4-5 6 ).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"examples","dir":"Articles","previous_headings":"Medicare Multiple Chronic Conditions API","what":"Examples","title":"Medicare Chronic Conditions APIs","text":"","code":"cc_multiple(year = 2018,              geo_lvl = \"State\",              geo_desc = \"California\") |>    dplyr::select(!c(bene_geo_lvl, bene_geo_cd)) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() #> Error in cc_multiple(year = 2018, geo_lvl = \"State\", geo_desc = \"California\"): unused arguments (geo_lvl = \"State\", geo_desc = \"California\") cc_multiple(year = 2007,              geo_lvl = \"National\",              demo_lvl = \"Race\") |>    dplyr::select(!c(bene_geo_desc, bene_geo_cd)) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() #> Error in cc_multiple(year = 2007, geo_lvl = \"National\", demo_lvl = \"Race\"): unused arguments (geo_lvl = \"National\", demo_lvl = \"Race\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"medicare-specific-chronic-conditions-api","dir":"Articles","previous_headings":"","what":"Medicare Specific Chronic Conditions API","title":"Medicare Chronic Conditions APIs","text":"Select Chronic Conditions dataset provides information 21 selected chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography distinct chronic conditions listed . Alcohol Abuse Drug Abuse / Substance Abuse Alzheimer’s Disease Related Dementia Arthritis (Osteoarthritis Rheumatoid) Asthma Atrial Fibrillation Autism Spectrum Disorders Cancer (Breast, Colorectal, Lung, Prostate) Chronic Kidney Disease Chronic Obstructive Pulmonary Disease Depression Diabetes Drug Abuse / Substance Abuse Heart Failure Hepatitis (Chronic Viral B & C) HIV/AIDS Hyperlipidemia (High cholesterol) Hypertension (High blood pressure) Ischemic Heart Disease Osteoporosis Schizophrenia Psychotic Disorders Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"examples-1","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Examples","title":"Medicare Chronic Conditions APIs","text":"","code":"cc_specific(year = 2018,              geo_lvl = \"State\",              geo_desc = \"California\") |>    dplyr::select(!c(bene_geo_lvl, bene_geo_cd)) |>    dplyr::arrange(dplyr::desc(bene_age_lvl), bene_demo_lvl) |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() #> Error in cc_specific(year = 2018, geo_lvl = \"State\", geo_desc = \"California\"): unused arguments (geo_lvl = \"State\", geo_desc = \"California\") cc_specific(year = 2007,              geo_lvl = \"National\",              demo_lvl = \"Race\") |>    gt::gt() |>    gt::gt_preview() |>    provider:::gt_theme_provider() #> Error in cc_specific(year = 2007, geo_lvl = \"National\", demo_lvl = \"Race\"): unused arguments (geo_lvl = \"National\", demo_lvl = \"Race\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"data-dictionary","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Data Dictionary","title":"Medicare Chronic Conditions APIs","text":"Bene_Geo_Lvl Beneficiary Geographic Level Bene_Geo_Desc Beneficiary Geographic Description Bene_Geo_Cd Beneficiary Geographic Code Bene_Age_Lvl Beneficiary Age Level Bene_Demo_Lvl Beneficiary Demographic Level Bene_Demo_Desc Beneficiary Demographic Description Bene_MCC Beneficiary Chronic Condition Bene_Cond Beneficiary Multiple Chronic Condition Group Prvlnc Prevalence Tot_Mdcr_Stdzd_Pymt_PC1 Total Medicare Standardized Per Capita Spending Tot_Mdcr_Pymt_PC1 Total Medicare Per Capita Spending Hosp_Readmsn_Rate1 Hospital Readmission Rate ER_Visits_Per_1000_Benes1 Emergency Room Visits per 1,000 Beneficiaries","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-chron-cond.html","id":"related-links","dir":"Articles","previous_headings":"Medicare Specific Chronic Conditions API","what":"Related Links","title":"Medicare Chronic Conditions APIs","text":"Medicare Multiple Chronic Conditions API Medicare Specific Chronic Conditions API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Medicare Public Provider Enrollment API","text":"","code":"provider_enrollment(npi = 1003026055) #> # A tibble: 1 × 11 #>   npi   pac_id enroll_id specialty_code specialty_desc state org_name first_name #>   <chr> <chr>  <chr>     <chr>          <chr>          <chr> <chr>    <chr>      #> 1 1003… 44868… I2017040… 14-46          PRACTITIONER … FL    NA       RADHIKA    #> # ℹ 3 more variables: middle_name <chr>, last_name <chr>, gender <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"data-dictionary","dir":"Articles","previous_headings":"Example","what":"Data Dictionary","title":"Medicare Public Provider Enrollment API","text":"npi pecos_asct_cntl_id enrlmt_id provider_type_cd provider_type_desc state_cd first_name mdl_name last_name org_name gndr_sw reasgn_bnft_enrlmt_id rcv_bnft_enrlmt_id city_name zip_cd","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ffs-prov-enroll.html","id":"related-links","dir":"Articles","previous_headings":"Example","what":"Related Links","title":"Medicare Public Provider Enrollment API","text":"Medicare Fee--Service Public Provider Enrollment API Medicare Fee--Service Public Provider Enrollment - Data Dictionary Fee--Service Public Provider Enrollment Methodology","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Medicare Monthly Enrollment API","text":"","code":"beneficiary_enrollment(year = 2018,                        month = \"Year\",                        level = \"County\",                        state = \"AL\",                        county = \"Autauga\") #> # A tibble: 1 × 26 #>    year month level  state state_name county  fips  bene_total bene_orig #>   <int> <chr> <chr>  <chr> <chr>      <chr>   <chr>      <int>     <int> #> 1  2018 Year  County AL    Alabama    Autauga 01001      10645      5700 #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(year = 2021,                        level = \"County\",                        fips = \"01001\") #> # A tibble: 13 × 26 #>     year month     level  state state_name county  fips  bene_total bene_orig #>    <int> <chr>     <chr>  <chr> <chr>      <chr>   <chr>      <int>     <int> #>  1  2021 Year      County AL    Alabama    Autauga 01001      11396      5338 #>  2  2021 January   County AL    Alabama    Autauga 01001      11371      5368 #>  3  2021 February  County AL    Alabama    Autauga 01001      11356      5355 #>  4  2021 March     County AL    Alabama    Autauga 01001      11362      5352 #>  5  2021 April     County AL    Alabama    Autauga 01001      11366      5329 #>  6  2021 May       County AL    Alabama    Autauga 01001      11376      5329 #>  7  2021 June      County AL    Alabama    Autauga 01001      11372      5332 #>  8  2021 July      County AL    Alabama    Autauga 01001      11399      5329 #>  9  2021 August    County AL    Alabama    Autauga 01001      11416      5322 #> 10  2021 September County AL    Alabama    Autauga 01001      11410      5329 #> 11  2021 October   County AL    Alabama    Autauga 01001      11425      5327 #> 12  2021 November  County AL    Alabama    Autauga 01001      11449      5338 #> 13  2021 December  County AL    Alabama    Autauga 01001      11455      5345 #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(year = 2022,                        month = \"July\",                        level = \"State\",                        state_name = \"Georgia\") #> # A tibble: 1 × 26 #>    year month level state state_name county fips  bene_total bene_orig #>   <int> <chr> <chr> <chr> <chr>      <chr>  <chr>      <int>     <int> #> 1  2022 July  State GA    Georgia    Total  13       1850422    915890 #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(year = 2017,                        level = \"State\",                        fips = \"10\") #> # A tibble: 13 × 26 #>     year month     level state state_name county fips  bene_total bene_orig #>    <int> <chr>     <chr> <chr> <chr>      <chr>  <chr>      <int>     <int> #>  1  2017 Year      State DE    Delaware   Total  10        193585    171150 #>  2  2017 January   State DE    Delaware   Total  10        191515    169538 #>  3  2017 February  State DE    Delaware   Total  10        191777    169776 #>  4  2017 March     State DE    Delaware   Total  10        192164    170068 #>  5  2017 April     State DE    Delaware   Total  10        192449    170240 #>  6  2017 May       State DE    Delaware   Total  10        192846    170542 #>  7  2017 June      State DE    Delaware   Total  10        193384    170976 #>  8  2017 July      State DE    Delaware   Total  10        193953    171441 #>  9  2017 August    State DE    Delaware   Total  10        194400    171828 #> 10  2017 September State DE    Delaware   Total  10        194920    172207 #> 11  2017 October   State DE    Delaware   Total  10        194857    172113 #> 12  2017 November  State DE    Delaware   Total  10        195229    172426 #> 13  2017 December  State DE    Delaware   Total  10        195526    172647 #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data Dictionary","title":"Medicare Monthly Enrollment API","text":"Year Month Bene_State Bene_County Tot_Benes Orgnl_Mdcr_Benes MA_and_Oth_Benes Aged_Tot_Benes Aged_ESRD_Benes Aged_No_ESRD_Benes Dsbld_Tot_Benes Dsbld_ESRD_and_ESRD_Only_Benes Dsbld_No_ESRD_Benes A_B_Tot_Benes A_B_Orgnl_Mdcr_Benes A_B_MA_and_Oth_Benes Prscrptn_Drug_Tot_Benes Prscrptn_Drug_PDP_Benes Prscrptn_Drug_MAPD_Benes","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-month-enroll.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"Medicare Monthly Enrollment API","text":"Medicare Monthly Enrollment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Medicare Opt Out Affidavits API","text":"","code":"opt_out(last = \"Aaron\") #> # A tibble: 1 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1427358282 Sheryl     Aaron     Clinical So… 2022-02-17        2024-02-17      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(specialty = \"Psychiatry\", zip = \"07626\") #> # A tibble: 3 × 13 #>   npi        first_name last_name  specialty  optout_start_date optout_end_date #>   <chr>      <chr>      <chr>      <chr>      <date>            <date>          #> 1 1235359019 Laura      Brenner    Psychiatry 2006-05-01        2024-05-01      #> 2 1356579841 Ruchi      Nadella    Psychiatry 2016-03-30        2024-03-30      #> 3 1508023920 Sireesha   Jathavedam Psychiatry 2018-01-22        2024-01-22      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(first = \"David\", last = \"Smith\") #> # A tibble: 6 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1649265760 David      Smith     Maxillofaci… 2012-06-25        2024-06-25      #> 2 1750565958 David      Smith     Oral Surgery 2013-05-07        2023-05-07      #> 3 1114058443 David      Smith     Psychiatry   2014-08-15        2024-08-15      #> 4 1023002375 David      Smith     Obstetrics/… 2012-10-01        2024-10-01      #> 5 1790853307 David      Smith     Oral Surgery 2015-03-26        2025-03-26      #> 6 1659300077 David      Smith     Dentist      2015-05-26        2023-05-26      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(npi = 1114974490) #> # A tibble: 1 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1114974490 David      Altchek   Orthopedic … 2012-07-01        2024-07-01      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(city = \"Los Angeles\", address = \"9201 W SUNSET BLVD\") #> # A tibble: 5 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1649484007 Ned        Cowan     Psychiatry   2012-12-30        2024-12-30      #> 2 1497783484 Geemee     Chung     Infectious … 2016-04-20        2024-04-20      #> 3 1598825309 Genise     Fraiman   Internal Me… 2016-10-13        2024-10-13      #> 4 1760448351 David      Salehani  Oral Surgery 2022-04-06        2024-04-06      #> 5 1952408007 Colleen    Ryan      Family Prac… 2022-09-21        2024-09-21      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"data-dictionary","dir":"Articles","previous_headings":"Examples","what":"Data Dictionary","title":"Medicare Opt Out Affidavits API","text":"first_name last_name npi specialty optout_effective_date optout_end_date first_line_street_address second_line_street_address city_name state_code zip_code eligible_to_order_and_refer","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-opt-out-affid.html","id":"related-links","dir":"Articles","previous_headings":"Examples","what":"Related Links","title":"Medicare Opt Out Affidavits API","text":"Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"order_refer","dir":"Articles","previous_headings":"","what":"order_refer()","title":"Medicare Order and Referring API","text":"","code":"order_refer(npi = 1003026055) |>  gt::gt() |>    provider:::gt_theme_provider() |>    gt::tab_header(title = \"Provider Results for NPI 1083879860\",     subtitle = gtExtras::add_text_img(\"Report generated with\", url = \"https://raw.githubusercontent.com/andrewallenbruce/provider/main/pkgdown/favicon/apple-touch-icon-180x180.png\", height = 25)) |>    gt::text_transform(locations = gt::cells_body(columns = c(partb, dme, hha, pmd)),                      fn = function(x) {                        if (x == as.character(\"TRUE\")) {gt::html(fontawesome::fa(\"circle-check\", prefer_type = \"solid\", fill = \"green\", height = \"1.5em\", width = \"1.5em\"))                          } else if (x == as.character(\"FALSE\")) {gt::html(fontawesome::fa(\"circle-xmark\", prefer_type = \"solid\", fill = \"red\"))                          }                      }                        )"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"data-dictionary","dir":"Articles","previous_headings":"order_refer()","what":"Data Dictionary","title":"Medicare Order and Referring API","text":"npi last_name first_name partb dme hha pmd","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-ord-referring.html","id":"related-links","dir":"Articles","previous_headings":"order_refer()","what":"Related Links","title":"Medicare Order and Referring API","text":"Medicare Order Referring API CMS.gov: Ordering & Certifying Order Referring Methodology","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"physician-other-practitioners-by-provider","dir":"Articles","previous_headings":"","what":"Physician & Other Practitioners: by Provider","title":"Medicare Physician & Other Practitioners APIs","text":"Provider data subset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI). dataset based information gathered CMS administrative claims data Original Medicare Part B beneficiaries available CMS Chronic Conditions Data Warehouse. Data update frequency: Annually Data source: Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"examples","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider","what":"Examples","title":"Medicare Physician & Other Practitioners APIs","text":"","code":"physician_by_provider(npi = 1003000423, year = 2020) #> # A tibble: 1 × 72 #>    year npi        first_name middle_name last_name credential gender enum_type #>   <int> <chr>      <chr>      <chr>       <chr>     <chr>      <chr>  <chr>     #> 1  2020 1003000423 Jennifer   A           Velotta   MD         F      I         #> # ℹ 64 more variables: street <chr>, city <chr>, state <chr>, fips <chr>, #> #   zipcode <chr>, ruca <chr>, country <chr>, specialty <chr>, par <chr>, #> #   tot_hcpcs <int>, tot_benes <int>, tot_srvcs <int>, tot_charges <dbl>, #> #   tot_allowed <dbl>, tot_payment <dbl>, tot_std_pymt <dbl>, drug_supp <chr>, #> #   drug_hcpcs <int>, drug_benes <int>, drug_srvcs <int>, drug_charges <dbl>, #> #   drug_allowed <dbl>, drug_payment <dbl>, drug_std_pymt <dbl>, #> #   med_supp <chr>, med_hcpcs <int>, med_benes <int>, med_srvcs <int>, … physician_by_provider(type = \"I\",                        city = \"Hershey\",                        state = \"PA\",                        fips = 42,                        ruca = 1,                        gender = \"F\",                        cred = \"M.D.\",                        specialty = \"Anesthesiology\") #> Error in physician_by_provider(type = \"I\", city = \"Hershey\", state = \"PA\", : unused argument (type = \"I\") x <- purrr::map_dfr(2013:2020, ~physician_by_provider(npi = 1003000126, year = .x))"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"examples-1","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Geography and Service","what":"Examples","title":"Medicare Physician & Other Practitioners APIs","text":"","code":"physician_by_geography(hcpcs_code = \"0002A\", year = 2020) #> # A tibble: 9 × 16 #>    year level    sublevel      fips  hcpcs hcpcs_desc hcpcs_drug pos   tot_provs #>   <int> <chr>    <chr>         <chr> <chr> <chr>      <lgl>      <chr>     <int> #> 1  2020 National National      NA    0002A Adm sarsc… FALSE      O            53 #> 2  2020 State    California    06    0002A Adm sarsc… FALSE      O             3 #> 3  2020 State    Florida       12    0002A Adm sarsc… FALSE      O             5 #> 4  2020 State    Illinois      17    0002A Adm sarsc… FALSE      O             3 #> 5  2020 State    Maine         23    0002A Adm sarsc… FALSE      O             1 #> 6  2020 State    Maryland      24    0002A Adm sarsc… FALSE      O             3 #> 7  2020 State    Massachusetts 25    0002A Adm sarsc… FALSE      O             3 #> 8  2020 State    New Jersey    34    0002A Adm sarsc… FALSE      O             3 #> 9  2020 State    Pennsylvania  42    0002A Adm sarsc… FALSE      O             4 #> # ℹ 7 more variables: tot_benes <int>, tot_srvcs <int>, tot_day <int>, #> #   avg_charge <dbl>, avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> service <- purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x))"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"physician-other-practitioners-by-provider-and-service","dir":"Articles","previous_headings":"","what":"Physician & Other Practitioners: by Provider and Service","title":"Medicare Physician & Other Practitioners APIs","text":"spending utilization data Physician Practitioners Provider Service Dataset aggregated following:  NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility).  can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"examples-2","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Examples","title":"Medicare Physician & Other Practitioners APIs","text":"","code":"# Search by NPI physician_by_service(npi = 1003000126) #> Error in `physician_by_service()`: #> ! `year` is absent but must be supplied. # Search by Last Name for 2019 physician_by_service(npi = 1720392988, year = 2019) #> # A tibble: 20 × 29 #>     year npi        enum_type first_name middle_name last_name credential gender #>    <int> <chr>      <chr>     <chr>      <chr>       <chr>     <chr>      <chr>  #>  1  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #>  2  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #>  3  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #>  4  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #>  5  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #>  6  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #>  7  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #>  8  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #>  9  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 10  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 11  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 12  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 13  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 14  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 15  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 16  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 17  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 18  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 19  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> 20  2019 1720392988 I         Mustafa    NA          Abas      MD,        M      #> # ℹ 21 more variables: specialty <chr>, street <chr>, city <chr>, state <chr>, #> #   fips <chr>, zipcode <chr>, ruca <chr>, ruca_desc <chr>, country <chr>, #> #   par <chr>, hcpcs_cd <chr>, hcpcs_desc <chr>, hcpcs_drug <chr>, pos <chr>, #> #   tot_benes <int>, tot_srvcs <int>, tot_day <int>, avg_charge <dbl>, #> #   avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> # Multiple NPIs #npis <- c(1003026055,           1720392988,           1518184605,           1922056829,           1083879860)  #npis |> purrr::map_dfr(physician_by_service) #> Error: <text>:3:21: unexpected ',' #> 2: #npis <- c(1003026055, #> 3:           1720392988, #>                        ^ # Retrieve All Provider Data, 2013-2020 purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x)) #> # A tibble: 78 × 29 #>     year npi        enum_type first_name middle_name last_name credential gender #>    <int> <chr>      <chr>     <chr>      <chr>       <chr>     <chr>      <chr>  #>  1  2013 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #>  2  2013 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #>  3  2013 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #>  4  2013 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #>  5  2013 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #>  6  2013 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #>  7  2013 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #>  8  2014 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #>  9  2014 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #> 10  2014 1003000126 I         Ardalan    NA          Enkeshafi MD         M      #> # ℹ 68 more rows #> # ℹ 21 more variables: specialty <chr>, street <chr>, city <chr>, state <chr>, #> #   fips <chr>, zipcode <chr>, ruca <chr>, ruca_desc <chr>, country <chr>, #> #   par <chr>, hcpcs_cd <chr>, hcpcs_desc <chr>, hcpcs_drug <chr>, pos <chr>, #> #   tot_benes <int>, tot_srvcs <int>, tot_day <int>, avg_charge <dbl>, #> #   avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"provider-data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Provider Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_npi rndrng_prvdr_last_org_name rndrng_prvdr_first_name rndrng_prvdr_mi rndrng_prvdr_crdntls rndrng_prvdr_gndr rndrng_prvdr_ent_cd rndrng_prvdr_st1 rndrng_prvdr_st2 rndrng_prvdr_city rndrng_prvdr_state_abrvtn rndrng_prvdr_state_fips rndrng_prvdr_zip5 rndrng_prvdr_ruca rndrng_prvdr_ruca_desc rndrng_prvdr_cntry rndrng_prvdr_type rndrng_prvdr_mdcr_prtcptg_ind tot_hcpcs_cds tot_benes tot_srvcs tot_sbmtd_chrg tot_mdcr_alowd_amt tot_mdcr_pymt_amt tot_mdcr_stdzd_amt drug_sprsn_ind drug_tot_hcpcs_cds drug_tot_benes drug_tot_srvcs drug_sbmtd_chrg drug_mdcr_alowd_amt drug_mdcr_pymt_amt drug_mdcr_stdzd_amt med_sprsn_ind med_tot_hcpcs_cds med_tot_benes med_tot_srvcs med_sbmtd_chrg med_mdcr_alowd_amt med_mdcr_pymt_amt med_mdcr_stdzd_amt bene_avg_age bene_age_lt_65_cnt bene_age_65_74_cnt bene_age_75_84_cnt bene_age_gt_84_cnt bene_feml_cnt bene_male_cnt bene_race_wht_cnt bene_race_black_cnt bene_race_api_cnt bene_race_hspnc_cnt bene_race_natind_cnt bene_race_othr_cnt bene_dual_cnt bene_ndual_cnt bene_cc_af_pct bene_cc_alzhmr_pct bene_cc_asthma_pct bene_cc_cncr_pct bene_cc_chf_pct bene_cc_ckd_pct bene_cc_copd_pct bene_cc_dprssn_pct bene_cc_dbts_pct bene_cc_hyplpdma_pct bene_cc_hyprtnsn_pct bene_cc_ihd_pct bene_cc_opo_pct bene_cc_raoa_pct bene_cc_sz_pct bene_cc_strok_pct bene_avg_risk_scre","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"geography-data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Geography Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_prvdr_geo_lvl rndrng_prvdr_geo_cd rndrng_prvdr_geo_desc hcpcs_cd hcpcs_desc hcpcs_drug_ind place_of_srvc tot_rndrng_prvdrs tot_srvcs tot_benes tot_bene_day_srvcs avg_sbmtd_chrg avg_mdcr_alowd_amt avg_mdcr_pymt_amt avg_mdcr_stdzd_amt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"service-data-dictionary","dir":"Articles","previous_headings":"Physician & Other Practitioners: by Provider and Service","what":"Service Data Dictionary","title":"Medicare Physician & Other Practitioners APIs","text":"rndrng_npi rndrng_prvdr_last_org_name rndrng_prvdr_first_name rndrng_prvdr_mi rndrng_prvdr_crdntls rndrng_prvdr_gndr rndrng_prvdr_ent_cd rndrng_prvdr_st1 rndrng_prvdr_st2 rndrng_prvdr_city rndrng_prvdr_state_abrvtn rndrng_prvdr_state_fips rndrng_prvdr_zip5 rndrng_prvdr_ruca rndrng_prvdr_ruca_desc rndrng_prvdr_cntry rndrng_prvdr_type rndrng_prvdr_mdcr_prtcptg_ind hcpcs_cd hcpcs_desc hcpcs_drug_ind place_of_srvc tot_benes tot_srvcs tot_bene_day_srvcs avg_sbmtd_chrg avg_mdcr_alowd_amt avg_mdcr_pymt_amt avg_mdcr_stdzd_amt","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"key-data-sources","dir":"Articles","previous_headings":"","what":"Key Data Sources","title":"Medicare Physician & Other Practitioners APIs","text":"data Physician Practitioners Dataset based upon CMS administrative claims data Medicare beneficiaries enrolled fee--service program. data available CMS Chronic Condition Data Warehouse (CCW), database 100% Medicare enrollment fee--service claims data. Service counts, beneficiary counts, provider charges, Medicare allowed amounts payments place service indicator summarized Part B non-institutional claims processed Medicare Administrative Contractor (MAC) Jurisdictions (NCH Claim Type Codes ‘71’, ‘72’). Please see CCW website additional information.  Physician Practitioners Dataset data years, provider demographics (name, credentials, gender, complete address entity type) included National Plan & Provider Enumeration System (NPPES). CMS developed NPPES assign unique identifiers, known National Provider Identifiers (NPIs), health care providers. health care provider’s demographic information collected time enrollment updated periodically. demographics information provided Physician Practitioners Dataset extracted NPPES end calendar year following reporting year (e.g. CY2017 reporting year, NPPES data extracted end calendar year 2018). Please visit NPPES website additional information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"population","dir":"Articles","previous_headings":"","what":"Population","title":"Medicare Physician & Other Practitioners APIs","text":"Physician Practitioners Dataset includes data providers valid NPI submitted Medicare Part B non-institutional claims (excluding DMEPOS) reporting period. protect privacy Medicare beneficiaries, aggregated records derived 10 fewer beneficiaries excluded Physician Practitioners Dataset.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"data-limitations","dir":"Articles","previous_headings":"","what":"Data Limitations","title":"Medicare Physician & Other Practitioners APIs","text":"Although Physician Practitioners Dataset wealth payment utilization information many Medicare Part B services, dataset also number limitations worth noting.  First, data Physician Practitioners Dataset may representative physician’s entire practice. data file information Medicare beneficiaries Part B FFS coverage, physicians typically treat many patients form coverage. Physician Practitioners Dataset information patients covered Medicare, coverage federal programs (like Federal Employees Health Benefits Program Tricare), private health insurance (individual policy employer-sponsored coverage), uninsured. Even within Medicare, Physician Practitioners Dataset include information patients enrolled form Medicare Advantage plan.  information presented file also indicate quality care provided individual physicians. file contains cost utilization information, reasons described preceding paragraph, volume procedures presented may fully inclusive procedures performed provider. Medicare allowed amounts Medicare payments given HCPCS code/place service can vary based number factors, including modifiers, geography, services performed day/visit. example, modifiers (two-character designators signal change HCPCS code procedure service applied) may included claim line service intensity increased decreased, additional physician administered services, service provided differs procedure definition. cases, modifiers impact allowed amounts payments. addition, allowed amounts payments vary geographically Medicare makes adjustments services based area’s cost living. Allowed amounts payments can also adjusted physician renders multiple services beneficiary day, referred multiple procedure payment reduction. standard payment allowed amount rates CPT/HCPCS code, please visit Physician fee schedule.  general, provider administers drugs patient, provider purchases drug Medicare pays provider 106% average sales price (ASP) drug. Although ASP list used datasets define drug services, drugs listed ASP fee schedule complete listing drugs paid part B, ASP fee schedule represents majority drugs used office. information payments drugs covered Part B, please visit ASP Drug Pricing.  Additionally, data risk adjusted thus account difference underlying severity disease patient populations treated providers. However, provided average beneficiary risk scores “Medicare Physician Practitioners Provider Dataset” (.e., one record per NPI) provide information health status beneficiaries providers serve. Also, since data presented summarized actual claims received providers attempts made modify data (.e., statistical outliers removed truncated), rare instances average submitted charge amount may reflect errors included claims submitted providers.  noted earlier, file include data services performed 10 fewer beneficiaries, users aware summing data file may underestimate true Part B FFS totals. addition, providers bill individual NPI organizational NPI. case, users determine provider’s actual total way identify individual’s portion billed organization.  Medicare pays differently services provided facility setting versus freestanding physicians’ office (non-facility setting). services delivered facility setting, Medicare makes two payments, one physician’s professional fee one facility. services delivered facility (Place_Of_Srvc = ”F”), data Physician Practitioners Dataset generally represents physician’s professional fee include facility payment. exception services delivered Ambulatory Surgical Centers (ASCs). cases, physician’s professional fee ASC’s fee represented Physician Practitioners Dataset. ASCs can identified using provider type. services delivered non-facility setting, physician’s office (Place_Of_Srvc = ”O”), Physician Practitioners Dataset represents complete payment service.  users try link data file public datasets, please aware particular Medicare populations included timeframes used file merged. example, efforts link Physician Practitioners Dataset data Part D prescription drug data need account fact beneficiaries FFS Part B coverage (thus included Physician Practitioners Dataset) Part D drug coverage (thus represented Part D data files). time, beneficiaries Part D coverage (thus included Part D data) FFS Part B coverage (thus included Physician Practitioners Dataset). Another example linking data constructed different non-aligning time periods, publically available data physician referral patterns, based 18-month period.  Finally, users aware payments CMS demonstration programs included Physician Practitioners Dataset. Since CMS demonstration programs utilize Medicare claims submission process, payments services demonstrations included data file may grouped specific demonstration HCPCS codes aggregated non-demonstration specific HCPCS codes. Demonstration programs paid outside Medicare claims submission process included Physician Practitioners Dataset.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-phys-other-pract.html","id":"additional-information","dir":"Articles","previous_headings":"","what":"Additional Information","title":"Medicare Physician & Other Practitioners APIs","text":"Data Sources CMS also releases “Medicare Fee--Service Public Provider Enrollment Data” include provider name address information Provider Enrollment Chain Ownership System (PECOS). data updated quarterly basis available data.cms.gov.  Medicare Standardized Spending Users can find information Medicare payment standardization referring Geographic Variation Methodology available within “Risk adjustment standardization” section following web page: Geographic Variation Methodology.  HCCs (Hierarchical Condition Categories) CMS developed risk-adjustment model uses HCCs (hierarchical condition categories) assign risk scores. scores estimate beneficiaries’ FFS spending compare overall average entire Medicare population. summary average risk scores beneficiaries represented calendar year Medicare Physician & Practitioners - Provider dataset located “Resources’” section following web page: Medicare Physician & Practitioners - Provider. Beneficiaries scores greater average risk score expected -average spending, vice versa. Risk scores based beneficiary’s age sex; whether beneficiary eligible Medicaid, first qualified Medicare basis disability, lives institution (usually nursing home); beneficiary’s diagnoses previous year.  HCC model designed risk adjustment larger populations, enrollees MA plan, generates accurate results used compare groups beneficiaries rather individuals. Please visit HCC risk score information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-due-date-list-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Due Date List API","title":"Medicare Revalidation APIs","text":"Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet. lists refreshed every two months two months’ worth due dates appended list.  Revalidation Due Date List dataset contains revalidation due dates Medicare providers due revalidate following six months. provider’s due date fall within ensuing six months, due date marked ‘TBD’. addition dataset also includes subfiles reassignment information given provider well due date listings clinics group practices providers. dataset based information gathered Provider Enrollment, Chain Ownership System (PECOS).  Medicare Revalidation Due Date API Medicare Revalidation Due Date - Data Dictionary","code":"revalidation_date(enroll_id = \"I20031110000070\",                    npi = 1184699621) |> terse::terse() #> $enrollment_id                   c1 I20031110000070   #> $npi                             c1 1184699621        #> $first_name                      c1 Eric              #> $last_name                       c1 Byrd              #> $organization_name               c1 NA                #> $enrollment_state_code           c1 NC                #> $enrollment_type                 c1 3                 #> $provider_type_text              c1 Non-DME Part B    #> $enrollment_specialty            c1 Internal Medicine #> $revalidation_due_date           p1 NA                #> $adjusted_due_date               p1 2022-11-30        #> $individual_total_reassign_to    c1 NA                #> $receiving_benefits_reassignment i1 2 revalidation_date(first_name = \"Eric\",                    last_name = \"Byrd\") |> terse::terse() #> $enrollment_id                   c2 I20031110000070  , I20090128000461  #> $npi                             c2 1184699621       , 1598792285       #> $first_name                      c2 Eric             , Eric             #> $last_name                       c2 Byrd             , Byrd             #> $organization_name               c2 NA               , NA               #> $enrollment_state_code           c2 NC               , SC               #> $enrollment_type                 c2 3                , 3                #> $provider_type_text              c2 Non-DME Part B   , Non-DME Part B   #> $enrollment_specialty            c2 Internal Medicine, General Practice #> $revalidation_due_date           p2 NA               , NA               #> $adjusted_due_date               p2 2022-11-30       , NA               #> $individual_total_reassign_to    c2 NA               , NA               #> $receiving_benefits_reassignment i2 2                , 2 revalidation_date(state = \"FL\",                    type_code = \"3\",                    specialty = \"General Practice\") |> terse::terse() #> $enrollment_id                   c1523 I20031104000582 , I20031105000008 ,  ... #> $npi                             c1523 1184693400      , 1356436786      ,  ... #> $first_name                      c1523 John            , Humberto        ,  ... #> $last_name                       c1523 Abt             , Fernandez Miro  ,  ... #> $organization_name               c1523 NA              , NA              ,  ... #> $enrollment_state_code           c1523 FL              , FL              ,  ... #> $enrollment_type                 c1523 3               , 3               ,  ... #> $provider_type_text              c1523 Non-DME Part B  , Non-DME Part B  ,  ... #> $enrollment_specialty            c1523 General Practice, General Practice,  ... #> $revalidation_due_date           p1523 NA              , NA              ,  ... #> $adjusted_due_date               p1523 NA              , NA              ,  ... #> $individual_total_reassign_to    c1523 NA              , NA              ,  ... #> $receiving_benefits_reassignment c1523 3               , 2               ,  ..."},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"data-dictionary","dir":"Articles","previous_headings":"Medicare Revalidation Due Date List API","what":"Data Dictionary","title":"Medicare Revalidation APIs","text":"enrollment_id national_provider_identifier first_name last_name organization_name enrollment_state_code enrollment_type provider_type_text enrollment_specialty revalidation_due_date adjusted_due_date individual_total_reassign_to receiving_benefits_reassignment","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-clinic-group-practice-reassignment-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Clinic Group Practice Reassignment API","title":"Medicare Revalidation APIs","text":"","code":"revalidation_group(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\") |> terse::terse() #> $group_pac_id                                 d3 4688988371         , 31738 ... #> $group_enrollment_id                          c3 O20150810001133    , O2019 ... #> $group_legal_business_name                    c3 1271972 Llc        , Hartf ... #> $group_state_code                             c3 CT                 , CT    ... #> $group_due_date                               c3 TBD                , TBD   ... #> $group_reassignments_and_physician_assistants i3 34                 , 1734  ... #> $record_type                                  c3 Physician Assistant, Physi ... #> $individual_enrollment_id                     c3 I20200929003184    , I2020 ... #> $individual_npi                               i3 1962026229         , 19620 ... #> $individual_first_name                        c3 Rashadda           , Rasha ... #> $individual_last_name                         c3 Wong               , Wong  ... #> $individual_state_code                        c3 CT                 , CT    ... #> $individual_specialty_description             c3 Physician Assistant, Physi ... #> $individual_due_date                          c3 TBD                , TBD   ... #> $individual_total_employer_associations       i3 3                  , 3     ... revalidation_group(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") |> terse::terse() #> $group_pac_id                                 d1 9436483807           #> $group_enrollment_id                          c1 O20190619002165      #> $group_legal_business_name                    c1 1st Call Urgent Care #> $group_state_code                             c1 FL                   #> $group_due_date                               c1 TBD                  #> $group_reassignments_and_physician_assistants i1 1                    #> $record_type                                  c1 Reassignment         #> $individual_enrollment_id                     c1 I20190619002257      #> $individual_npi                               i1 1326063900           #> $individual_first_name                        c1 John                 #> $individual_last_name                         c1 Kayoma               #> $individual_state_code                        c1 FL                   #> $individual_specialty_description             c1 Family Practice      #> $individual_due_date                          c1 TBD                  #> $individual_total_employer_associations       i1 1"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"data-dictionary-1","dir":"Articles","previous_headings":"Medicare Revalidation Clinic Group Practice Reassignment API","what":"Data Dictionary","title":"Medicare Revalidation APIs","text":"group_pac_id group_enrollment_id group_legal_business_name group_state_code group_due_date group_reassignments_and_physician_assistants record_type individual_enrollment_id individual_npi individual_first_name individual_last_name individual_state_code individual_specialty_description individual_due_date individual_total_employer_associations","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"medicare-revalidation-reassignment-list-api","dir":"Articles","previous_headings":"","what":"Medicare Revalidation Reassignment List API","title":"Medicare Revalidation APIs","text":"Reassignments Providers due Revalidation.  Revalidation Reassignment List dataset provides information reassignments providers due revalidation. Section 6401 () Affordable Care Act established requirement enrolled providers/suppliers revalidate Medicare enrollment information new enrollment screening criteria. CMS completed initial round revalidations resuming regular revalidation cycles accordance 42 CFR §424.515. effort streamline revalidation process reduce provider/supplier burden, CMS implemented several revalidation processing improvements one established due dates Providers must revalidate. Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet.","code":"revalidation_reassign(ind_enroll_id = \"I20200929003184\",                     ind_npi = 1962026229,                     ind_first = \"Rashadda\",                     ind_last = \"Wong\",                     ind_state = \"CT\",                     ind_specialty = \"Physician Assistant\") |> terse::terse() #> $group_pac_id                                 d3 4688988371         , 31738 ... #> $group_enrollment_id                          c3 O20150810001133    , O2019 ... #> $group_legal_business_name                    c3 1271972 Llc        , Hartf ... #> $group_state_code                             c3 CT                 , CT    ... #> $group_due_date                               c3 TBD                , TBD   ... #> $group_reassignments_and_physician_assistants i3 34                 , 1781  ... #> $record_type                                  c3 Physician Assistant, Physi ... #> $individual_pac_id                            d3 2769801430         , 27698 ... #> $individual_enrollment_id                     c3 I20200929003184    , I2020 ... #> $individual_npi                               i3 1962026229         , 19620 ... #> $individual_first_name                        c3 Rashadda           , Rasha ... #> $individual_last_name                         c3 Wong               , Wong  ... #> $individual_state_code                        c3 CT                 , CT    ... #> $individual_specialty_description             c3 Physician Assistant, Physi ... #> $individual_due_date                          c3 TBD                , TBD   ... #> $individual_total_employer_associations       i3 3                  , 3     ..."},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-revalidation.html","id":"related-links","dir":"Articles","previous_headings":"","what":"Related Links","title":"Medicare Revalidation APIs","text":"Medicare Revalidation Reassignment List API","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"medicare-provider-and-supplier-taxonomy-crosswalk-api","dir":"Articles","previous_headings":"","what":"Medicare Provider and Supplier Taxonomy Crosswalk API","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"Medicare Provider Supplier Taxonomy Crosswalk dataset lists providers suppliers eligible enroll Medicare programs proper healthcare provider taxonomy code. data includes Medicare speciality codes, available, provider/supplier type description, taxonomy code, taxonomy description. dataset derived information gathered National Plan Provider Enumerator System (NPPES) Provider Enrollment, Chain Ownership System (PECOS). Medicare Provider Supplier Taxonomy Crosswalk","code":"taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") #> # A tibble: 1 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 2086S0102X    Allopathic & Osteopathic Physicia… 2              Physician/Gen… provider::nucc_taxonomy_230 #> # A tibble: 873 × 8 #>    code     grouping classification specialization definition notes display_name #>    <chr>    <chr>    <chr>          <chr>          <chr>      <chr> <chr>        #>  1 1932000… Group    Multi-Special… NA             A busines… [7/1… Multi-Speci… #>  2 1934000… Group    Single Specia… NA             A busines… [7/1… Single Spec… #>  3 207K000… Allopat… Allergy & Imm… NA             An allerg… Sour… Allergy & I… #>  4 207KA02… Allopat… Allergy & Imm… Allergy        A physici… Sour… Allergy Phy… #>  5 207KI00… Allopat… Allergy & Imm… Clinical & La… An allerg… Sour… Clinical & … #>  6 207L000… Allopat… Anesthesiology NA             An anesth… Sour… Anesthesiol… #>  7 207LA04… Allopat… Anesthesiology Addiction Med… An anesth… Sour… Addiction M… #>  8 207LC02… Allopat… Anesthesiology Critical Care… An anesth… Sour… Critical Ca… #>  9 207LH00… Allopat… Anesthesiology Hospice and P… An anesth… Sour… Hospice and… #> 10 207LP29… Allopat… Anesthesiology Pain Medicine  An anesth… Sour… Pain Medici… #> # ℹ 863 more rows #> # ℹ 1 more variable: section <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"api-data-dictionary","dir":"Articles","previous_headings":"Medicare Provider and Supplier Taxonomy Crosswalk API","what":"API Data Dictionary","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"medicare_specialty_code medicare_provider_supplier_type_description provider_taxonomy_code provider_taxonomy_description_type_classification_specialization","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/mcr-taxon-crosswalk.html","id":"further-reading","dir":"Articles","previous_headings":"Medicare Provider and Supplier Taxonomy Crosswalk API","what":"Further Reading","title":"Medicare Provider and Supplier Taxonomy Crosswalk API","text":"Endpoints Information CMS Public Reporting Missing Digital Contact Information","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"NPPES NPI Registry API","text":"returns tibble containing NPI searched (search), datetime query, outcome status column data_lists, list-column containing collection variables nested data frames:  variables returned follows:  created_epoch: date NPI issued enumeration_type: NPI Entity Type, either NPI-1(individual) NPI-2(organizational) last_updated_epoch: date information last updated provider number: provider’s NPI, listed NPPES  Note: last_updated_epoch / created_epoch dates Unix time. repeated basic list last_updated enumeration_date, respectively.  list-columns returned follows:  basic: Basic information other_names: names used type 2 (organization) providers addresses: Primary location mailing addresses taxonomies: Specialty classification related information identifiers: Various identifiers payer-specific IDs, CLIA numbers, etc. practice_locations: Provider’s practice locations endpoints: Information regarding provider’s endpoints Health Information Exchange (HIE)  Note: list-columns may available every provider. depends factors NPI type, incorporated individual status, subpart delegation, , quite simply, information provided NPPES providers.","code":"x <- nppes_npi(npi = 1114499340) x$addresses[[1]] #> NULL x$practiceLocations[[1]] #> NULL x$taxonomies[[1]] #> NULL x$endpoints[[1]] #> NULL x$other_names[[1]] # ONLY NPI-2 #> NULL basic <- x$basic[[1]] |> tibble::tibble() addresses <- x$addresses[[1]] |> tibble::tibble()  tibble::tibble(basic,                 addresses) #> # A tibble: 0 × 0"},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"examples-1","dir":"Articles","previous_headings":"","what":"Examples","title":"NPPES NPI Registry API","text":"","code":"nppes_npi(npi = 1528060837) #> # A tibble: 1 × 19 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1528… NPI-1            2005-06-01       565747200s (~17.93 years) 2007-07-09   #> # ℹ 14 more variables: status <chr>, first_name <chr>, middle_name <chr>, #> #   last_name <chr>, credential <chr>, gender <chr>, sole_proprietor <chr>, #> #   country <chr>, street <chr>, city <chr>, state <chr>, zipcode <chr>, #> #   phone_number <chr>, fax_number <chr> ### City, state, country nppes_npi(city = \"Atlanta\",           state = \"GA\",           country = \"US\") #> # A tibble: 200 × 22 #>    npi        enumeration_type enumeration_date enumeration_duration      #>    <chr>      <chr>            <date>           <Duration>                #>  1 1881942746 NPI-2            2012-08-27       337305600s (~10.69 years) #>  2 1598140279 NPI-2            2015-07-23       245721600s (~7.79 years)  #>  3 1801411459 NPI-2            2020-06-10       91584000s (~2.9 years)    #>  4 1639793664 NPI-2            2020-06-05       92016000s (~2.92 years)   #>  5 1497497986 NPI-2            2022-04-13       33523200s (~1.06 years)   #>  6 1487827390 NPI-2            2008-04-11       475459200s (~15.07 years) #>  7 1265550859 NPI-2            2007-03-26       508464000s (~16.11 years) #>  8 1134508666 NPI-2            2015-05-29       250473600s (~7.94 years)  #>  9 1598279655 NPI-2            2017-11-28       171504000s (~5.43 years)  #> 10 1356959407 NPI-2            2020-07-15       88560000s (~2.81 years)   #> # ℹ 190 more rows #> # ℹ 18 more variables: last_updated <date>, certification_date <date>, #> #   status <chr>, organization_name <chr>, organizational_subpart <chr>, #> #   first_name <chr>, middle_name <chr>, last_name <chr>, credential <chr>, #> #   gender <chr>, sole_proprietor <chr>, country <chr>, street <chr>, #> #   city <chr>, state <chr>, zipcode <chr>, phone_number <chr>, #> #   fax_number <chr> ### First name, city, state nppes_npi(first = \"John\",           city = \"Baltimore\",           state = \"MD\") #> # A tibble: 200 × 20 #>    npi        enumeration_type enumeration_date enumeration_duration      #>    <chr>      <chr>            <date>           <Duration>                #>  1 1700934569 NPI-1            2007-01-08       515116800s (~16.32 years) #>  2 1396825477 NPI-1            2006-10-16       522374400s (~16.55 years) #>  3 1033595855 NPI-1            2015-08-04       244684800s (~7.75 years)  #>  4 1023436839 NPI-1            2014-03-31       287107200s (~9.1 years)   #>  5 1265870406 NPI-1            2013-06-10       312508800s (~9.9 years)   #>  6 1891754826 NPI-1            2006-03-20       540518400s (~17.13 years) #>  7 1437187960 NPI-1            2006-06-30       531705600s (~16.85 years) #>  8 1750830170 NPI-1            2016-09-27       208396800s (~6.6 years)   #>  9 1811336142 NPI-1            2013-06-20       311644800s (~9.88 years)  #> 10 1871804443 NPI-1            2010-06-29       405561600s (~12.85 years) #> # ℹ 190 more rows #> # ℹ 16 more variables: last_updated <date>, certification_date <date>, #> #   status <chr>, first_name <chr>, middle_name <chr>, last_name <chr>, #> #   credential <chr>, gender <chr>, sole_proprietor <chr>, country <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, phone_number <chr>, #> #   fax_number <chr> nppes_npi(npi = 1336413418) # NPI-2 #> # A tibble: 1 × 16 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1336… NPI-2            2012-03-07       352252800s (~11.16 years) 2020-01-07   #> # ℹ 11 more variables: certification_date <date>, status <chr>, #> #   organization_name <chr>, organizational_subpart <chr>, country <chr>, #> #   street <chr>, city <chr>, state <chr>, zipcode <chr>, phone_number <chr>, #> #   fax_number <chr> nppes_npi(npi = 1710975040) # NPI-1 #> # A tibble: 1 × 19 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1710… NPI-1            2005-10-11       554342400s (~17.57 years) 2007-07-08   #> # ℹ 14 more variables: status <chr>, first_name <chr>, middle_name <chr>, #> #   last_name <chr>, credential <chr>, gender <chr>, sole_proprietor <chr>, #> #   country <chr>, street <chr>, city <chr>, state <chr>, zipcode <chr>, #> #   phone_number <chr>, fax_number <chr> nppes_npi(npi = 1659781227) # Deactivated ### List of NPIs npi_list <- c(1003026055,               1710983663,               1316405939,               1720392988,               1518184605,               1922056829,               1083879860)  npi_list |> purrr::map_dfr(nppes_npi) |> dplyr::group_split(outcome) #> Error in `group_by()`: #> ! Must group by variables found in `.data`. #> ✖ Column `outcome` is not found. ### Data frame of NPIs npi_df <- data.frame(npi = c(1710983663,                              1003026055,                              1316405939,                              1720392988,                              1518184605,                              1922056829,                              1083879860)) npi_df |> tibble::deframe() |> purrr::map_dfr(nppes_npi) #> # A tibble: 6 × 20 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1003… NPI-1            2007-05-22       503539200s (~15.96 years) 2017-04-28   #> 2 1316… NPI-1            2019-03-04       131673600s (~4.17 years)  2023-04-06   #> 3 1720… NPI-1            2010-07-29       402969600s (~12.77 years) 2021-01-08   #> 4 1518… NPI-1            2007-04-19       506390400s (~16.05 years) 2020-10-27   #> 5 1922… NPI-1            2006-05-04       536630400s (~17 years)    2008-02-13   #> 6 1083… NPI-1            2008-07-22       466646400s (~14.79 years) 2021-03-25   #> # ℹ 15 more variables: status <chr>, first_name <chr>, middle_name <chr>, #> #   last_name <chr>, credential <chr>, gender <chr>, sole_proprietor <chr>, #> #   country <chr>, street <chr>, city <chr>, state <chr>, zipcode <chr>, #> #   phone_number <chr>, fax_number <chr>, certification_date <date> ###Tribble example tribble <- tibble::tribble( ~fn,         ~params, \"nppes_npi\", list(1336413418), \"nppes_npi\", list(1710975040), \"nppes_npi\", list(1659781227), \"nppes_npi\", list(first = \"John\", city = \"Baltimore\", state = \"MD\"), \"nppes_npi\", list(first = \"Andrew\", city = \"Atlanta\", state = \"GA\"))  purrr::invoke_map_dfr(tribble$fn, tribble$params) #> # A tibble: 402 × 22 #>    npi        enumeration_type enumeration_date enumeration_duration      #>    <chr>      <chr>            <date>           <Duration>                #>  1 1336413418 NPI-2            2012-03-07       352252800s (~11.16 years) #>  2 1710975040 NPI-1            2005-10-11       554342400s (~17.57 years) #>  3 1700934569 NPI-1            2007-01-08       515116800s (~16.32 years) #>  4 1396825477 NPI-1            2006-10-16       522374400s (~16.55 years) #>  5 1033595855 NPI-1            2015-08-04       244684800s (~7.75 years)  #>  6 1023436839 NPI-1            2014-03-31       287107200s (~9.1 years)   #>  7 1265870406 NPI-1            2013-06-10       312508800s (~9.9 years)   #>  8 1891754826 NPI-1            2006-03-20       540518400s (~17.13 years) #>  9 1437187960 NPI-1            2006-06-30       531705600s (~16.85 years) #> 10 1750830170 NPI-1            2016-09-27       208396800s (~6.6 years)   #> # ℹ 392 more rows #> # ℹ 18 more variables: last_updated <date>, certification_date <date>, #> #   status <chr>, organization_name <chr>, organizational_subpart <chr>, #> #   country <chr>, street <chr>, city <chr>, state <chr>, zipcode <chr>, #> #   phone_number <chr>, fax_number <chr>, first_name <chr>, middle_name <chr>, #> #   last_name <chr>, credential <chr>, gender <chr>, sole_proprietor <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"api-documentation-overview","dir":"Articles","previous_headings":"","what":"API Documentation Overview","title":"NPPES NPI Registry API","text":"section outlines NPPES API’s documentation, going valid search inputs, constraints inputs, descriptions many possible outputs.","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"enumeration-type","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes","what":"Enumeration Type","title":"NPPES NPI Registry API","text":"Two categories health care providers exist NPI enumeration purposes: Entity Type 1 (Individual) Entity Type 2 (Organizational).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"npi-1-individual","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes > Enumeration Type","what":"NPI-1: Individual","title":"NPPES NPI Registry API","text":"Individual health care providers (including sole proprietors) may get NPI Entity Type 1. sole proprietor, must apply NPI using SSN, Employer Identification Number (EIN) even EIN. sole proprietor, may get one NPI, just like individual. following factors affect whether sole proprietor Entity Type 1: Number different office locations Whether employees Whether IRS issued EIN. incorporated individual single health care provider forms conducts business corporation. sole proprietor incorporated individual sole proprietor didn’t form corporation. ’re sole/solo practitioner, doesn’t necessarily mean ’re sole proprietor, vice versa. ’re individual health care provider ’s incorporated, may need get NPI (Entity Type 1) NPI corporation LLC (Entity Type 2).","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"npi-2-organizational","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes > Enumeration Type","what":"NPI-2: Organizational","title":"NPPES NPI Registry API","text":"Organizational health care providers group health care providers eligible NPIs Entity Type 2. Organization health care providers may single employee thousands employees. example incorporated individual organization’s employee. organization health care providers made parts work somewhat independently parent organization. parts may offer different types health care offer health care separate physical locations. parts physical locations aren’t legal entities part organization health care provider (legal entity). NPI Final Rule refers parts locations subparts. organization health care provider can get subparts NPIs. subpart conducts HIPAA standard transactions (separately parent), must get NPI. Subpart determination makes sure entities within covered organization uniquely identified HIPAA standard transactions conduct Medicare covered entities. example, hospital offers acute care, laboratory, pharmacy, rehabilitation services. subparts may need NPI sends standard transactions one health plans. Subpart delegation doesn’t affect Entity Type 1 health care providers. individuals, health care providers can’t choose subparts subparts.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/nppes-npi-registry.html","id":"authorized-official","dir":"Articles","previous_headings":"API Documentation Overview > Terminology Notes > Enumeration Type","what":"Authorized Official","title":"NPPES NPI Registry API","text":"appointed official (e.g., chief executive officer, chief financial officer, general partner, chairman board, direct owner) organization granted legal authority enroll Medicare program, make changes updates organization’s status Medicare program, commit organization fully abide statutes, regulations, program instructions Medicare program. See 42 CFR 424.502 additional information.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"you-need-to-find-a-healthcare-provider-using-only-partial-information","dir":"Articles","previous_headings":"","what":"You Need to Find A Healthcare Provider Using Only Partial Information","title":"Overview of Provider","text":", find healthcare provider using just partial information. instance “EYE doctor RANIA REDMOND”. Strictly speaking, necessary perform search minimum information maximum level relevance result. second result list “REDMOND EYE DOCTORS, PLLC” Dr. Rania Montecillo specified owner.","code":"nppes_npi(city = \"Redmond\",            state = \"WA\",            first_name = \"Rania\",            last_name = \"Montecillo\") |>    gt::gt() |>    gt::cols_label_with(     fn = ~ janitor::make_clean_names(., case = \"title\")) |>    gtExtras::gt_theme_espn()"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"you-need-to-find-detailed-healthcare-provider-information-using-known-npi-number","dir":"Articles","previous_headings":"","what":"You Need to Find Detailed Healthcare Provider Information Using Known NPI Number","title":"Overview of Provider","text":"common scenario. need get full replica NPI record. , simple. Just use code provided . API response may contain single NPI record, empty list case NPI exist CMS National Plan Provider Enumeration System (NPPES) Registry.","code":"nppes_npi(npi = 1285636522) #> # A tibble: 1 × 14 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1285… NPI-2            2005-06-01       565747200s (~17.93 years) 2022-07-21   #> # ℹ 9 more variables: status <chr>, organization_name <chr>, #> #   organizational_subpart <chr>, country <chr>, street <chr>, city <chr>, #> #   state <chr>, zipcode <chr>, phone_number <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"you-need-to-lookup-multiple-healthcare-providers-using-a-list-of-npi-numbers","dir":"Articles","previous_headings":"","what":"You Need to Lookup Multiple Healthcare Providers Using A List of NPI Numbers","title":"Overview of Provider","text":"may need perform bulk search performance optimization. “getcodes” operation allows decrease number round trips orders magnitude. instance can get information hundred NPI one REST call, instead sending NPI numbers one--one.","code":"c(1285636522, 1730198755, 1427145176) |>    purrr::map(nppes_npi) |>    purrr::list_rbind()  #> # A tibble: 3 × 15 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1285… NPI-2            2005-06-01       565747200s (~17.93 years) 2022-07-21   #> 2 1730… NPI-2            2006-08-07       528422400s (~16.74 years) 2010-03-12   #> 3 1427… NPI-2            2006-10-06       523238400s (~16.58 years) 2012-10-09   #> # ℹ 10 more variables: status <chr>, organization_name <chr>, #> #   organizational_subpart <chr>, country <chr>, street <chr>, city <chr>, #> #   state <chr>, zipcode <chr>, phone_number <chr>, fax_number <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"you-need-to-check-npi-number-status","dir":"Articles","previous_headings":"","what":"You Need to Check NPI Number Status","title":"Overview of Provider","text":", common scenario. just need check NPI number status. simple. Take look code . Expected result contains requested NPI number, status, short status description.","code":"nppes_npi(npi = 1285636522) |>    dplyr::select(npi, status) #> # A tibble: 1 × 2 #>   npi        status #>   <chr>      <chr>  #> 1 1285636522 A"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"medicare-order-and-referring-api","dir":"Articles","previous_headings":"","what":"Medicare Order and Referring API","title":"Overview of Provider","text":"provider currently eligible make referrals Medicare Part B Home Health Agency (HHA)? Order Durable Medical Equipment (DME) Power Mobility Devices (PMDs)? Search Medicare’s Order Referring API provider_moar():","code":"order_refer(npi = 1083879860) |>    gt::gt() |>    gt::tab_header(title = \"Medicare Order and Referring API\") |>    gt::text_transform(     locations = gt::cells_body(columns = c(partb, dme, hha, pmd)),     fn = function(x) {if (x == as.character(\"TRUE\"))        {gt::html(fontawesome::fa(\"circle-check\",                                  prefer_type = \"solid\",                                  fill = \"green\", height = \"1.5em\", width = \"1.5em\"))       } else if (x == as.character(\"FALSE\"))        {gt::html(fontawesome::fa(\"circle-xmark\",                                    prefer_type = \"solid\",                                  fill = \"red\"))}})"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"medicare-provider-and-supplier-taxonomy-crosswalk-api","dir":"Articles","previous_headings":"","what":"Medicare Provider and Supplier Taxonomy Crosswalk API","title":"Overview of Provider","text":"may need find Medicare’s specialty codes provider’s taxonomies. Using output NPPES search first example, can search Medicare’s Provider Supplier Taxonomy Crosswalk API taxonomy_crosswalk():   Providers may need update digital contact information NPPES system. check, can access CMS Public Reporting Missing Digital Contact Information API missing_information(). appear search results, ’s time update NPPES contact information:    Using physician_by_service(), can access Medicare’s Physician & Practitioners - Provider Service API:   API contains data going back 2013, can perform long-term analysis provider’s Medicare data:  Using packages like {gt} & {ggplot2}, can create tables graphs reporting purposes:","code":"taxonomy_crosswalk(taxonomy_code = \"282NC0060X\") |> terse::terse() #> $taxonomy_code  c1 282NC0060X                                            #> $taxonomy_desc  c1 Hospitals/General Acute Care Hospital Critical Access #> $specialty_code c1 A0[7]                                                 #> $specialty_desc c1 Critical Access Hospital missing_information(npi = 1114058443) |> terse::terse() #> $npi        c1 1114058443 #> $last_name  c1 Smith      #> $first_name c1 David opt_out(npi = 1114058443) |> terse::terse() #> $npi               c1 1114058443             #> $first_name        c1 David                  #> $last_name         c1 Smith                  #> $specialty         c1 Psychiatry             #> $optout_start_date D1 2014-08-15             #> $optout_end_date   D1 2024-08-15             #> $optout_duration   d1 315619200s (~10 years) #> $last_updated      D1 2023-03-16             #> $order_and_refer   l1 T                      #> $address           c1 3101 STELLING DR       #> $city              c1 PALO ALTO              #> $state             c1 CA                     #> $zipcode           c1 943033960 purrr::map_dfr(2013:2020, ~physician_by_service(npi = 1003000126, year = .x)) |> terse::terse() #> $year         i78 2013                                                      ... #> $npi          c78 1003000126                                                ... #> $enum_type    c78 I                                                         ... #> $first_name   c78 Ardalan                                                   ... #> $middle_name  c78 NA                                                        ... #> $last_name    c78 Enkeshafi                                                 ... #> $credential   c78 MD                                                        ... #> $gender       c78 M                                                         ... #> $specialty    c78 Internal Medicine                                         ... #> $street       c78 900 Seton Dr                                              ... #> $city         c78 Cumberland                                                ... #> $state        c78 MD                                                        ... #> $fips         c78 24                                                        ... #> $zipcode      c78 21502                                                     ... #> $ruca         c78 1                                                         ... #> $ruca_desc    c78 Metropolitan area core: primary flow within an urbanized  ... #> $country      c78 US                                                        ... #> $par          c78 Y                                                         ... #> $hcpcs_cd     c78 99222                                                     ... #> $hcpcs_desc   c78 Initial hospital inpatient care, typically 50 minutes per ... #> $hcpcs_drug   c78 N                                                         ... #> $pos          c78 F                                                         ... #> $tot_benes    i78 138                                                       ... #> $tot_srvcs    i78 142                                                       ... #> $tot_day      i78 142                                                       ... #> $avg_charge   d78 368.62676                                                 ... #> $avg_allowed  d78 132.17007                                                 ... #> $avg_payment  d78 104.29972                                                 ... #> $avg_std_pymt d78 107.21113                                                 ... purrr::map_dfr(2013:2020, ~physician_by_service(npi = 1003000126, year = .x)) |>    dplyr::group_by(hcpcs_cd, hcpcs_desc) |>    dplyr::summarise(     Beneficiaries = sum(tot_benes),     Services = sum(tot_srvcs),     Avg_Billed = janitor::round_half_up(mean(avg_sbmtd_chrg), digits = 2),     Avg_Allowed = janitor::round_half_up(mean(avg_mdcr_alowd_amt), digits = 2),     Avg_Payment = janitor::round_half_up(mean(avg_mdcr_pymt_amt), digits = 2)) |>    dplyr::ungroup() |>    dplyr::rename(HCPCS = hcpcs_cd,                  Description = hcpcs_desc,                 \"Avg Charge\" = Avg_Billed,                 \"Avg Allowed\" = Avg_Allowed,                 \"Avg Payment\" = Avg_Payment) |>    dplyr::arrange(dplyr::desc(Services)) |>    gt::gt() |>    gtExtras::gt_add_divider(columns = \"HCPCS\", style = \"dotted\") |>    gtExtras::gt_merge_stack(col1 = HCPCS,                             col2 = Description,                            small_cap = FALSE,                            font_size = c(\"16px\", \"14px\"),                            font_weight = c(\"bold\", \"normal\"),                            palette = c(\"black\", \"darkgray\")) |>    gt::tab_style(style = list(gt::cell_fill(color = \"#F54444\"),                               gt::cell_text(color = \"white\",                                             weight = \"bold\")),                  locations = gt::cells_row_groups()) |>    provider:::gt_theme_provider() |>    gt::tab_header(title = \"Provider Results for NPI 1114058443\",   subtitle = gtExtras::add_text_img(\"Report generated with\",    url = \"https://raw.githubusercontent.com/andrewallenbruce/provider/main/pkgdown/favicon/apple-touch-icon-180x180.png\",    height = 25)) #> Error in `dplyr::summarise()`: #> ℹ In argument: `Avg_Billed = #>   janitor::round_half_up(mean(avg_sbmtd_chrg), digits = 2)`. #> ℹ In group 1: `hcpcs_cd = \"99217\"`, `hcpcs_desc = \"Hospital observation care #>   discharge\"`. #> Caused by error: #> ! object 'avg_sbmtd_chrg' not found"},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2023). provider: Access Public Healthcare Provider Data. https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider.","code":"@Manual{,   title = {provider: Access Public Healthcare Provider Data},   author = {Andrew Bruce},   year = {2023},   note = {https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider}, }"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"provider-","dir":"","previous_headings":"","what":"Access Public Healthcare Provider Data","title":"Access Public Healthcare Provider Data","text":"Providing easy access healthcare provider-centric data publicly available APIs & sources.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access Public Healthcare Provider Data","text":"can install development version provider GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"andrewallenbruce/provider\") # install.packages(\"remotes\") remotes::install_github(\"andrewallenbruce/provider\")"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Access Public Healthcare Provider Data","text":"goal provider make experience accessing publicly-available Medicare provider data easier consistent across variety CMS sources.","code":"library(provider)"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"beneficiary-enrollment","dir":"","previous_headings":"Motivation","what":"Beneficiary Enrollment","title":"Access Public Healthcare Provider Data","text":"","code":"beneficiary_enrollment(year = 2021, month = \"Year\", level = \"State\", fips = \"01\") #> # A tibble: 1 × 26 #>    year month level state state_name county fips  bene_total bene_orig #>   <int> <chr> <chr> <chr> <chr>      <chr>  <chr>      <int>     <int> #> 1  2021 Year  State AL    Alabama    Total  01       1070474    528983 #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(month = \"Year\", level = \"County\", state = \"AL\", county = \"Autauga\") #> # A tibble: 10 × 26 #>     year month level  state state_name county  fips  bene_total bene_orig #>    <int> <chr> <chr>  <chr> <chr>      <chr>   <chr>      <int>     <int> #>  1  2013 Year  County AL    Alabama    Autauga 01001       9323      6484 #>  2  2014 Year  County AL    Alabama    Autauga 01001       9589      6565 #>  3  2015 Year  County AL    Alabama    Autauga 01001       9938      6711 #>  4  2016 Year  County AL    Alabama    Autauga 01001      10214      6799 #>  5  2017 Year  County AL    Alabama    Autauga 01001      10510      5784 #>  6  2018 Year  County AL    Alabama    Autauga 01001      10645      5700 #>  7  2019 Year  County AL    Alabama    Autauga 01001      11059      5761 #>  8  2020 Year  County AL    Alabama    Autauga 01001      11251      5596 #>  9  2021 Year  County AL    Alabama    Autauga 01001      11396      5338 #> 10  2022 Year  County AL    Alabama    Autauga 01001      11578      5186 #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int> beneficiary_enrollment(year = 2017, level = \"County\", state = \"GA\") |>    dplyr::filter(month %in% month.name) #> # A tibble: 1,908 × 26 #>     year month   level  state state_name county   fips  bene_total bene_orig #>    <int> <chr>   <chr>  <chr> <chr>      <chr>    <chr>      <int>     <int> #>  1  2017 January County GA    Georgia    Appling  13001       3671      2561 #>  2  2017 January County GA    Georgia    Atkinson 13003       1351       929 #>  3  2017 January County GA    Georgia    Bacon    13005       2121      1470 #>  4  2017 January County GA    Georgia    Baker    13007        655       447 #>  5  2017 January County GA    Georgia    Baldwin  13009       8372      4729 #>  6  2017 January County GA    Georgia    Banks    13011       3581      2360 #>  7  2017 January County GA    Georgia    Barrow   13013      11613      7251 #>  8  2017 January County GA    Georgia    Bartow   13015      17429     11632 #>  9  2017 January County GA    Georgia    Ben Hill 13017       3623      2452 #> 10  2017 January County GA    Georgia    Berrien  13019       3723      2617 #> # ℹ 1,898 more rows #> # ℹ 17 more variables: bene_ma_oth <int>, bene_aged_total <int>, #> #   bene_aged_esrd <int>, bene_aged_no_esrd <int>, bene_dsb_total <int>, #> #   bene_dsb_esrd <int>, bene_dsb_no_esrd <int>, bene_ab_total <int>, #> #   bene_ab_orig <int>, bene_ab_ma_oth <int>, bene_rx_total <int>, #> #   bene_rx_pdp <int>, bene_rx_mapd <int>, bene_rx_elig <int>, #> #   bene_rx_full <int>, bene_rx_part <int>, bene_rx_none <int>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"chronic-conditions","dir":"","previous_headings":"Motivation","what":"Chronic Conditions","title":"Access Public Healthcare Provider Data","text":"","code":"# Multiple Chronic Conditions cc_multiple(year = 2018, level = \"National\", age_group = \"All\", demographic = \"All\") #> # A tibble: 4 × 13 #>    year level    sublevel fips  age_group demographic subdemo mcc     prevalence #>   <int> <chr>    <chr>    <chr> <chr>     <chr>       <chr>   <ord>        <dbl> #> 1  2018 National National <NA>  All       All         All     [0,1]        0.311 #> 2  2018 National National <NA>  All       All         All     [2,3]        0.291 #> 3  2018 National National <NA>  All       All         All     [4,5]        0.221 #> 4  2018 National National <NA>  All       All         All     [6, In…      0.177 #> # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #> #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl> cc_multiple(year = 2018, level = \"State\", sublevel = \"Alabama\", age_group = \"All\", demographic = \"All\") #> # A tibble: 4 × 13 #>    year level sublevel fips  age_group demographic subdemo mcc      prevalence #>   <int> <chr> <chr>    <chr> <chr>     <chr>       <chr>   <ord>         <dbl> #> 1  2018 State Alabama  01    All       All         All     [0,1]         0.258 #> 2  2018 State Alabama  01    All       All         All     [2,3]         0.285 #> 3  2018 State Alabama  01    All       All         All     [4,5]         0.250 #> 4  2018 State Alabama  01    All       All         All     [6, Inf)      0.207 #> # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #> #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl> cc_multiple(year = 2018, level = \"County\", sublevel = \"Alabama : Autauga\", fips = \"01001\", age_group = \"All\", demographic = \"All\") #> # A tibble: 4 × 13 #>    year level  sublevel     fips  age_group demographic subdemo mcc   prevalence #>   <int> <chr>  <chr>        <chr> <chr>     <chr>       <chr>   <ord>      <dbl> #> 1  2018 County Alabama : A… 01001 All       All         All     [0,1]      0.266 #> 2  2018 County Alabama : A… 01001 All       All         All     [2,3]      0.281 #> 3  2018 County Alabama : A… 01001 All       All         All     [4,5]      0.248 #> 4  2018 County Alabama : A… 01001 All       All         All     [6, …      0.205 #> # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #> #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl> # Specific Chronic Conditions cc_specific(year = 2018, level = \"State\", sublevel = \"California\", demographic = \"All\") #> # A tibble: 63 × 13 #>     year level sublevel fips  age_group demographic subdemo condition prevalence #>    <int> <chr> <chr>    <chr> <chr>     <chr>       <chr>   <chr>          <dbl> #>  1  2018 State Califor… 06    All       All         All     Alcohol …     0.0215 #>  2  2018 State Califor… 06    All       All         All     Alzheime…     0.105  #>  3  2018 State Califor… 06    All       All         All     Arthritis     0.312  #>  4  2018 State Califor… 06    All       All         All     Asthma        0.053  #>  5  2018 State Califor… 06    All       All         All     Atrial F…     0.0749 #>  6  2018 State Califor… 06    All       All         All     Autism S…     0.0022 #>  7  2018 State Califor… 06    All       All         All     COPD          0.0952 #>  8  2018 State Califor… 06    All       All         All     Cancer        0.0784 #>  9  2018 State Califor… 06    All       All         All     Chronic …     0.243  #> 10  2018 State Califor… 06    All       All         All     Depressi…     0.162  #> # ℹ 53 more rows #> # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #> #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl> cc_specific(year = 2011, level = \"County\", fips = \"01001\") #> # A tibble: 63 × 13 #>     year level sublevel fips  age_group demographic subdemo condition prevalence #>    <int> <chr> <chr>    <chr> <chr>     <chr>       <chr>   <chr>          <dbl> #>  1  2011 Coun… Alabama… 01001 All       All         All     Alcohol …     0.0116 #>  2  2011 Coun… Alabama… 01001 All       All         All     Alzheime…     0.100  #>  3  2011 Coun… Alabama… 01001 All       All         All     Arthritis     0.274  #>  4  2011 Coun… Alabama… 01001 All       All         All     Asthma        0.037  #>  5  2011 Coun… Alabama… 01001 All       All         All     Atrial F…     0.0748 #>  6  2011 Coun… Alabama… 01001 All       All         All     Autism S…    NA      #>  7  2011 Coun… Alabama… 01001 All       All         All     COPD          0.122  #>  8  2011 Coun… Alabama… 01001 All       All         All     Cancer        0.0792 #>  9  2011 Coun… Alabama… 01001 All       All         All     Chronic …     0.137  #> 10  2011 Coun… Alabama… 01001 All       All         All     Depressi…     0.134  #> # ℹ 53 more rows #> # ℹ 4 more variables: tot_std_pymt_percap <dbl>, tot_pymt_percap <dbl>, #> #   hosp_readmsn_rate <dbl>, er_visits_per_1k <dbl>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"doctors-and-clinicians","dir":"","previous_headings":"Motivation","what":"Doctors and Clinicians","title":"Access Public Healthcare Provider Data","text":"","code":"doctors_and_clinicians(npi = 1720081441) #> ✖ No results for npi: 1720081441 doctors_and_clinicians(npi = 1407263999) #> # A tibble: 2 × 25 #>   npi        pac_id     enroll_id first_name middle_name last_name suffix gender #>   <chr>      <chr>      <chr>     <chr>      <chr>       <chr>     <chr>  <chr>  #> 1 1407263999 8729208152 I2014100… ROBIN      A           AVERY     <NA>   F      #> 2 1407263999 8729208152 I2014100… ROBIN      A           AVERY     <NA>   F      #> # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #> #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #> #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #> #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone_number <chr>, #> #   ind_assign <chr>, group_assign <chr> doctors_and_clinicians(school = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\",                         grad_year = 2000,                         state = \"FL\") #> # A tibble: 68 × 25 #>    npi        pac_id    enroll_id first_name middle_name last_name suffix gender #>    <chr>      <chr>     <chr>     <chr>      <chr>       <chr>     <chr>  <chr>  #>  1 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F      #>  2 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F      #>  3 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F      #>  4 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F      #>  5 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F      #>  6 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F      #>  7 1043312556 83250900… I2010011… NICOLE     <NA>        IOVINE    <NA>   F      #>  8 1073549895 24664809… I2007112… ALAN       B           BENNIE    <NA>   M      #>  9 1073549895 24664809… I2007112… ALAN       B           BENNIE    <NA>   M      #> 10 1073575403 86280744… I2006101… DANIEL     J           GASSERT   <NA>   M      #> # ℹ 58 more rows #> # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #> #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #> #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #> #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone_number <chr>, #> #   ind_assign <chr>, group_assign <chr> doctors_and_clinicians(state = \"GA\", city = \"VALDOSTA\") #> # A tibble: 500 × 25 #>    npi        pac_id    enroll_id first_name middle_name last_name suffix gender #>    <chr>      <chr>     <chr>     <chr>      <chr>       <chr>     <chr>  <chr>  #>  1 1003038720 06483608… I2007121… BARBARA    F           FRIER     <NA>   F      #>  2 1003125238 12545244… I2015110… JEREMY     STEPHEN     COLYER    <NA>   M      #>  3 1003125238 12545244… I2015110… JEREMY     STEPHEN     COLYER    <NA>   M      #>  4 1003198268 18505427… I2012112… COLE       <NA>        BURGESS   <NA>   M      #>  5 1003287533 60021732… I2017112… KACIE      PARRISH     JOHNSON   <NA>   F      #>  6 1003315227 73153412… I2021081… WILLIAM    <NA>        HARTLEY   <NA>   M      #>  7 1003445297 17597708… I2021111… VICKI      <NA>        WETTER    <NA>   F      #>  8 1003816935 06483969… I2010092… MARY       <NA>        FULP-PYE  <NA>   F      #>  9 1013250612 21636573… I2013102… HEATH      <NA>        FARMER    <NA>   M      #> 10 1013250612 21636573… I2013102… HEATH      <NA>        FARMER    <NA>   M      #> # ℹ 490 more rows #> # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #> #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #> #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #> #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone_number <chr>, #> #   ind_assign <chr>, group_assign <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"facility-affiliations","dir":"","previous_headings":"Motivation","what":"Facility Affiliations","title":"Access Public Healthcare Provider Data","text":"","code":"facility_affiliations(npi = 1003019561) #> ✖ No results for npi: 1003019561 facility_affiliations(facility_ccn = \"060004\") #> # A tibble: 188 × 9 #>    npi        pac_id     first_name middle_name last_name   suffix facility_type #>    <chr>      <chr>      <chr>      <chr>       <chr>       <chr>  <chr>         #>  1 1003002890 6002953973 DANIEL     RICHARD     HAMMAN      <NA>   Hospital      #>  2 1003019563 4688707060 JOHN       JOSEPH      FRANK       <NA>   Hospital      #>  3 1003045022 5890926059 ARTHUR     H           DONAHUE     <NA>   Hospital      #>  4 1003105636 6507182847 JAMES      CHARLES     HIGHAM KES… <NA>   Hospital      #>  5 1003234162 4284940248 MATTHEW    <NA>        MCDIARMID   <NA>   Hospital      #>  6 1003845249 1254326994 GARETH     R           WEINER      <NA>   Hospital      #>  7 1013069566 7810096328 AMITY      D           HELZER      <NA>   Hospital      #>  8 1013115989 4385891712 ASHLEY     L           PYLE        <NA>   Hospital      #>  9 1013979566 1557374014 FIRAS      <NA>        MUWALLA     <NA>   Hospital      #> 10 1023261963 2860687431 CHAD       MICHAEL     LUCCI       <NA>   Hospital      #> # ℹ 178 more rows #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(parent_ccn = 670055) #> # A tibble: 9 × 9 #>   npi        pac_id     first_name middle_name last_name  suffix facility_type   #>   <chr>      <chr>      <chr>      <chr>       <chr>      <chr>  <chr>           #> 1 1083742829 5698833655 RAFAEL     JORGE       FORNARIS   <NA>   Inpatient reha… #> 2 1144429580 3577659580 LYSA       LEE         CURRY      <NA>   Inpatient reha… #> 3 1558595660 8921241142 JOHN       D           ALFONSO    <NA>   Inpatient reha… #> 4 1609973650 0840373239 GEORGE     KIMBELL     WILCOX     <NA>   Inpatient reha… #> 5 1710112370 9739337122 VIDYA      <NA>        VADDEMPUDI <NA>   Inpatient reha… #> 6 1720069859 7012947229 WILLIAM    WARREN      JANES      <NA>   Inpatient reha… #> 7 1740577212 0345473773 GEOFF      R           WEIKLE     <NA>   Inpatient reha… #> 8 1770861742 5193940997 AUSTON     J           MYERS      <NA>   Inpatient reha… #> 9 1912260464 5092036509 SAAD       MD          MANSOOR    <NA>   Inpatient reha… #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(first_name = \"John\", last_name = \"Hill\", facility_type = \"Home Health Agency\") #> # A tibble: 7 × 9 #>   npi        pac_id     first_name middle_name last_name suffix facility_type    #>   <chr>      <chr>      <chr>      <chr>       <chr>     <chr>  <chr>            #> 1 1174587588 7214998079 JOHN       C           HILL      III    Home health age… #> 2 1174587588 7214998079 JOHN       C           HILL      III    Home health age… #> 3 1174587588 7214998079 JOHN       C           HILL      III    Home health age… #> 4 1558380444 4789619362 JOHN       M           HILL      <NA>   Home health age… #> 5 1558380444 4789619362 JOHN       M           HILL      <NA>   Home health age… #> 6 1558380444 4789619362 JOHN       M           HILL      <NA>   Home health age… #> 7 1558380444 4789619362 JOHN       M           HILL      <NA>   Home health age… #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"hospital-enrollments","dir":"","previous_headings":"Motivation","what":"Hospital Enrollments","title":"Access Public Healthcare Provider Data","text":"","code":"hospital_enrollment(facility_ccn = \"060004\") #> # A tibble: 1 × 36 #>   npi        enroll_id   enroll_state specialty_code specialty_desc facility_ccn #>   <chr>      <chr>       <chr>        <chr>          <chr>          <chr>        #> 1 1629071758 O200706190… CO           00-09          PART A PROVID… 060004       #> # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #> #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #> #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #> #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #> #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #> #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, #> #   sg_childrens <lgl>, sg_long_term <lgl>, sg_short_term <lgl>, … hospital_enrollment(state = \"GA\", city = \"VALDOSTA\") #> # A tibble: 3 × 36 #>   npi        enroll_id   enroll_state specialty_code specialty_desc facility_ccn #>   <chr>      <chr>       <chr>        <chr>          <chr>          <chr>        #> 1 1306896253 O200803120… GA           00-09          PART A PROVID… 110122       #> 2 1467404046 O200803130… GA           00-09          PART A PROVID… 11T122       #> 3 1538417753 O201212130… GA           00-09          PART A PROVID… 114036       #> # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #> #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #> #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #> #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #> #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #> #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, #> #   sg_childrens <lgl>, sg_long_term <lgl>, sg_short_term <lgl>, … hospital_enrollment(enroll_state = \"GA\") #> # A tibble: 216 × 36 #>    npi        enroll_id  enroll_state specialty_code specialty_desc facility_ccn #>    <chr>      <chr>      <chr>        <chr>          <chr>          <chr>        #>  1 1588664007 O20020826… GA           00-09          PART A PROVID… 112011       #>  2 1376574277 O20021108… GA           00-09          PART A PROVID… 110005       #>  3 1912951963 O20030515… GA           00-09          PART A PROVID… 110177       #>  4 1063406684 O20030925… GA           00-09          PART A PROVID… 110043       #>  5 1447252044 O20040406… GA           00-09          PART A PROVID… 112016       #>  6 1679543672 O20040513… GA           00-09          PART A PROVID… 114008       #>  7 1508810565 O20040823… GA           00-09          PART A PROVID… 110168       #>  8 1922178789 O20041013… GA           00-09          PART A PROVID… 113301       #>  9 1194722389 O20041103… GA           00-09          PART A PROVID… 112013       #> 10 1811940976 O20041109… GA           00-09          PART A PROVID… 110201       #> # ℹ 206 more rows #> # ℹ 30 more variables: pac_id_org <chr>, org_name <chr>, #> #   doing_business_as <chr>, incorp_date <date>, incorp_duration <Duration>, #> #   incorp_state <chr>, org_structure <chr>, org_other <chr>, address <chr>, #> #   city <chr>, state <chr>, zipcode <int>, location_type <chr>, #> #   location_other <chr>, multiple_npis <lgl>, proprietary_nonprofit <lgl>, #> #   sg_general <lgl>, sg_acute_care <lgl>, sg_alcohol_drug <lgl>, … hospital_enrollment(enroll_id = \"O20030404000017\") #> ✖ No results for enroll_id: O20030404000017"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"missing-contact-information","dir":"","previous_headings":"Motivation","what":"Missing Contact Information","title":"Access Public Healthcare Provider Data","text":"","code":"missing_information(npi = 1144224569) #> # A tibble: 1 × 3 #>   npi        last_name first_name #>   <chr>      <chr>     <chr>      #> 1 1144224569 Clouse    John missing_information(npi = 11111122222) #> ✖ No results for npi: 11111122222"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"npi-registry","dir":"","previous_headings":"Motivation","what":"NPI Registry","title":"Access Public Healthcare Provider Data","text":"","code":"nppes_npi(npi = 1316405939) #> # A tibble: 1 × 20 #>   npi    enumeration_type enumeration_date enumeration_duration     last_updated #>   <chr>  <chr>            <date>           <Duration>               <date>       #> 1 13164… NPI-1            2019-03-04       131673600s (~4.17 years) 2023-04-06   #> # ℹ 15 more variables: certification_date <date>, status <chr>, #> #   first_name <chr>, middle_name <chr>, last_name <chr>, credential <chr>, #> #   gender <chr>, sole_proprietor <chr>, country <chr>, street <chr>, #> #   city <chr>, state <chr>, zipcode <chr>, phone_number <chr>, #> #   fax_number <chr> nppes_npi(npi = 1558364273) #> # A tibble: 1 × 19 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1558… NPI-1            2005-05-27       566179200s (~17.94 years) 2007-07-08   #> # ℹ 14 more variables: status <chr>, first_name <chr>, middle_name <chr>, #> #   last_name <chr>, credential <chr>, gender <chr>, sole_proprietor <chr>, #> #   country <chr>, street <chr>, city <chr>, state <chr>, zipcode <chr>, #> #   phone_number <chr>, fax_number <chr> nppes_npi(1720081441) #> # A tibble: 1 × 19 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1720… NPI-1            2005-05-27       566179200s (~17.94 years) 2007-07-08   #> # ℹ 14 more variables: status <chr>, first_name <chr>, middle_name <chr>, #> #   last_name <chr>, credential <chr>, gender <chr>, sole_proprietor <chr>, #> #   country <chr>, street <chr>, city <chr>, state <chr>, zipcode <chr>, #> #   phone_number <chr>, fax_number <chr> nppes_npi(1710983663) #> ✖ No results for npi: 1710983663 c(1710983663, 1710975040, 1659781227,    1336413418, 1003026055, 1316405939,    1720392988, 1518184605, 1922056829,    1083879860, 1346243805, 1679576722,    1093718892, 1477556405, 1770586539,    1871596692, 1174526925, 1720081441,    1558364273, 1801899513, 1316405939) |>    purrr::map(nppes_npi) |>   purrr::list_rbind() #> ✖ No results for npi: 1710983663  #> ✖ No results for npi: 1659781227  #> # A tibble: 19 × 22 #>    npi        enumeration_type enumeration_date enumeration_duration      #>    <chr>      <chr>            <date>           <Duration>                #>  1 1710975040 NPI-1            2005-10-11       554342400s (~17.57 years) #>  2 1336413418 NPI-2            2012-03-07       352252800s (~11.16 years) #>  3 1003026055 NPI-1            2007-05-22       503539200s (~15.96 years) #>  4 1316405939 NPI-1            2019-03-04       131673600s (~4.17 years)  #>  5 1720392988 NPI-1            2010-07-29       402969600s (~12.77 years) #>  6 1518184605 NPI-1            2007-04-19       506390400s (~16.05 years) #>  7 1922056829 NPI-1            2006-05-04       536630400s (~17 years)    #>  8 1083879860 NPI-1            2008-07-22       466646400s (~14.79 years) #>  9 1346243805 NPI-1            2005-05-27       566179200s (~17.94 years) #> 10 1679576722 NPI-1            2005-05-23       566524800s (~17.95 years) #> 11 1093718892 NPI-1            2005-05-24       566438400s (~17.95 years) #> 12 1477556405 NPI-1            2005-05-23       566524800s (~17.95 years) #> 13 1770586539 NPI-1            2005-05-24       566438400s (~17.95 years) #> 14 1871596692 NPI-1            2005-05-24       566438400s (~17.95 years) #> 15 1174526925 NPI-1            2005-05-24       566438400s (~17.95 years) #> 16 1720081441 NPI-1            2005-05-27       566179200s (~17.94 years) #> 17 1558364273 NPI-1            2005-05-27       566179200s (~17.94 years) #> 18 1801899513 NPI-1            2005-05-27       566179200s (~17.94 years) #> 19 1316405939 NPI-1            2019-03-04       131673600s (~4.17 years)  #> # ℹ 18 more variables: last_updated <date>, status <chr>, first_name <chr>, #> #   middle_name <chr>, last_name <chr>, credential <chr>, gender <chr>, #> #   sole_proprietor <chr>, country <chr>, street <chr>, city <chr>, #> #   state <chr>, zipcode <chr>, phone_number <chr>, fax_number <chr>, #> #   certification_date <date>, organization_name <chr>, #> #   organizational_subpart <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"open-payments","dir":"","previous_headings":"Motivation","what":"Open Payments","title":"Access Public Healthcare Provider Data","text":"","code":"open_payments(recipient_npi = 1043218118) #> # A tibble: 92 × 52 #>    program_year record_number change_type covered_recipient_type      #>    <chr>        <chr>         <chr>       <chr>                       #>  1 2021         1             UNCHANGED   Covered Recipient Physician #>  2 2021         692021        UNCHANGED   Covered Recipient Physician #>  3 2021         4385936       UNCHANGED   Covered Recipient Physician #>  4 2021         4385946       UNCHANGED   Covered Recipient Physician #>  5 2021         4385951       UNCHANGED   Covered Recipient Physician #>  6 2021         4385956       UNCHANGED   Covered Recipient Physician #>  7 2021         4579206       UNCHANGED   Covered Recipient Physician #>  8 2021         4579226       UNCHANGED   Covered Recipient Physician #>  9 2021         4624246       UNCHANGED   Covered Recipient Physician #> 10 2021         4766366       UNCHANGED   Covered Recipient Physician #> # ℹ 82 more rows #> # ℹ 48 more variables: covered_recipient_profile_id <chr>, #> #   covered_recipient_npi <chr>, covered_recipient_first_name <chr>, #> #   covered_recipient_last_name <chr>, #> #   recipient_primary_business_street_address_line1 <chr>, #> #   recipient_city <chr>, recipient_state <chr>, recipient_zip_code <chr>, #> #   recipient_country <chr>, covered_recipient_primary_type_1 <chr>, …"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"opt-out-affidavits","dir":"","previous_headings":"Motivation","what":"Opt-Out Affidavits","title":"Access Public Healthcare Provider Data","text":"","code":"opt_out(first_name = \"David\", last_name = \"Smith\") #> # A tibble: 6 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1649265760 David      Smith     Maxillofaci… 2012-06-25        2024-06-25      #> 2 1750565958 David      Smith     Oral Surgery 2013-05-07        2023-05-07      #> 3 1114058443 David      Smith     Psychiatry   2014-08-15        2024-08-15      #> 4 1023002375 David      Smith     Obstetrics/… 2012-10-01        2024-10-01      #> 5 1790853307 David      Smith     Oral Surgery 2015-03-26        2025-03-26      #> 6 1659300077 David      Smith     Dentist      2015-05-26        2023-05-26      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(specialty = \"Psychiatry\", city = \"BROOKLYN\", state = \"NY\", order_and_refer = FALSE) #> # A tibble: 4 × 13 #>   npi        first_name last_name specialty  optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>      <date>            <date>          #> 1 1538251731 Robert     Katz      Psychiatry 2021-10-01        2023-10-01      #> 2 1114239761 Adriel     Gerard    Psychiatry 2019-12-30        2023-12-30      #> 3 1740635804 Joseph     Mouallem  Psychiatry 2020-07-22        2024-07-22      #> 4 1932442191 Cecilia    Lipira    Psychiatry 2020-08-14        2024-08-14      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr> opt_out(specialty = \"Tsychiatry\") #> ✖ No results for specialty: Tsychiatry opt_out(city = \"VALDOSTA\", state = \"GA\") #> # A tibble: 3 × 13 #>   npi        first_name last_name specialty    optout_start_date optout_end_date #>   <chr>      <chr>      <chr>     <chr>        <date>            <date>          #> 1 1992848659 Jeffery    Wood      Maxillofaci… 2016-01-11        2024-01-11      #> 2 1073632659 Fernando   Alvarado  Oral Surgery 2017-07-01        2023-07-01      #> 3 1811005655 Sonya      Merriman  Plastic And… 2022-01-01        2024-01-01      #> # ℹ 7 more variables: optout_duration <Duration>, last_updated <date>, #> #   order_and_refer <lgl>, address <chr>, city <chr>, state <chr>, #> #   zipcode <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"order-and-referring-privileges","dir":"","previous_headings":"Motivation","what":"Order and Referring Privileges","title":"Access Public Healthcare Provider Data","text":"","code":"order_refer(npi = 1083879860) #> # A tibble: 1 × 7 #>   npi        first_name  last_name partb hha   dme   pmd   #>   <chr>      <chr>       <chr>     <lgl> <lgl> <lgl> <lgl> #> 1 1083879860 CHRISTOPHER AARON     TRUE  TRUE  TRUE  TRUE order_refer(last_name = \"Smith\", partb = FALSE, pmd = FALSE) #> # A tibble: 148 × 7 #>    npi        first_name last_name partb hha   dme   pmd   #>    <chr>      <chr>      <chr>     <lgl> <lgl> <lgl> <lgl> #>  1 1063535672 AARON      SMITH     FALSE FALSE TRUE  FALSE #>  2 1891210431 ALAINA     SMITH     FALSE FALSE TRUE  FALSE #>  3 1962830570 ALESHA     SMITH     FALSE FALSE TRUE  FALSE #>  4 1922655521 ALLISON    SMITH     FALSE FALSE TRUE  FALSE #>  5 1942778188 ALYSSA     SMITH     FALSE FALSE TRUE  FALSE #>  6 1467902791 AMANDA     SMITH     FALSE FALSE TRUE  FALSE #>  7 1992203582 AMANDA     SMITH     FALSE FALSE TRUE  FALSE #>  8 1023475761 AMY        SMITH     FALSE FALSE TRUE  FALSE #>  9 1609219773 AMY        SMITH     FALSE FALSE TRUE  FALSE #> 10 1659973295 ANDREW     SMITH     FALSE FALSE TRUE  FALSE #> # ℹ 138 more rows"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"pending-applications","dir":"","previous_headings":"Motivation","what":"Pending Applications","title":"Access Public Healthcare Provider Data","text":"","code":"pending_applications(last_name = \"Smith\", type = \"non-physician\") #> # A tibble: 24 × 4 #>    npi        last_name first_name type          #>    <chr>      <chr>     <chr>      <chr>         #>  1 1518672245 SMITH     ALEXANDRA  NON-PHYSICIAN #>  2 1700588621 SMITH     AMANDA     NON-PHYSICIAN #>  3 1073234282 SMITH     ANGELA     NON-PHYSICIAN #>  4 1790408185 SMITH     ARIELLE    NON-PHYSICIAN #>  5 1801992912 SMITH     BRIDGET    NON-PHYSICIAN #>  6 1558504688 SMITH     BRITTANY   NON-PHYSICIAN #>  7 1679235717 SMITH     BRITTNEY   NON-PHYSICIAN #>  8 1639635030 SMITH     COURTNEY   NON-PHYSICIAN #>  9 1043925035 SMITH     FULGENTIA  NON-PHYSICIAN #> 10 1902527641 SMITH     HEATHER    NON-PHYSICIAN #> # ℹ 14 more rows pending_applications(first_name = \"John\", type = \"physician\") #> # A tibble: 35 × 4 #>    npi        last_name  first_name type      #>    <chr>      <chr>      <chr>      <chr>     #>  1 1881791739 ADAMS      JOHN       PHYSICIAN #>  2 1841280963 BIGBEE     JOHN       PHYSICIAN #>  3 1619996378 BODDEN     JOHN       PHYSICIAN #>  4 1588744569 BRUNO      JOHN       PHYSICIAN #>  5 1861142556 BURKE      JOHN       PHYSICIAN #>  6 1306817531 COMBS      JOHN       PHYSICIAN #>  7 1730349580 ECHEVARRIA JOHN       PHYSICIAN #>  8 1659074151 EUN        JOHN       PHYSICIAN #>  9 1376571554 FLYNN      JOHN       PHYSICIAN #> 10 1689774804 FREEMAN    JOHN       PHYSICIAN #> # ℹ 25 more rows pending_applications(first_name = \"John\", type = \"dentist\") #> Error in `pending_applications()`: #> ! `type` must be one of \"physician\" or \"non-physician\", not \"dentist\". pending_applications(npi = \"1001001234\",                       first_name = \"Gaelic\",                       last_name = \"Garlic\",                      type = \"physician\") #> ✖ No results for npi: 1001001234, last_name: Garlic, first_name: Gaelic, and #> type: physician"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"physician--other-practitioners","dir":"","previous_headings":"Motivation","what":"Physician & Other Practitioners","title":"Access Public Healthcare Provider Data","text":"","code":"# by Geography and Service physician_by_geography(sublevel = \"Maryland\", year = 2020) #> # A tibble: 5,866 × 16 #>     year level sublevel fips  hcpcs hcpcs_desc        hcpcs_drug pos   tot_provs #>    <int> <chr> <chr>    <chr> <chr> <chr>             <lgl>      <chr>     <int> #>  1  2020 State Maryland 24    0001A Adm sarscov2 30m… FALSE      O            31 #>  2  2020 State Maryland 24    0002A Adm sarscov2 30m… FALSE      O             3 #>  3  2020 State Maryland 24    00100 Anesthesia for p… FALSE      F           114 #>  4  2020 State Maryland 24    00103 Anesthesia for p… FALSE      F           256 #>  5  2020 State Maryland 24    00103 Anesthesia for p… FALSE      O             6 #>  6  2020 State Maryland 24    00104 Anesthesia for e… FALSE      F           105 #>  7  2020 State Maryland 24    0011A Adm sarscov2 100… FALSE      O             4 #>  8  2020 State Maryland 24    00120 Anesthesia for b… FALSE      F           135 #>  9  2020 State Maryland 24    00126 Anesthesia for i… FALSE      F            91 #> 10  2020 State Maryland 24    00140 Anesthesia for p… FALSE      F           401 #> # ℹ 5,856 more rows #> # ℹ 7 more variables: tot_benes <int>, tot_srvcs <int>, tot_day <int>, #> #   avg_charge <dbl>, avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> # by Provider and Service physician_by_service(year = 2020, npi = 1003000126) |>    dplyr::mutate(credential = clean_credentials(credential)) #> Error in `dplyr::mutate()`: #> ℹ In argument: `credential = clean_credentials(credential)`. #> Caused by error in `clean_credentials()`: #> ! could not find function \"clean_credentials\" # by Provider physician_by_provider(npi = 1003000126, year = 2020) #> # A tibble: 1 × 72 #>    year npi        first_name middle_name last_name credential gender enum_type #>   <int> <chr>      <chr>      <chr>       <chr>     <chr>      <chr>  <chr>     #> 1  2020 1003000126 Ardalan    <NA>        Enkeshafi MD         M      I         #> # ℹ 64 more variables: street <chr>, city <chr>, state <chr>, fips <chr>, #> #   zipcode <chr>, ruca <chr>, country <chr>, specialty <chr>, par <chr>, #> #   tot_hcpcs <int>, tot_benes <int>, tot_srvcs <int>, tot_charges <dbl>, #> #   tot_allowed <dbl>, tot_payment <dbl>, tot_std_pymt <dbl>, drug_supp <chr>, #> #   drug_hcpcs <int>, drug_benes <int>, drug_srvcs <int>, drug_charges <dbl>, #> #   drug_allowed <dbl>, drug_payment <dbl>, drug_std_pymt <dbl>, #> #   med_supp <chr>, med_hcpcs <int>, med_benes <int>, med_srvcs <int>, …"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"provider-enrollment","dir":"","previous_headings":"Motivation","what":"Provider Enrollment","title":"Access Public Healthcare Provider Data","text":"","code":"provider_enrollment(npi = 1083879860) #> # A tibble: 1 × 11 #>   npi   pac_id enroll_id specialty_code specialty_desc state org_name first_name #>   <chr> <chr>  <chr>     <chr>          <chr>          <chr> <chr>    <chr>      #> 1 1083… 84263… I2020061… 14-08          PRACTITIONER … PA    <NA>     CHRISTOPH… #> # ℹ 3 more variables: middle_name <chr>, last_name <chr>, gender <chr> provider_enrollment(specialty_code = \"00-17\", state = \"GA\") # GA RHCs #> # A tibble: 92 × 11 #>    npi        pac_id     enroll_id  specialty_code specialty_desc state org_name #>    <chr>      <chr>      <chr>      <chr>          <chr>          <chr> <chr>    #>  1 1992710610 8729997846 O20030404… 00-17          PART A PROVID… GA    TMC HAR… #>  2 1497760243 0042129074 O20030407… 00-17          PART A PROVID… GA    TMC TAL… #>  3 1285706879 1557271731 O20030610… 00-17          PART A PROVID… GA    HIAWASS… #>  4 1982631321 5991616039 O20030918… 00-17          PART A PROVID… GA    TMC WES… #>  5 1821017831 1850294034 O20040421… 00-17          PART A PROVID… GA    BACON C… #>  6 1750339511 2264415538 O20040608… 00-17          PART A PROVID… GA    BOWDON-… #>  7 1366472003 6002724598 O20041109… 00-17          PART A PROVID… GA    HOSPITA… #>  8 1891863569 2062493083 O20050222… 00-17          PART A PROVID… GA    THE MED… #>  9 1578682696 3779490503 O20070601… 00-17          PART A PROVID… GA    UNION C… #> 10 1922211515 6002724598 O20070830… 00-17          PART A PROVID… GA    HOSPITA… #> # ℹ 82 more rows #> # ℹ 4 more variables: first_name <chr>, middle_name <chr>, last_name <chr>, #> #   gender <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"revalidation-lists","dir":"","previous_headings":"Motivation","what":"Revalidation Lists","title":"Access Public Healthcare Provider Data","text":"","code":"# Revalidation Due Date List revalidation_date(npi = 1710912209) #> # A tibble: 1 × 13 #>   enrollment_id   npi        first_name last_name organization_name #>   <chr>           <chr>      <chr>      <chr>     <chr>             #> 1 I20040602001711 1710912209 Yelena     Voronova  <NA>              #> # ℹ 8 more variables: enrollment_state_code <chr>, enrollment_type <chr>, #> #   provider_type_text <chr>, enrollment_specialty <chr>, #> #   revalidation_due_date <dttm>, adjusted_due_date <dttm>, #> #   individual_total_reassign_to <chr>, receiving_benefits_reassignment <int> # Revalidation Reassignment List revalidation_reassign(ind_npi = 1710912209) #> # A tibble: 5 × 16 #>   group_pac_id group_enrollment_id group_legal_business_name    group_state_code #>          <dbl> <chr>               <chr>                        <chr>            #> 1   3678655222 O20080205000002     #1 Wise Podiatry Care P.C.   NY               #> 2   9931511052 O20201215000955     Brighton Beach Podiatry Pllc NY               #> 3   2062791411 O20161108001365     Fair Podiatry Practice Pllc  NY               #> 4   8527313170 O20180622000028     New York Jewish American Po… NY               #> 5   5193155174 O20200414003240     Podiatry Of Brooklyn Pllc    NY               #> # ℹ 12 more variables: group_due_date <chr>, #> #   group_reassignments_and_physician_assistants <int>, record_type <chr>, #> #   individual_pac_id <dbl>, individual_enrollment_id <chr>, #> #   individual_npi <int>, individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int> # Revalidation Clinic Group Practice Reassignment revalidation_group(ind_npi = 1710912209) #> # A tibble: 5 × 15 #>   group_pac_id group_enrollment_id group_legal_business_name    group_state_code #>          <dbl> <chr>               <chr>                        <chr>            #> 1   3678655222 O20080205000002     #1 Wise Podiatry Care P.C.   NY               #> 2   9931511052 O20201215000955     Brighton Beach Podiatry Pllc NY               #> 3   2062791411 O20161108001365     Fair Podiatry Practice Pllc  NY               #> 4   8527313170 O20180622000028     New York Jewish American Po… NY               #> 5   5193155174 O20200414003240     Podiatry Of Brooklyn Pllc    NY               #> # ℹ 11 more variables: group_due_date <chr>, #> #   group_reassignments_and_physician_assistants <int>, record_type <chr>, #> #   individual_enrollment_id <chr>, individual_npi <int>, #> #   individual_first_name <chr>, individual_last_name <chr>, #> #   individual_state_code <chr>, individual_specialty_description <chr>, #> #   individual_due_date <chr>, individual_total_employer_associations <int> revalidation_group(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") #> # A tibble: 1 × 15 #>   group_pac_id group_enrollment_id group_legal_business_name group_state_code #>          <dbl> <chr>               <chr>                     <chr>            #> 1   9436483807 O20190619002165     1st Call Urgent Care      FL               #> # ℹ 11 more variables: group_due_date <chr>, #> #   group_reassignments_and_physician_assistants <int>, record_type <chr>, #> #   individual_enrollment_id <chr>, individual_npi <int>, #> #   individual_first_name <chr>, individual_last_name <chr>, #> #   individual_state_code <chr>, individual_specialty_description <chr>, #> #   individual_due_date <chr>, individual_total_employer_associations <int>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"taxonomy-crosswalk","dir":"","previous_headings":"Motivation","what":"Taxonomy Crosswalk","title":"Access Public Healthcare Provider Data","text":"","code":"taxonomy_crosswalk(specialty_desc = \"Rehabilitation Agency\") #> # A tibble: 2 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 261QR0400X    Ambulatory Health Care Facilities… B4[14]         Rehabilitatio… #> 2 315D00000X    Nursing & Custodial Care Faciliti… B4[14]         Rehabilitatio… taxonomy_crosswalk(specialty_code = \"B4[14]\") #> # A tibble: 13 × 4 #>    taxonomy_code taxonomy_desc                     specialty_code specialty_desc #>    <chr>         <chr>                             <chr>          <chr>          #>  1 261QR0400X    Ambulatory Health Care Facilitie… B4[14]         Rehabilitatio… #>  2 335U00000X    Suppliers/Organ Procurement Orga… B4[14]         Organ Procure… #>  3 261QM0801X    Ambulatory Health Care Facilitie… B4[14]         Community Men… #>  4 261QR0401X    Ambulatory Health Care Facilitie… B4[14]         Comprehensive… #>  5 261QE0700X    Ambulatory Health Care Facilitie… B4[14]         End-Stage Ren… #>  6 261QF0400X    Ambulatory Health Care Facilitie… B4[14]         Federally Qua… #>  7 251G00000X    Agencies/Hospice Care Community … B4[14]         Hospice        #>  8 291U00000X    Laboratories/Clinical Medical La… B4[14]         Histocompatib… #>  9 291900000X    Laboratories/Military Clinical M… B4[14]         <NA>           #> 10 261QR0400X    Ambulatory Health Care Facilitie… B4[14]         Outpatient Ph… #> 11 315D00000X    Nursing & Custodial Care Facilit… B4[14]         Rehabilitatio… #> 12 282J00000X    Hospitals/Religious Non-medical … B4[14]         Religious Non… #> 13 261QR1300X    Ambulatory Health Care Facilitie… B4[14]         Rural Health … taxonomy_crosswalk(specialty_code = \"8\") #> # A tibble: 9 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 207Q00000X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… #> 2 207QA0401X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… #> 3 207QA0000X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… #> 4 207QA0505X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… #> 5 207QB0002X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… #> 6 207QG0300X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… #> 7 207QH0002X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… #> 8 207QS0010X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… #> 9 207QS1201X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… taxonomy_crosswalk(taxonomy_code = \"207Q00000X\") #> # A tibble: 1 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 207Q00000X    Allopathic & Osteopathic Physicia… 8              Physician/Fam… taxonomy_crosswalk() |>    dplyr::full_join(nucc_taxonomy_230,    dplyr::join_by(taxonomy_code == code)) #> # A tibble: 979 × 11 #>    taxonomy_code taxonomy_desc            specialty_code specialty_desc grouping #>    <chr>         <chr>                    <chr>          <chr>          <chr>    #>  1 208D00000X    Allopathic & Osteopathi… 1              Physician/Gen… Allopat… #>  2 208600000X    Allopathic & Osteopathi… 2              Physician/Gen… Allopat… #>  3 2086H0002X    Allopathic & Osteopathi… 2              Physician/Gen… Allopat… #>  4 2086S0120X    Allopathic & Osteopathi… 2              Physician/Gen… Allopat… #>  5 2086S0122X    Allopathic & Osteopathi… 2              Physician/Gen… Allopat… #>  6 2086S0105X    Allopathic & Osteopathi… 2              Physician/Gen… Allopat… #>  7 2086S0102X    Allopathic & Osteopathi… 2              Physician/Gen… Allopat… #>  8 2086X0206X    Allopathic & Osteopathi… 2              Physician/Gen… Allopat… #>  9 2086S0127X    Allopathic & Osteopathi… 2              Physician/Gen… Allopat… #> 10 2086S0129X    Allopathic & Osteopathi… 2              Physician/Gen… Allopat… #> # ℹ 969 more rows #> # ℹ 6 more variables: classification <chr>, specialization <chr>, #> #   definition <chr>, notes <chr>, display_name <chr>, section <chr>"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access Public Healthcare Provider Data","text":"Please note provider project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Current information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographical areas.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"","code":"beneficiary_enrollment(   year = NULL,   month = NULL,   level = NULL,   state = NULL,   state_name = NULL,   county = NULL,   fips = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"year Calendar year Medicare enrollment; current options 2017 - 2022 month Time frame Medicare enrollment; options Year month within 12-month time span month data set's version name (listed ) level Geographic level data; options National, State, County state Two-letter state abbreviation beneficiary residence state_name Full state name beneficiary residence county County beneficiary residence fips FIPS code beneficiary residence tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Medicare Monthly Enrollment data provides current monthly information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographic areas including national, state/territory, county. hospital/medical coverage data can broken health care delivery (Original Medicare versus Medicare Advantage Health Plans) prescription drug coverage data can examined enrolled stand-alone Prescription Drug Plans enrolled Medicare Advantage Prescription Drug plans. dataset includes enrollee counts rolling 12 month basis also provides information yearly trends. dataset based information gathered CMS administrative enrollment data beneficiaries enrolled Medicare program available CMS Chronic Conditions Data Warehouse.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Medicare Monthly Enrollment","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiary_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Monthly Enrollment API — beneficiary_enrollment","text":"","code":"if (FALSE) { beneficiary_enrollment(year = NULL,                        month = \"Year\",                        level = \"County\",                        state = \"AL\",                        county = \"Autauga\")  beneficiary_enrollment(year = 2021, level = \"County\", fips = \"01001\")  beneficiary_enrollment(year = 2022,                        month = \"July\",                        level = \"State\",                        state_name = \"Georgia\")  beneficiary_enrollment(level = \"State\", fips = \"10\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"cc_multiple(   year,   level = NULL,   sublevel = NULL,   fips = NULL,   age_group = NULL,   demographic = NULL,   subdemo = NULL,   tidy = TRUE )"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"in-addition-to-the-searchable-columns-","dir":"Reference","previous_headings":"","what":"In addition to the searchable columns:","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"mcc classify MCC Medicare beneficiary, 21 chronic conditions counted grouped four categories (0-1, 2-3, 4-5 6 ). prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. tot_std_pymt_percap Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. tot_pymt_percap Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). hosp_readmsn_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits_per_1k Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"year integer, YYYY, calendar year Medicare enrollment. 2007-2018 data currently available. level Geographic level data; options National, State, County sublevel state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. fips FIPS state /county code Medicare beneficiary resides. column blank data aggregated National level Puerto Rico Virgin Islands. age_group Identifies age level population data aggregated. value indicates data row represents Fee--Service Medicare Beneficiaries. value <65 65+ indicates data aggregated age Medicare Beneficiaries end calendar year. demographic Identifies demographic level population data aggregated. value indicates data row represents Fee--Service Medicare beneficiaries. value Sex indicates data aggregated Medicare beneficiary's sex. value Race indicates data aggregated Medicare beneficiary's race. value Dual Status indicates data aggregated Medicare beneficiary's dual eligibility status. subdemo Sex, beneficiary’s sex classified Male Female identified using information CMS enrollment database. Race, race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. Dual Status, beneficiaries can classified 'Medicare Medicaid' 'Medicare '. Beneficiaries enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Multiple Chronic Conditions dataset provides information number chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories (0-1, 2-3, 4-5 6 ).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Medicare Multiple Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"if (FALSE) { cc_multiple(year = 2018, level  = \"State\", sublevel = \"California\") cc_multiple(year = 2007, level = \"National\", demographic = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Specific Chronic Conditions API — cc_specific","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"cc_specific(   year,   level = NULL,   sublevel = NULL,   fips = NULL,   age_group = NULL,   demographic = NULL,   subdemo = NULL,   condition = NULL,   tidy = TRUE )"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"in-addition-to-the-searchable-columns-","dir":"Reference","previous_headings":"","what":"In addition to the searchable columns:","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. tot_std_pymt_percap Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. tot_pymt_percap Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). hosp_readmsn_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits_per_1k Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"year integer, YYYY, calendar year Medicare enrollment. 2007-2018 data currently available. level Geographic level data; options National, State, County sublevel state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. fips FIPS state /county code Medicare beneficiary resides. column blank data aggregated National level Puerto Rico Virgin Islands. age_group Identifies age level population data aggregated. value indicates data row represents Fee--Service Medicare Beneficiaries. value <65 65+ indicates data aggregated age Medicare Beneficiaries end calendar year. demographic Identifies demographic level population data aggregated. value indicates data row represents Fee--Service Medicare beneficiaries. value Sex indicates data aggregated Medicare beneficiary's sex. value Race indicates data aggregated Medicare beneficiary's race. value Dual Status indicates data aggregated Medicare beneficiary's dual eligibility status. subdemo Sex, beneficiary’s sex classified Male Female identified using information CMS enrollment database. Race, race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. Dual Status, beneficiaries can classified 'Medicare Medicaid' 'Medicare '. Beneficiaries enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. condition Identifies chronic condition prevalence utilization compiled. 21 chronic conditions identified using Medicare administrative claims. Medicare beneficiary considered chronic condition CMS administrative data claim indicating beneficiary received service treatment specific condition. Beneficiaries may one chronic conditions listed. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Select Chronic Conditions dataset provides information 21 selected chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography distinct chronic conditions listed . Alcohol Abuse Drug Abuse/ Substance Abuse Alzheimer’s Disease Related Dementia Arthritis (Osteoarthritis Rheumatoid) Asthma Atrial Fibrillation Autism Spectrum Disorders Cancer (Breast, Colorectal, Lung, Prostate) Chronic Kidney Disease Chronic Obstructive Pulmonary Disease Depression Diabetes Drug Abuse/ Substance Abuse Heart Failure Hepatitis (Chronic Viral B & C) HIV/AIDS Hyperlipidemia (High cholesterol) Hypertension (High blood pressure) Ischemic Heart Disease Osteoporosis Schizophrenia Psychotic Disorders Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Medicare Specific Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"if (FALSE) { cc_specific(year = 2018, level = \"State\", sublevel = \"CA\") cc_specific(year = 2007, level  = \"National\", demographic = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Dataset providers' facility affiliations","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"","code":"doctors_and_clinicians(   npi = NULL,   pac_id = NULL,   enroll_id = NULL,   first_name = NULL,   middle_name = NULL,   last_name = NULL,   gender = NULL,   school = NULL,   grad_year = NULL,   specialty = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   ind_assign = NULL,   group_assign = NULL,   offset = 0,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"npi Unique clinician ID assigned NPPES pac_id Unique individual clinician ID assigned PECOS enroll_id Unique ID clinician enrollment source data observation first_name Individual clinician first name middle_name Individual clinician middle name last_name Individual clinician last name gender Individual clinician gender school Individual clinician’s medical school grad_year Individual clinician’s medical school graduation year specialty Primary medical specialty reported individual clinician selected enrollment city Group individual's city state Group individual's state zipcode Group individual's ZIP code (9 digits available) ind_assign Indicator whether clinician accepts Medicare approved amount payment full. Y = Clinician accepts Medicare approved amount payment full. M = Clinician may accept Medicare Assignment. group_assign Indicator whether group accepts Medicare approved amount payment full. Y = Clinician accepts Medicare approved amount payment full. M = Clinician may accept Medicare Assignment. offset offset; API pagination tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Doctors Clinicians national downloadable file organized line unique clinician/enrollment record/group/address level. Clinicians multiple Medicare enrollment records /single enrollments linking multiple practice locations listed multiple lines.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Doctors Clinicians National Downloadable File","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/doctors_and_clinicians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Doctors and Clinicians National Downloadable File API — doctors_and_clinicians","text":"","code":"doctors_and_clinicians(npi = 1407263999) #> # A tibble: 2 × 25 #>   npi        pac_id     enroll_id first_name middle_name last_name suffix gender #>   <chr>      <chr>      <chr>     <chr>      <chr>       <chr>     <chr>  <chr>  #> 1 1407263999 8729208152 I2014100… ROBIN      A           AVERY     NA     F      #> 2 1407263999 8729208152 I2014100… ROBIN      A           AVERY     NA     F      #> # ℹ 17 more variables: credential <chr>, school <chr>, grad_year <int>, #> #   grad_duration <Duration>, specialty <chr>, specialty_sec <chr>, #> #   telehealth <lgl>, org_name <chr>, org_pac_id <chr>, org_members <int>, #> #   address <chr>, city <chr>, state <chr>, zipcode <chr>, phone_number <chr>, #> #   ind_assign <chr>, group_assign <chr> if (FALSE) { doctors_and_clinicians(enroll_id = \"I20081002000549\") doctors_and_clinicians(first_name = \"John\") doctors_and_clinicians(school = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\") doctors_and_clinicians(grad_year = 2003) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Physician Facility Affiliations API — facility_affiliations","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"Dataset providers' facility affiliations","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"","code":"facility_affiliations(   npi = NULL,   pac_id = NULL,   first_name = NULL,   middle_name = NULL,   last_name = NULL,   facility_type = NULL,   facility_ccn = NULL,   parent_ccn = NULL,   offset = 0,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"npi Unique clinician ID assigned NPPES pac_id Unique individual clinician ID assigned PECOS first_name Individual clinician first name middle_name Individual clinician middle name last_name Individual clinician last name facility_type Facilities can fall following type categories: Hospital, Long-term Care Hospital, Nursing Home, Inpatient Rehabilitation Facility, Home Health Agency, Hospice, Dialysis Facility facility_ccn alphanumeric; Medicare CCN (CMS Certification Number) facility type unit within hospital individual clinician provides service. Effective 2007, CCN replaced terms Medicare Provider Number, Medicare Identification Number OSCAR Number. CCN used verify Medicare/Medicaid certification survey certification, assessment-related activities communications. parent_ccn numeric; Medicare CCN primary hospital individual clinician provides service, clinician provide services unit within hospital. offset offset; API pagination tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"file lists clinicians' facility affiliations, expanded include Long-term Care Hospitals (LTCHs), Skilled Nursing Facilities (SNFs), Inpatient Rehabilitation Facility (IRFs), Home Health Agencies, Hospices, /Dialysis Facilities, addition hospitals.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"CMS Physician Facility Affiliations Certification Number (CCN) State Codes","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/facility_affiliations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Physician Facility Affiliations API — facility_affiliations","text":"","code":"facility_affiliations(npi = 1003019563) #> # A tibble: 4 × 9 #>   npi        pac_id     first_name middle_name last_name suffix facility_type #>   <chr>      <chr>      <chr>      <chr>       <chr>     <chr>  <chr>         #> 1 1003019563 4688707060 JOHN       JOSEPH      FRANK     NA     Hospital      #> 2 1003019563 4688707060 JOHN       JOSEPH      FRANK     NA     Hospital      #> 3 1003019563 4688707060 JOHN       JOSEPH      FRANK     NA     Hospital      #> 4 1003019563 4688707060 JOHN       JOSEPH      FRANK     NA     Hospital      #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(facility_ccn = \"060004\") #> # A tibble: 188 × 9 #>    npi        pac_id     first_name middle_name last_name   suffix facility_type #>    <chr>      <chr>      <chr>      <chr>       <chr>       <chr>  <chr>         #>  1 1003002890 6002953973 DANIEL     RICHARD     HAMMAN      NA     Hospital      #>  2 1003019563 4688707060 JOHN       JOSEPH      FRANK       NA     Hospital      #>  3 1003045022 5890926059 ARTHUR     H           DONAHUE     NA     Hospital      #>  4 1003105636 6507182847 JAMES      CHARLES     HIGHAM KES… NA     Hospital      #>  5 1003234162 4284940248 MATTHEW    NA          MCDIARMID   NA     Hospital      #>  6 1003845249 1254326994 GARETH     R           WEINER      NA     Hospital      #>  7 1013069566 7810096328 AMITY      D           HELZER      NA     Hospital      #>  8 1013115989 4385891712 ASHLEY     L           PYLE        NA     Hospital      #>  9 1013979566 1557374014 FIRAS      NA          MUWALLA     NA     Hospital      #> 10 1023261963 2860687431 CHAD       MICHAEL     LUCCI       NA     Hospital      #> # ℹ 178 more rows #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> facility_affiliations(parent_ccn = 670055) #> # A tibble: 9 × 9 #>   npi        pac_id     first_name middle_name last_name  suffix facility_type   #>   <chr>      <chr>      <chr>      <chr>       <chr>      <chr>  <chr>           #> 1 1083742829 5698833655 RAFAEL     JORGE       FORNARIS   NA     Inpatient reha… #> 2 1144429580 3577659580 LYSA       LEE         CURRY      NA     Inpatient reha… #> 3 1558595660 8921241142 JOHN       D           ALFONSO    NA     Inpatient reha… #> 4 1609973650 0840373239 GEORGE     KIMBELL     WILCOX     NA     Inpatient reha… #> 5 1710112370 9739337122 VIDYA      NA          VADDEMPUDI NA     Inpatient reha… #> 6 1720069859 7012947229 WILLIAM    WARREN      JANES      NA     Inpatient reha… #> 7 1740577212 0345473773 GEOFF      R           WEIKLE     NA     Inpatient reha… #> 8 1770861742 5193940997 AUSTON     J           MYERS      NA     Inpatient reha… #> 9 1912260464 5092036509 SAAD       MD          MANSOOR    NA     Inpatient reha… #> # ℹ 2 more variables: facility_ccn <chr>, parent_ccn <chr> if (FALSE) { facility_affiliations(first_name = \"John\") facility_affiliations(facility_type = \"Home Health Agency\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Hospital Enrollments API — hospital_enrollment","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Information hospitals currently enrolled Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"","code":"hospital_enrollment(   npi = NULL,   facility_ccn = NULL,   enroll_id = NULL,   enroll_state = NULL,   specialty_code = NULL,   pac_id_org = NULL,   org_name = NULL,   dba_name = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"npi Hospital’s National Provider Identifier (NPI) facility_ccn Hospital’s CMS Certification Number (CCN), formerly called OSCAR Number enroll_id Hospital’s enrollment ID enroll_state Hospital’s enrollment state specialty_code Enrollment application specialty type code pac_id_org Hospital’s PECOS Associate Control (PAC) ID org_name Hospital’s legal business name dba_name Hospital’s -business-name city City hospital’s practice location address state State hospital’s practice location address. zipcode Zip code hospital’s practice location address tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Hospital Enrollments dataset provides enrollment information Hospitals currently enrolled Medicare. data includes information Hospital's sub-group type, legal business name, business name, organization type address.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Hospital Enrollments","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospital_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Hospital Enrollments API — hospital_enrollment","text":"","code":"if (FALSE) { hospital_enrollment(npi = 1689653487) hospital_enrollment(facility_ccn = \"440058\") hospital_enrollment(pac_id_org = 6103733050) hospital_enrollment(city = \"Atlanta\") hospital_enrollment(zipcode = 117771928) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Information providers missing digital contact information NPPES.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"","code":"missing_information(npi = NULL, tidy = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"npi provider’s National Provider Identifier tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"May 2020 CMS Interoperability Patient Access final rule, CMS finalized policy publicly report names NPIs providers digital contact information included NPPES system (85 FR 25584). data includes NPI provider name providers clinicians without digital contact information NPPES.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"CMS Public Reporting Missing Digital Contact Information API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CMS Public Reporting of Missing Digital Contact Information API — missing_information","text":"","code":"missing_information(npi = 1134122013) #> # A tibble: 1 × 3 #>   npi        last_name first_name #>   <chr>      <chr>     <chr>      #> 1 1134122013 Henry     Timothy    missing_information(npi = 1386128379) #> ✖ No results for npi: 1386128379"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the NPPES National Provider Identifier Registry API — nppes_npi","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"nppes_npi() allows search NPPES NPI Registry's public API many parameters defined API's documentation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"","code":"nppes_npi(   npi = NULL,   enum_type = NULL,   first_name = NULL,   last_name = NULL,   org_name = NULL,   taxonomy_desc = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   country = NULL,   limit = 1200,   skip = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"npi 10-digit National Provider Identifier (NPI). enum_type Read API can refined retrieve Individual Providers (NPI-1 Type 1) Organizational Providers (NPI-2 Type 2.) specified, Type 1 Type 2 NPIs returned. using Enumeration Type, criteria entered. Additional criteria must also entered well. first_name Provider's first name. Applies Individual Providers (NPI-1) . Trailing wildcard entries permitted requiring least two characters entered (e.g. \"jo*\" ). field allows following special characters: ampersand(&), apostrophe(,), colon(:), comma(,), forward slash(/), hyphen(-), left right parentheses(()), period(.), pound sign(#), quotation mark(\"), semi-colon(;). last_name Provider's last name. Applies Individual Providers (NPI-1) . Trailing wildcard entries permitted requiring least two characters entered (e.g. \"jo*\" ). field allows following special characters: ampersand(&), apostrophe(,), colon(:), comma(,), forward slash(/), hyphen(-), left right parentheses(()), period(.), pound sign(#), quotation mark(\"), semi-colon(;). org_name Healthcare organization's name. Applies Organizational Providers (NPI-2) . Trailing wildcard entries permitted requiring least two characters entered. types Organization Names (LBN, DBA, Former LBN, Name) associated NPI examined matching contents, therefore, results might contain organization name different one entered Organization Name criterion. field allows following special characters: ampersand, apostrophe, \"\" sign, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. taxonomy_desc Search providers taxonomy entering taxonomy description. city City associated provider's address. search Military Address, enter either APO FPO City field. field allows following special characters: ampersand, apostrophe, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. state State abbreviation associated provider's address. field used input criterion. field used, least one field, besides prov_type country, must populated. Valid values state abbreviations: https://npiregistry.cms.hhs.gov/help-api/state. zipcode Postal Code associated provider's address identified Address Purpose. enter 5 digit postal code, match appropriate 9 digit (zip+4) codes data. Trailing wildcard entries permitted requiring least two characters entered (e.g., \"21*\"). country Country abbreviation associated provider's address. field can used input criterion, long value selected US (United States). Valid values country abbreviations: https://npiregistry.cms.hhs.gov/help-api/country. limit Maximum number results return; default 200, maximum 1200. skip Number results skip searching previous number; set limit. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"NPPES NPI Registry Public Search free directory active National Provider Identifier (NPI) records. Healthcare providers acquire unique 10-digit NPIs identify standard way throughout industry. CMS supplies NPI, publish parts NPI record public relevance, including provider’s name, taxonomy practice address. enables search providers NPPES (National Plan Provider Enumeration System.) information produced NPI Registry provided accordance NPPES Data Dissemination Notice. charge use NPI Registry.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"NPPES NPI Registry API Documentation NPPES NPI Registry API Demo","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi","text":"","code":"nppes_npi(npi = 1528060837) #> # A tibble: 1 × 19 #>   npi   enumeration_type enumeration_date enumeration_duration      last_updated #>   <chr> <chr>            <date>           <Duration>                <date>       #> 1 1528… NPI-1            2005-06-01       565747200s (~17.93 years) 2007-07-09   #> # ℹ 14 more variables: status <chr>, first_name <chr>, middle_name <chr>, #> #   last_name <chr>, credential <chr>, gender <chr>, sole_proprietor <chr>, #> #   country <chr>, street <chr>, city <chr>, state <chr>, zipcode <chr>, #> #   phone_number <chr>, fax_number <chr>"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the NPPES National Provider Identifier Registry API — nppes_npi_multi","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi_multi","text":"nppes_npi_multi() allows search NPPES NPI Registry's public API many parameters defined API's documentation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi_multi","text":"","code":"nppes_npi_multi(df)"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi_multi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi_multi","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi_multi","text":"df data frame, tibble","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi_multi","text":"NPPES NPI Registry Public Search free directory active National Provider Identifier (NPI) records. Healthcare providers acquire unique 10-digit NPIs identify standard way throughout industry. CMS supplies NPI, publish parts NPI record public relevance, including provider’s name, taxonomy practice address. enables search providers NPPES (National Plan Provider Enumeration System.) information produced NPI Registry provided accordance NPPES Data Dissemination Notice. charge use NPI Registry.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi_multi.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi_multi","text":"NPPES NPI Registry API Documentation NPPES NPI Registry API Demo","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes_npi_multi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the NPPES National Provider Identifier Registry API — nppes_npi_multi","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":null,"dir":"Reference","previous_headings":"","what":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. code set structured three distinct \"Levels\":","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"","code":"nucc_taxonomy_230"},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"nucc-taxonomy-a-data-frame-with-rows-and-columns-","dir":"Reference","previous_headings":"","what":"nucc_taxonomy_230 A data frame with 873 rows and 8 columns:","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"code Taxonomy Code grouping Level , Provider Grouping classification Level II, Classification specialization Level III, Area Specialization definition Definition Taxonomy notes Notes pertaining Taxonomy, e.g. sources, date modified, date implemented, etc. display_name consumer-friendly name taxonomy code; combination code name Level code nested. section Indicates whether Taxonomy Individual Non-Individual, .e., group taxonomy","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"https://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"Level (Provider Grouping): major grouping service(s) occupation(s) health care providers. example: Allopathic & Osteopathic Physicians, Dental Providers, Hospitals, etc. Level II: (Classification): specific service occupation related Provider Grouping. example, Classification Allopathic & Osteopathic Physicians based upon General Specialty Certificates issued appropriate national boards. following boards however, general certificates appear Level III areas specialization strictly due display limitations code set Boards multiple general certificates: Medical Genetics, Preventive Medicine, Psychiatry & Neurology, Radiology, Surgery, Otolaryngology, Pathology. Level III: (Area Specialization): specialized area Classification provider chooses practice make services available. example, Area Specialization provider type Allopathic & Osteopathic Physicians based upon Subspecialty Certificates issued appropriate national boards. Health Care Provider Taxonomy code set Levels organized allow drilling provider's specific level specialization. ten digit codes provider category unique contain embedded logic. codes categories used exactly assigned Taxonomy list. time codes separated form new codes, parsed apart, edited one position within code.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"\"230\" designation indicates version code set. NUCC updates set every six months. \"23\" indicates year \"0\" indicates first update year. taxonomy code display name consumer-friendly name code. display name combination code name Level code nested, precisely identifies code.  example, Addiction Medicine physician subspecialty Anesthesiology, Family Medicine, Internal Medicine, Preventive Medicine, Psychiatry & Neurology. Seeing “Addiction Medicine” identify specialty physician, display name “Addiction Medicine (Internal Medicine) Physician” clearly . another example, code “Radiology” confused several codes, “Radiology Chiropractor” specifies exact provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nucc_taxonomy_230.html","id":"how-many-categories-are-there-","dir":"Reference","previous_headings":"","what":"How Many Categories are There?","title":"Health Care Provider Taxonomy code set — nucc_taxonomy_230","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. Health Care Provider Taxonomy code set includes specialty categories individuals, Groups individuals, non-individuals. Individual Category includes: Allopathic & Osteopathic Physicians Behavioral Health Social Service Providers Chiropractic Providers Dental Providers Dietary Nutritional Service Providers Emergency Medical Service Providers Eye Vision Service Providers Nursing Service Providers Nursing Service Related Providers Service Providers Pharmacy Service Providers Physician Assistants Advanced Practice Nursing Providers Podiatric Medicine Surgery Service Providers Respiratory, Developmental, Rehabilitative Restorative Service Providers Speech, Language Hearing Service Providers Student, Health Care Technologists, Technicians, Technical Service Providers Group (Individuals) Category includes: Multi-Specialty Single Specialty Non-Individual Category includes: Agencies Ambulatory Health Care Facilities Hospital Units Hospitals Laboratories Managed Care Organizations Nursing Custodial Care Facilities Service Providers Residential Treatment Facilities Respite Care Facilities Suppliers Transportation Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":null,"dir":"Reference","previous_headings":"","what":"Search CMS' Open Payments Program API — open_payments","title":"Search CMS' Open Payments Program API — open_payments","text":"open_payments() allows search CMS' Open Payments Program API.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search CMS' Open Payments Program API — open_payments","text":"","code":"open_payments(   recipient_npi = NULL,   recipient_type = NULL,   recipient_id = NULL,   recipient_first_name = NULL,   recipient_last_name = NULL,   recipient_city = NULL,   recipient_state = NULL,   recipient_zip_code = NULL,   teaching_hospital_name = NULL,   manufacturer_gpo_name = NULL,   manufacturer_gpo_id = NULL,   form_of_payment = NULL,   nature_of_payment = NULL,   year = 2021,   offset = 0,   clean_names = TRUE,   nest = FALSE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search CMS' Open Payments Program API — open_payments","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search CMS' Open Payments Program API — open_payments","text":"recipient_npi 10-digit National Provider Identifier (NPI). recipient_type e.g., Covered Recipient Physician Covered Recipient Non-Physician Practitioner Covered Recipient Teaching Hospital recipient_id Payment recipient's unique Open Payments ID recipient_first_name Recipient's first name recipient_last_name Recipient's last name recipient_city City recipient_state State, abbreviation recipient_zip_code Zip code teaching_hospital_name Name teaching hospital, e.g. Vanderbilt University Medical Center manufacturer_gpo_name Paying entity's name. Examples: Pharmacosmos Therapeutics Inc. Getinge USA Sales, LLC Agiliti Health, Inc. OrthoScan, Inc. manufacturer_gpo_id Paying entity's unique Open Payments ID form_of_payment Form payment, examples: Stock option Cash cash equivalent -kind items services nature_of_payment Nature payment transfer value, examples: Royalty License Charitable Contribution Current prospective ownership investment interest Food Beverage year Reporting year, 2015-2021, default 2021 offset offset; API pagination clean_names Convert column names snakecase; default TRUE. nest Nest related columns together; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search CMS' Open Payments Program API — open_payments","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search CMS' Open Payments Program API — open_payments","text":"Open Payments program national disclosure program promotes transparent accountable health care system. Open Payments houses publicly accessible database payments reporting entities, including drug medical device companies, make covered recipients like physicians. Please note CMS comment relationships may beneficial potential conflicts interest. CMS publishes data attested reporting entities. data open individual interpretation. Open Payments national transparency program collects publishes information financial relationships drug medical device companies (referred \"reporting entities\") certain health care providers (referred \"covered recipients\"). relationships may involve payments providers things including limited research, meals, travel, gifts speaking fees. purpose program provide public transparent health care system. information available Open Payments database open personal interpretation questions data means, patients advocates speak directly health care provider better understanding.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search CMS' Open Payments Program API — open_payments","text":"Open Payments Program? OpenPaymentsData.cms.gov 2021 General Payment Data 2020 General Payment Data 2019 General Payment Data 2018 General Payment Data 2017 General Payment Data 2016 General Payment Data 2015 General Payment Data","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search CMS' Open Payments Program API — open_payments","text":"Update Frequency: Yearly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search CMS' Open Payments Program API — open_payments","text":"","code":"if (FALSE) { open_payments(recipient_npi = 1043218118, year = 2021) open_payments(nature_of_payment = \"Royalty or License\") open_payments(form_of_payment = \"Stock option\") open_payments(manufacturer_gpo_name = \"Adaptive Biotechnologies Corporation\") open_payments(teaching_hospital_name = \"Nyu Langone Hospitals\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Opt Out Affidavits API — opt_out","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"list practitioners currently opted Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"","code":"opt_out(   npi = NULL,   first_name = NULL,   last_name = NULL,   specialty = NULL,   address = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   order_and_refer = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"npi National Provider Identifier (NPI) number Opt Provider first_name First Name Opt Provider last_name Last Name Opt Provider specialty Specialty Opt Provider address Provider's Street Address city Provider's City state Provider's State Abbreviation zipcode Provider's Zip Code order_and_refer Flag indicating whether Provider eligible Order Refer tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Opt Affidavits dataset provides information providers decided participate Medicare. contains provider's NPI, specialty, address, effective dates.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Opt Out Affidavits API — opt_out","text":"","code":"if (FALSE) { opt_out(specialty = \"Psychiatry\", zipcode = \"07626\") opt_out(first = \"David\", last = \"Smith\") opt_out(npi = 1114974490) opt_out(city = \"Los Angeles\", address = \"9201 W SUNSET BLVD\")  opt_out(state = \"NY\", order_and_refer = FALSE) # Returns empty list i.e., provider is not in the database opt_out(npi = 1326011057)  # Example of possible data cleaning psych <- opt_out(specialty = \"Psychiatry\")  psych |> dplyr::mutate(last_updated = as.Date(parsedate::parse_date(last_updated)), optout_effective_date = as.Date(parsedate::parse_date(optout_effective_date)), optout_end_date = as.Date(parsedate::parse_date(optout_end_date))) |> age_days(date, optout_end_date, colname = \"days_until_end\") |> age_days(last_updated, date, colname = \"days_since_update\") |> age_days(optout_effective_date, date, colname = \"days_since_optout\") |> dplyr::mutate(zip_code = purrr::map_chr(zip_code, format_zipcode)) |> dplyr::mutate(address_full = full_address(.data, \"first_line_street_address\", \"second_line_street_address\", \"city_name\", \"state_code\",\"zip_code\")) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Order and Referring API — order_refer","title":"Search the Medicare Order and Referring API — order_refer","text":"physicians non-physician practitioners legally eligible order refer Medicare program current enrollment records Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Order and Referring API — order_refer","text":"","code":"order_refer(   npi = NULL,   first_name = NULL,   last_name = NULL,   partb = NULL,   dme = NULL,   hha = NULL,   pmd = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Order and Referring API — order_refer","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Order and Referring API — order_refer","text":"npi 10-digit National Provider Identifier (NPI) first_name Provider's first name last_name Provider's last name partb logical dme logical hha logical pmd logical tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Order and Referring API — order_refer","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Order and Referring API — order_refer","text":"Medicare Order Referring dataset provides information physicians non-physician practitioners, National Provider Identifier (NPI), type/specialty legally eligible order refer Medicare program current enrollment records Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Order and Referring API — order_refer","text":"Medicare Order Referring API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Order and Referring API — order_refer","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Order and Referring API — order_refer","text":"","code":"if (FALSE) { order_refer(npi = 1003026055)  order_refer(last = \"phadke\",             first = \"radhika\")  # Unnamed List of NPIs npi_list <- c(1003026055,               1316405939,               1720392988,               1518184605,               1922056829,               1083879860)  npi_list |> purrr::map_dfr(order_refer)  # Data frame of NPIs npi_df <- data.frame(npi = c(1003026055,                              1316405939,                              1720392988,                              1518184605,                              1922056829,                              1083879860)) npi_df |> tibble::deframe() |> purrr::map_dfr(order_refer) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"list enrollment applications pending CMS contractor review physicians & non-physicians.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"","code":"pending_applications(   npi = NULL,   last_name = NULL,   first_name = NULL,   type = c(\"physician\", \"non-physician\"),   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"npi National Provider Identifier (NPI) number last_name Last name provider first_name First name provider type physician non-physician tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Pending Initial Logging Tracking (L & T) dataset provides list pending applications processed CMS contractors.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Medicare Pending Initial Logging Tracking Physicians API Medicare Pending Initial Logging Tracking Non-Physicians API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending_applications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Pending Initial Logging and Tracking API — pending_applications","text":"","code":"pending_applications(last_name = \"Smith\", type = \"non-physician\") #> # A tibble: 23 × 4 #>    npi        last_name first_name type          #>    <chr>      <chr>     <chr>      <chr>         #>  1 1518672245 SMITH     ALEXANDRA  NON-PHYSICIAN #>  2 1700588621 SMITH     AMANDA     NON-PHYSICIAN #>  3 1073234282 SMITH     ANGELA     NON-PHYSICIAN #>  4 1790408185 SMITH     ARIELLE    NON-PHYSICIAN #>  5 1801992912 SMITH     BRIDGET    NON-PHYSICIAN #>  6 1558504688 SMITH     BRITTANY   NON-PHYSICIAN #>  7 1639635030 SMITH     COURTNEY   NON-PHYSICIAN #>  8 1043925035 SMITH     FULGENTIA  NON-PHYSICIAN #>  9 1902527641 SMITH     HEATHER    NON-PHYSICIAN #> 10 1720545619 SMITH     HILLARY    NON-PHYSICIAN #> # ℹ 13 more rows pending_applications(first_name = \"John\", type = \"physician\") #> # A tibble: 32 × 4 #>    npi        last_name  first_name type      #>    <chr>      <chr>      <chr>      <chr>     #>  1 1881791739 ADAMS      JOHN       PHYSICIAN #>  2 1841280963 BIGBEE     JOHN       PHYSICIAN #>  3 1619996378 BODDEN     JOHN       PHYSICIAN #>  4 1588744569 BRUNO      JOHN       PHYSICIAN #>  5 1861142556 BURKE      JOHN       PHYSICIAN #>  6 1306817531 COMBS      JOHN       PHYSICIAN #>  7 1730349580 ECHEVARRIA JOHN       PHYSICIAN #>  8 1376571554 FLYNN      JOHN       PHYSICIAN #>  9 1689774804 FREEMAN    JOHN       PHYSICIAN #> 10 1386604080 GIANNINI   JOHN       PHYSICIAN #> # ℹ 22 more rows"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated geography service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"","code":"physician_by_geography(   year,   level = NULL,   sublevel = NULL,   fips = NULL,   hcpcs_code = NULL,   hcpcs_desc = NULL,   hcpcs_drug = NULL,   pos = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"year Year YYYY format, 2013-2020; default 2020 level Identifies level geography data row aggregated. value 'State' indicates data row aggregated single state identified Rendering Provider State column given HCPCS Code Level. value 'National' indicates data row aggregated across states given HCPCS Code Level. sublevel state name provider located, reported NPPES. values include 50 United States, District Columbia, U.S. territories, Armed Forces areas, Unknown Foreign Country. Data aggregated National level identified word 'National'. fips FIPS code referring provider state. variable blank reported national level. hcpcs_code HCPCS code used identify specific medical service furnished provider. hcpcs_desc Description HCPCS code specific medical service furnished provider. HCPCS descriptions associated CPT codes consumer friendly descriptions provided AMA. CPT Consumer Friendly Descriptors lay synonyms CPT descriptors intended help healthcare consumers medical professionals understand clinical procedures bills patient portals. CPT Consumer Friendly Descriptors used clinical coding documentation. descriptions CMS Level II descriptions provided long form. Due variable length restrictions, CMS Level II descriptions truncated 256 bytes. result, HCPCS description can associated one HCPCS code. hcpcs_drug Flag identifies whether HCPCS code specific service furnished provider HCPCS listed Medicare Part B Drug Average Sales Price (ASP) File. pos Identifies whether place service submitted claims facility (value F) non-facility (value O). Non-facility generally office setting; however entities included non-facility. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Geography Service dataset contains information utilization, payment (allowed amount Medicare payment), submitted charges organized HCPCS place service national table organized provider state, HCPCS place service state table. national state tables also include HCPCS drug indicator identify whether HCPCS product/service drug defined Medicare Part B Drug ASP list.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Medicare Physician & Practitioners: Geography Service API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_geography.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Geography and Service — physician_by_geography","text":"","code":"if (FALSE) { physician_by_geography(hcpcs_code = \"0002A\", year = 2020) service <- purrr::map_dfr(as.character(2013:2020),            ~physician_by_service(npi = 1003000126, year = .x))  procedures <- service |>               dplyr::distinct(hcpcs_cd) |>               tibble::deframe()  arg_cross <- purrr::cross_df(list(              x = as.character(2013:2020),              y = procedures))  # National Level purrr::map2_dfr(arg_cross$x, arg_cross$y, ~physician_by_geography(geo_level = \"National\", year = .x, hcpcs_code = .y))  # State Level purrr::map2_dfr(arg_cross$x, arg_cross$y, ~physician_by_geography(geo_level = \"Georgia\", year = .x, hcpcs_code = .y)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"","code":"physician_by_provider(   year,   npi = NULL,   first_name = NULL,   last_name = NULL,   credential = NULL,   gender = NULL,   enum_type = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"year Year YYYY format, 2013-2020; default 2020 npi National Provider Identifier (NPI) rendering provider claim. provider NPI numeric identifier registered NPPES. first_name individual provider's (entity type code ) first name. organization's (entity type code O) blank. last_name Last name/Organization name provider. provider registered NPPES individual (entity type code ), provider’s last name. provider registered organization (entity type code O), organization name. credential individual provider's (entity type code ) credentials. organization's blank. gender individual provider's gender. organization's blank. enum_type Type entity reported NPPES. entity code identifies providers registered individuals entity type code O identifies providers registered organizations. city city provider located, reported NPPES. state state provider located, reported NPPES. zipcode provider’s zip code, reported NPPES. fips FIPS code rendering provider's state. ruca Rural-Urban Commuting Area Code (RUCA); Census tract-based classification scheme utilizes standard Bureau Census Urbanized Area Urban Cluster definitions combination work commuting information characterize nation's Census tracts regarding rural urban status relationships. Referring Provider ZIP code cross walked United States Department Agriculture (USDA) 2010 Rural-Urban Commuting Area Codes. country country provider located, reported NPPES. specialty Derived provider specialty code reported claim. providers reported one specialty code claims, specialty code associated largest number services. par Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts. value Y provider least one claim identifying provider participating Medicare accepting assignment Medicare allowed amounts within HCPCS code place service. non-participating provider may elect accept Medicare allowed amounts services accept Medicare allowed amounts services. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Provider dataset provides information use, payments, submitted charges beneficiary demographic health characteristics organized National Provider Identifier (NPI).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Medicare Physician & Practitioners: Provider API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_provider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Provider — physician_by_provider","text":"","code":"if (FALSE) { physician_by_provider(npi = 1003000423,                       year = 2020)  physician_by_provider(type = \"I\",                       city = \"Hershey\",                       state = \"PA\",                       fips = 42,                       ruca =1,                       gender = \"F\",                       cred = \"M.D.\",                       specialty = \"Anesthesiology\")  purrr::map_dfr(2013:2020, ~physician_by_provider(npi = 1003000126, year = .x)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Information services procedures provided Original Medicare (fee--service) Part B (Medical Insurance) beneficiaries physicians healthcare professionals; aggregated provider service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"","code":"physician_by_service(   year,   npi = NULL,   last_name = NULL,   first_name = NULL,   credential = NULL,   gender = NULL,   enum_type = NULL,   city = NULL,   state = NULL,   zipcode = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par = NULL,   hcpcs_code = NULL,   hcpcs_drug = NULL,   pos = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"year Year YYYY format, 2013-2020; default 2020 npi National Provider Identifier (NPI) rendering provider claim. provider NPI numeric identifier registered NPPES. last_name Last name/Organization name provider. provider registered NPPES individual (entity type code = ), provider’s last name. provider registered organization (entity type code = O), organization name. first_name individual provider's (entity type code = ) first name. organization's (entity type code = O) blank. credential individual provider's (entity type code=’’) credentials. organization's blank. gender individual provider's gender. organization's blank. enum_type Type entity reported NPPES. entity code ‘’ identifies providers registered individuals entity type code ‘O’ identifies providers registered organizations. city city provider located, reported NPPES. state state provider located, reported NPPES. zipcode provider’s zip code, reported NPPES. fips FIPS code rendering provider's state. ruca Rural-Urban Commuting Area Code (RUCA); Census tract-based classification scheme utilizes standard Bureau Census Urbanized Area Urban Cluster definitions combination work commuting information characterize nation's Census tracts regarding rural urban status relationships. Referring Provider ZIP code cross walked United States Department Agriculture (USDA) 2010 Rural-Urban Commuting Area Codes. country country provider located, reported NPPES. specialty Derived provider specialty code reported claim. providers reported one specialty code claims, specialty code associated largest number services. par Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts. value Y provider least one claim identifying provider participating Medicare accepting assignment Medicare allowed amounts within HCPCS code place service. non-participating provider may elect accept Medicare allowed amounts services accept Medicare allowed amounts services. hcpcs_code HCPCS code used identify specific medical service furnished provider. HCPCS codes include two levels. Level codes Current Procedural Terminology (CPT) codes maintained American Medical Association Level II codes created CMS identify products, supplies services covered CPT codes (ambulance services). hcpcs_drug Identifies whether HCPCS code specific service furnished provider HCPCS listed Medicare Part B Drug Average Sales Price (ASP) File. Please visit ASP drug pricing page additional information. pos Identifies whether place service submitted claims facility (value F) non-facility (value O). Non-facility generally office setting; however entities included non-facility. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Provider Service dataset provides information services procedures provided Medicare (fee--service) Part B beneficiaries physicians healthcare professionals. data based information gathered CMS administrative claims data Part B beneficiaries available CMS Chronic Conditions Data Warehouse. spending utilization data Physician Practitioners Provider Service Dataset aggregated following: NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility). can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Medicare Physician & Practitioners: Provider Service API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/physician_by_service.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Physician & Other Practitioners API\nby Provider and Service — physician_by_service","text":"","code":"if (FALSE) { # Search by NPI physician_by_service(npi = 1003000126)  # Search by Last Name for 2019 physician_by_service(last_org = \"Enkeshafi\", year = 2019)  # Multiple NPIs npis <- c(1003026055,           1316405939,           1720392988,           1518184605,           1922056829,           1083879860)  npis |> purrr::map_dfr(physician_by_service)  # Retrieve All Provider Data, 2013-2020 purrr::map_dfr(as.character(2013:2020), ~physician_by_service(npi = 1003000126, year = .x)) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Information point time snapshot enrollment level data providers actively enrolled Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"","code":"provider_enrollment(   npi = NULL,   pac_id = NULL,   enroll_id = NULL,   specialty_code = NULL,   specialty_desc = NULL,   state = NULL,   first_name = NULL,   middle_name = NULL,   last_name = NULL,   org_name = NULL,   gender = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"npi NPI 10-digit unique numeric identifier providers must obtain enrolling Medicare. assigned health care providers upon application National Plan Provider Enumeration System (NPPES). pac_id Provider associate level variable (PAC ID) PECOS database used link across tables. PAC ID 10-digit unique numeric identifier assigned individual organization PECOS. entity-level information (e.g., tax identification numbers organizational names) linked PAC ID. PAC ID may associated multiple Enrollment IDs individual organization enrolled multiple times different circumstances. enroll_id Provider enrollment ID PECOS database used link across tables. Enrollment ID 15-digit unique alphanumeric identifier assigned new provider enrollment application. enrollment-level information (e.g., enrollment type, enrollment state, provider specialty reassignment benefits) linked Enrollment ID. specialty_code Provider enrollment application enrollment specialty type. field shows provider’s primary specialty code. practitioners DME suppliers, please see Secondary Specialty file list secondary specialties (applicable). 20% practitioners DME suppliers least one secondary specialty. specialty_desc Provider enrollment application enrollment specialty type description state Provider enrollment state, abbreviated location. Providers enroll state level, one PAC ID may associated multiple ENRLMT_IDs multiple STATE_CD values. first_name Individual provider first name middle_name Individual provider middle name last_name Individual provider last name org_name Organizational provider name gender Individual provider gender: F (female), M (male), 9 (unknown) tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Medicare Fee--Service Public Provider Enrollment dataset includes information providers actively approved bill Medicare completed 855O time data pulled Provider Enrollment Chain Ownership System (PECOS). release provider enrollment data related provider information releases Physician Compare Data Transparency.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Medicare Fee--Service Public Provider Enrollment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/provider_enrollment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Fee-For-Service Public Provider Enrollment API — provider_enrollment","text":"","code":"if (FALSE) { provider_enrollment(npi = 1417918293, specialty_code = \"14-41\")  provider_enrollment(first_name = \"DEBRA\",                     middle_name = \"L\",                     last_name = \"FROMER\")  provider_enrollment(org_name = \"ELIZABETHTOWN COMMUNITY HOSPITAL\",                     state = \"NY\",                     specialty_code = \"00-85\")  provider_enrollment(specialty_desc = \"PRACTITIONER - ENDOCRINOLOGY\",                     state = \"AK\",                     gender = \"F\")   provider_enrollment(pac_id = 2860305554,                     enroll_id = \"I20031110000120\",                     gender = \"9\") prven <- tibble::tribble( ~fn,         ~params, \"provider_enrollment\", list(npi = 1083879860), \"provider_enrollment\", list(first_name = \"MICHAEL\",                             middle_name = \"K\",                             last_name = \"GREENBERG\",                             state = \"MD\"), \"provider_enrollment\", list(org_name = \"LUMINUS DIAGNOSTICS LLC\",                             state = \"GA\"))  purrr::invoke_map_dfr(prven$fn, prven$params) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Due Date List API — revalidation_date","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Information revalidation due dates Medicare providers. Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet. lists refreshed every two months two months’ worth due dates appended list","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"revalidation_date(   enroll_id = NULL,   npi = NULL,   first_name = NULL,   last_name = NULL,   org_name = NULL,   state = NULL,   type_code = NULL,   prov_type = NULL,   specialty = NULL,   clean_names = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"enroll_id Enrollment ID npi National Provider Identifier (NPI) first_name First name individual provider last_name Last name individual provider org_name Legal business name organizational provider state Enrollment state type_code Provider enrollment type code (1 Part ; 2 DME; 3 Non-DME Part B) prov_type Provider type description specialty Enrollment specialty clean_names Convert column names snakecase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Revalidation Due Date List dataset contains revalidation due dates Medicare providers due revalidate following six months. provider's due date fall within ensuing six months, due date marked 'TBD'. addition dataset also includes subfiles reassignment information given provider well due date listings clinics group practices providers.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Medicare Revalidation Due Date API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"revalidation_date(enroll_id = \"I20031110000070\",                   npi = 1184699621) #> # A tibble: 1 × 13 #>   enrollment_id   npi        first_name last_name organization_name #>   <chr>           <chr>      <chr>      <chr>     <chr>             #> 1 I20031110000070 1184699621 Eric       Byrd      NA                #> # ℹ 8 more variables: enrollment_state_code <chr>, enrollment_type <chr>, #> #   provider_type_text <chr>, enrollment_specialty <chr>, #> #   revalidation_due_date <dttm>, adjusted_due_date <dttm>, #> #   individual_total_reassign_to <chr>, receiving_benefits_reassignment <int>  revalidation_date(first_name = \"Eric\",                   last_name = \"Byrd\") #> # A tibble: 2 × 13 #>   enrollment_id   npi        first_name last_name organization_name #>   <chr>           <chr>      <chr>      <chr>     <chr>             #> 1 I20031110000070 1184699621 Eric       Byrd      NA                #> 2 I20090128000461 1598792285 Eric       Byrd      NA                #> # ℹ 8 more variables: enrollment_state_code <chr>, enrollment_type <chr>, #> #   provider_type_text <chr>, enrollment_specialty <chr>, #> #   revalidation_due_date <dttm>, adjusted_due_date <dttm>, #> #   individual_total_reassign_to <chr>, receiving_benefits_reassignment <int>  revalidation_date(state = \"FL\",                   type_code = \"3\",                   specialty = \"General Practice\") #> # A tibble: 1,523 × 13 #>    enrollment_id   npi        first_name last_name      organization_name #>    <chr>           <chr>      <chr>      <chr>          <chr>             #>  1 I20031104000582 1184693400 John       Abt            NA                #>  2 I20031105000008 1356436786 Humberto   Fernandez Miro NA                #>  3 I20031105000534 1467499285 Jorge      Santander      NA                #>  4 I20031111000679 1104875178 Marianela  De La Portilla NA                #>  5 I20031204000571 1437205796 Mohammad   Sheikh         NA                #>  6 I20031209000730 1417063454 Richard    Rizzo          NA                #>  7 I20031211000318 1689646440 Rene       Casanova       NA                #>  8 I20031211001075 1265580146 Maria      Montealegre    NA                #>  9 I20031215000276 1619943990 Ricardo    Dominguez      NA                #> 10 I20031215000394 1033218821 Arles      Perdomo        NA                #> # ℹ 1,513 more rows #> # ℹ 8 more variables: enrollment_state_code <chr>, enrollment_type <chr>, #> #   provider_type_text <chr>, enrollment_specialty <chr>, #> #   revalidation_due_date <dttm>, adjusted_due_date <dttm>, #> #   individual_total_reassign_to <chr>, receiving_benefits_reassignment <chr>  revalidation_date(enroll_id = \"O20110620000324\",                   org_name = \"Lee Memorial Health System\",                   state = \"FL\",                   prov_type = \"DME\",                   type_code = \"2\") #> # A tibble: 1 × 13 #>   enrollment_id   npi        first_name last_name organization_name          #>   <chr>           <chr>      <chr>      <chr>     <chr>                      #> 1 O20110620000324 1801196266 NA         NA        Lee Memorial Health System #> # ℹ 8 more variables: enrollment_state_code <chr>, enrollment_type <chr>, #> #   provider_type_text <chr>, enrollment_specialty <chr>, #> #   revalidation_due_date <dttm>, adjusted_due_date <dttm>, #> #   individual_total_reassign_to <chr>, receiving_benefits_reassignment <chr>"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Information clinic group practice revalidation Medicare enrollment.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"","code":"revalidation_group(   group_pac_id = NULL,   group_enroll_id = NULL,   group_bus_name = NULL,   group_state = NULL,   record_type = NULL,   ind_enroll_id = NULL,   ind_npi = NULL,   ind_first = NULL,   ind_last = NULL,   ind_state = NULL,   ind_specialty = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"group_pac_id PAC ID provider receiving reassignment employer group_enroll_id Enrollment ID provider receiving reassignment employer group_bus_name Legal business name provider receiving reassignment employer group_state Enrollment state provider receiving reassignment employer record_type Identifies whether record reassignment (Reassignment) employment (Physician Assistant) ind_enroll_id Enrollment ID provider reassigning benefits employee ind_npi NPI provider reassigning benefits employee ind_first First name provider reassigning benefits employee ind_last Last name provider reassigning benefits employee ind_state Enrollment state provider reassigning benefits employee ind_specialty Enrollment specialty provider reassigning benefits employee tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Revalidation Clinic Group Practice Reassignment dataset provides information physician group practice reassign billing . also includes individual employer association counts revalidation dates individual physician well clinic group practice.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Medicare Revalidation Clinic Group Practice Reassignment API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Clinic Group Practice Reassignment API — revalidation_group","text":"","code":"if (FALSE) { revalidation_group(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\")  revalidation_group(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Reassignments Providers due Revalidation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"revalidation_reassign(   group_pac_id = NULL,   group_enroll_id = NULL,   group_bus_name = NULL,   group_state = NULL,   record_type = NULL,   ind_enroll_id = NULL,   ind_npi = NULL,   ind_first = NULL,   ind_last = NULL,   ind_state = NULL,   ind_specialty = NULL,   clean_names = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"group_pac_id PAC ID provider receiving reassignment employer group_enroll_id Enrollment ID provider receiving reassignment employer group_bus_name Legal business name provider receiving reassignment employer group_state Enrollment state provider receiving reassignment employer record_type Identifies whether record reassignment (Reassignment) employment (Physician Assistant) ind_enroll_id Enrollment ID provider reassigning benefits employee ind_npi NPI provider reassigning benefits employee ind_first First name provider reassigning benefits employee ind_last Last name provider reassigning benefits employee ind_state Enrollment state provider reassigning benefits employee ind_specialty Enrollment specialty provider reassigning benefits employee clean_names Convert column names snakecase; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Revalidation Reassignment List dataset provides information reassignments providers due revalidation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Medicare Revalidation Reassignment List API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"revalidation_reassign(ind_enroll_id = \"I20200929003184\",                    ind_npi = 1962026229,                    ind_first = \"Rashadda\",                    ind_last = \"Wong\",                    ind_state = \"CT\",                    ind_specialty = \"Physician Assistant\") #> # A tibble: 3 × 16 #>   group_pac_id group_enrollment_id group_legal_business_name    group_state_code #>          <dbl> <chr>               <chr>                        <chr>            #> 1   4688988371 O20150810001133     1271972 Llc                  CT               #> 2   3173866241 O20190514001441     Hartford Healthcare Medical… CT               #> 3   7618242777 O20170929001464     Hartford Healthcare Urgent … CT               #> # ℹ 12 more variables: group_due_date <chr>, #> #   group_reassignments_and_physician_assistants <int>, record_type <chr>, #> #   individual_pac_id <dbl>, individual_enrollment_id <chr>, #> #   individual_npi <int>, individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>  revalidation_reassign(group_pac_id = 9436483807,                    group_enroll_id = \"O20190619002165\",                    group_bus_name = \"1st Call Urgent Care\",                    group_state = \"FL\",                    record_type = \"Reassignment\") #> # A tibble: 1 × 16 #>   group_pac_id group_enrollment_id group_legal_business_name group_state_code #>          <dbl> <chr>               <chr>                     <chr>            #> 1   9436483807 O20190619002165     1st Call Urgent Care      FL               #> # ℹ 12 more variables: group_due_date <chr>, #> #   group_reassignments_and_physician_assistants <int>, record_type <chr>, #> #   individual_pac_id <dbl>, individual_enrollment_id <chr>, #> #   individual_npi <int>, individual_first_name <chr>, #> #   individual_last_name <chr>, individual_state_code <chr>, #> #   individual_specialty_description <chr>, individual_due_date <chr>, #> #   individual_total_employer_associations <int>"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"list type providers suppliers proper taxonomy code eligible medicare programs.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(   taxonomy_code = NULL,   taxonomy_desc = NULL,   specialty_code = NULL,   specialty_desc = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Centers Medicare & Medicaid Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"taxonomy_code taxonomy codes providers use taxonomy_desc description taxonomy providers use specialty_code Code corresponds listed Medicare specialty specialty_desc Description Medicare Provider/Supplier Type tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Medicare Provider Supplier Taxonomy Crosswalk dataset lists providers suppliers eligible enroll Medicare programs proper healthcare provider taxonomy code. data includes Medicare speciality codes, available, provider/supplier type description, taxonomy code, taxonomy description. dataset derived information gathered National Plan Provider Enumerator System (NPPES) Provider Enrollment, Chain Ownership System (PECOS).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Medicare Provider Supplier Taxonomy Crosswalk API Medicare Find Taxonomy Code","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Provider and Supplier Taxonomy Crosswalk API — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(specialty_code = \"B4[14]\") #> # A tibble: 13 × 4 #>    taxonomy_code taxonomy_desc                     specialty_code specialty_desc #>    <chr>         <chr>                             <chr>          <chr>          #>  1 261QR0400X    Ambulatory Health Care Facilitie… B4[14]         Rehabilitatio… #>  2 335U00000X    Suppliers/Organ Procurement Orga… B4[14]         Organ Procure… #>  3 261QM0801X    Ambulatory Health Care Facilitie… B4[14]         Community Men… #>  4 261QR0401X    Ambulatory Health Care Facilitie… B4[14]         Comprehensive… #>  5 261QE0700X    Ambulatory Health Care Facilitie… B4[14]         End-Stage Ren… #>  6 261QF0400X    Ambulatory Health Care Facilitie… B4[14]         Federally Qua… #>  7 251G00000X    Agencies/Hospice Care Community … B4[14]         Hospice        #>  8 291U00000X    Laboratories/Clinical Medical La… B4[14]         Histocompatib… #>  9 291900000X    Laboratories/Military Clinical M… B4[14]         NA             #> 10 261QR0400X    Ambulatory Health Care Facilitie… B4[14]         Outpatient Ph… #> 11 315D00000X    Nursing & Custodial Care Facilit… B4[14]         Rehabilitatio… #> 12 282J00000X    Hospitals/Religious Non-medical … B4[14]         Religious Non… #> 13 261QR1300X    Ambulatory Health Care Facilitie… B4[14]         Rural Health … taxonomy_crosswalk(specialty_desc = \"Rehabilitation Agency\") #> # A tibble: 2 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 261QR0400X    Ambulatory Health Care Facilities… B4[14]         Rehabilitatio… #> 2 315D00000X    Nursing & Custodial Care Faciliti… B4[14]         Rehabilitatio… taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") #> # A tibble: 1 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 2086S0102X    Allopathic & Osteopathic Physicia… 2              Physician/Gen… taxonomy_crosswalk(taxonomy_desc = \"Agencies/Hospice Care Community Based\") #> # A tibble: 1 × 4 #>   taxonomy_code taxonomy_desc                      specialty_code specialty_desc #>   <chr>         <chr>                              <chr>          <chr>          #> 1 251G00000X    Agencies/Hospice Care Community B… B4[14]         Hospice"},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009012-2023-03-23","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9012 (2023-03-23)","title":"provider 0.0.0.9012 (2023-03-23)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009011-2023-02-27","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9011 (2023-02-27)","title":"provider 0.0.0.9011 (2023-02-27)","text":"nppes_npi_new implementation","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009010-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9010 (2023-02-08)","title":"provider 0.0.0.9010 (2023-02-08)","text":"added hospital_enrollment() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009009-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9009 (2023-02-08)","title":"provider 0.0.0.9009 (2023-02-08)","text":"implemented cms_update_ids() applicable functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009008-2023-02-07","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9008 (2023-02-07)","title":"provider 0.0.0.9008 (2023-02-07)","text":"added addl_phone_numbers() function added nucc_taxonomy_230 dataset added examples new functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009007-2023-02-04","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9007 (2023-02-04)","title":"provider 0.0.0.9007 (2023-02-04)","text":"doctors_and_clinicians() function facility_affiliations() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009006-2023-02-03","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9006 (2023-02-03)","title":"provider 0.0.0.9006 (2023-02-03)","text":"pending_applications() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009005-2023-01-22","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9005 (2023-01-22)","title":"provider 0.0.0.9005 (2023-01-22)","text":"nesting larger outputs","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009004-2023-01-21","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9004 (2023-01-21)","title":"provider 0.0.0.9004 (2023-01-21)","text":"initial implementation distribution id update functions open_payments() vignette","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009003-2023-01-16","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9003 (2023-01-16)","title":"provider 0.0.0.9003 (2023-01-16)","text":"open_payments() function added","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009002-2023-01-05","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9002 (2023-01-05)","title":"provider 0.0.0.9002 (2023-01-05)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9001 (2022-08-31)","title":"provider 0.0.0.9001 (2022-08-31)","text":"Updated README.","code":""}]
