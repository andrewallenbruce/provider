[{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/linking_providers.html","id":"individual-provider","dir":"Articles","previous_headings":"","what":"Individual Provider","title":"Linking Providers","text":"Exploring links providers can lead many interesting insights. example, hospital New York named Elizabethtown Community Hospital.  Hospital Enrollment API includes Medicare Part (hospital) providers, get two rows back, include new data point: two facility CCNs. Plugging Facility Affiliations API, can retrieve information individual providers practicing hospital. First, -numeric CCN (331302):   returns individual providers affiliated hospital. Now search alphanumeric CCN (33Z302):  returns affiliated individual providers practice Hospital’s nursing home..  alphanumeric CCN represents sub-unit hospital, nursing home. get result ’d set parent_ccn argument numeric CCN, .e. affiliations(parent_ccn = 331302)","code":"providers(pac = 7810891009) #> # A tibble: 1 × 10 #>   npi        pac   enid  specialty_code specialty_description state first middle #>   <chr>      <chr> <chr> <chr>          <chr>                 <chr> <chr> <chr>  #> 1 1043245657 7810… I200… 14-22          PRACTITIONER - PATHO… VT    MARK  K      #> # ℹ 2 more variables: last <chr>, gender <chr> reassignments(pac = 7810891009) #> # A tibble: 1 × 12 #>   npi        pac    enid  first last  associations organization pac_org enid_org #>   <chr>      <chr>  <chr> <chr> <chr>        <int> <chr>        <chr>   <chr>    #> 1 1043245657 78108… I200… MARK  FUNG             1 UNIVERSITY … 377949… O200608… #> # ℹ 3 more variables: state_org <chr>, reassignments <int>, entry <chr> clinicians(pac = 7810891009) #> # A tibble: 1 × 19 #>   npi        pac     enid  first middle last  gender credential school grad_year #>   <chr>      <chr>   <chr> <chr> <chr>  <chr> <chr>  <chr>      <chr>      <int> #> 1 1043245657 781089… I200… MARK  K      FUNG  M      MD         UNIVE…      1999 #> # ℹ 9 more variables: specialty <chr>, organization <chr>, pac_org <chr>, #> #   members_org <int>, address_org <chr>, city_org <chr>, state_org <chr>, #> #   zip_org <chr>, phone_org <chr> affiliations(pac = 7810891009) #> # A tibble: 5 × 7 #>   npi        pac        first middle last  facility_type facility_ccn #>   <chr>      <chr>      <chr> <chr>  <chr> <chr>         <chr>        #> 1 1043245657 7810891009 MARK  K      FUNG  Hospital      470003       #> 2 1043245657 7810891009 MARK  K      FUNG  Hospital      330250       #> 3 1043245657 7810891009 MARK  K      FUNG  Hospital      331302       #> 4 1043245657 7810891009 MARK  K      FUNG  Hospital      330084       #> 5 1043245657 7810891009 MARK  K      FUNG  Hospital      470001 a <- affiliations(pac = 7810891009) |>    pull(facility_ccn) |>   map_dfr(~hospitals(facility_ccn = .x, pivot = FALSE))  a |> group_by(enid_org) |>    #filter(multi_npi | flag == TRUE)   distinct(npi, .keep_all = TRUE) #> # A tibble: 5 × 33 #> # Groups:   enid_org [5] #>   npi    pac_org enid_org enid_state facility_ccn organization doing_business_as #>   <chr>  <chr>   <chr>    <chr>      <chr>        <chr>        <chr>             #> 1 15684… 377949… O200211… VT         470003       UNIVERSITY … UNIVERSITY OF VE… #> 2 10332… 276939… O201201… NY         330250       CHAMPLAIN V… THE UNIVERSITY O… #> 3 18917… 357755… O201011… NY         331302       ELIZABETHTO… NA                #> 4 11149… 408252… O201011… NY         330084       ALICE HYDE … NA                #> 5 15088… 933513… O200508… VT         470001       CENTRAL VER… NA                #> # ℹ 26 more variables: specialty_code <chr>, specialty <chr>, #> #   incorp_date <date>, incorp_state <chr>, structure <chr>, address <chr>, #> #   city <chr>, state <chr>, zip <chr>, location_type <chr>, #> #   registration <chr>, multi_npi <lgl>, reh_conversion <lgl>, #> #   subgroup_general <lgl>, subgroup_acute_care <lgl>, #> #   subgroup_alcohol_drug <lgl>, subgroup_childrens <lgl>, #> #   subgroup_long_term <lgl>, subgroup_psychiatric <lgl>, … providers(organization = \"Elizabethtown Community Hospital\") #> # A tibble: 4 × 7 #>   npi        pac   enid  specialty_code specialty_description state organization #>   <chr>      <chr> <chr> <chr>          <chr>                 <chr> <chr>        #> 1 1891785184 3577… O200… 12-70          PART B SUPPLIER - CL… NY    ELIZABETHTO… #> 2 1891785184 3577… O201… 00-85          PART A PROVIDER - CR… NY    ELIZABETHTO… #> 3 1487923637 3577… O201… 12-59          PART B SUPPLIER - AM… NY    ELIZABETHTO… #> 4 1407061591 3577… O202… 00-85          PART A PROVIDER - CR… NY    ELIZABETHTO… hospitals(organization = \"Elizabethtown Community Hospital\") #> # A tibble: 28 × 19 #>    npi      pac_org enid_org enid_state facility_ccn organization specialty_code #>    <chr>    <chr>   <chr>    <chr>      <chr>        <chr>        <chr>          #>  1 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #>  2 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #>  3 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #>  4 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #>  5 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #>  6 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #>  7 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #>  8 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #>  9 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #> 10 1891785… 357755… O201011… NY         331302       ELIZABETHTO… 00-85          #> # ℹ 18 more rows #> # ℹ 12 more variables: specialty <chr>, incorp_date <date>, incorp_state <chr>, #> #   structure <chr>, address <chr>, city <chr>, state <chr>, zip <chr>, #> #   location_type <chr>, multi_npi <lgl>, subgroup <chr>, flag <lgl> affiliations(facility_ccn = 331302) #> # A tibble: 167 × 8 #>    npi        pac        first   middle last   suffix facility_type facility_ccn #>    <chr>      <chr>      <chr>   <chr>  <chr>  <chr>  <chr>         <chr>        #>  1 1003815184 4082693676 ARMIN   NA     AFSAR… NA     Hospital      331302       #>  2 1023076643 5698798452 JOHN    N      HENRY  NA     Hospital      331302       #>  3 1023377843 6901115278 LINDSEY B      WILHE… NA     Hospital      331302       #>  4 1043245657 7810891009 MARK    K      FUNG   NA     Hospital      331302       #>  5 1043397656 4183764558 ANTHONY F      TRAMO… NA     Hospital      331302       #>  6 1043630510 2365749389 RYAN    NA     WOLFE  NA     Hospital      331302       #>  7 1043672140 7214229350 VANESSA NA     FIORI… NA     Hospital      331302       #>  8 1053596122 5193802213 TANYA   JEAN   FINCH  NA     Hospital      331302       #>  9 1053863100 8729362207 MATTHEW D      FARNS… NA     Hospital      331302       #> 10 1063536886 0941434435 ELENA   NA     BOLAND NA     Hospital      331302       #> # ℹ 157 more rows affiliations(facility_ccn = \"33Z302\") #> # A tibble: 3 × 8 #>   npi        pac        first middle last  facility_type facility_ccn parent_ccn #>   <chr>      <chr>      <chr> <chr>  <chr> <chr>         <chr>        <chr>      #> 1 1396989059 8921259557 MARY  K      HALL… Nursing home  33Z302       331302     #> 2 1538173869 0547299091 IL    JUN    CHON  Nursing home  33Z302       331302     #> 3 1801893318 3577568724 ROB   L      DEMU… Nursing home  33Z302       331302"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"provider-utilization-summary","dir":"Articles","previous_headings":"","what":"Provider Utilization Summary","title":"Provider Analysis","text":"","code":"df <- map_dfr(pop_years(), ~by_provider(year = .x, npi = 1023076643)) select(df, year, entity_type, specialty, city:state, ruca, tot_hcpcs:tot_std_pymt) |>   gt_preview(top_n = 10) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    fmt_currency(columns = c(tot_charges, tot_allowed, tot_payment, tot_std_pymt), decimals = 2) select(df, year, demographics) |>    unnest(demographics) |>   gt_preview(top_n = 10) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    sub_missing() select(df, year, hcc_risk_avg, conditions) |>    unnest(conditions) |>   gt_preview(top_n = 10) |>    fmt_percent(columns = starts_with(\"cc_\"), decimals = 0) |>   opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>    sub_missing()"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"counts-amounts","dir":"Articles","previous_headings":"Provider Utilization Summary","what":"Counts & Amounts","title":"Provider Analysis","text":"","code":"select(df, year, starts_with(\"tot_\")) |>    select(-tot_hcpcs, -tot_std_pymt) |>    change(starts_with(\"tot_\")) |>    gt(rowname_col = \"year\") |>    fmt_integer(columns = c(tot_benes,                            tot_srvcs,                            tot_benes_chg,                            tot_srvcs_chg)) |>    fmt_currency(columns = c(tot_charges,                             tot_allowed,                             tot_payment,                             tot_charges_chg,                             tot_allowed_chg,                             tot_payment_chg,                             tot_charges_chg_cum,                             tot_allowed_chg_cum,                             tot_payment_chg_cum), decimals = 0, suffixing = TRUE) |>    fmt_percent(columns = contains(\"pct\"), decimals = 0, force_sign = TRUE) |>   sub_zero(zero_text = \"\") |>    grand_summary_rows(columns = c(tot_benes,                                   tot_srvcs,                                   tot_benes_chg,                                   tot_srvcs_chg),                      fns =  list(label = md(\"**Avg**\"),                                   id = \"average\", fn = \"mean\"),                      fmt = ~ fmt_integer(.),                       missing_text = \"\") |>    grand_summary_rows(columns = c(tot_charges,                                   tot_allowed,                                   tot_payment,                             tot_charges_chg,                             tot_allowed_chg,                             tot_payment_chg,                             tot_charges_chg_cum,                             tot_allowed_chg_cum,                             tot_payment_chg_cum),                      fns =  list(label = md(\"**Avg**\"),                                   id = \"average\", fn = \"mean\"),                      fmt = ~ fmt_currency(., decimals = 0, suffixing = TRUE),                       missing_text = \"\") |>    tab_spanner(label = \"Beneficiaries\",columns = contains(\"bene\")) |>    tab_spanner(label = \"Services\", columns = contains(\"srvcs\")) |>    tab_spanner(label = \"Submitted Charges\", columns = contains(\"charges\")) |>    tab_spanner(label = \"Amount Allowed\", columns = contains(\"allowed\")) |>    tab_spanner(label = \"Net Payment\", columns = contains(\"payment\")) |>    cols_label(     tot_benes = (\"Tot\"),     tot_benes_chg = (\"YOY\"),     tot_benes_chg_cum = (\"Cum\"),     tot_benes_pct = (\"Pct\"),     tot_benes_pct_cum = (\"Cum\"),     tot_srvcs = (\"Tot\"),     tot_srvcs_chg = (\"YOY\"),     tot_srvcs_chg_cum = (\"Cum\"),     tot_srvcs_pct = (\"Pct\"),     tot_srvcs_pct_cum = (\"Cum\"),     tot_charges = (\"Tot\"),     tot_charges_chg = (\"YOY\"),     tot_charges_chg_cum = (\"Cum\"),     tot_charges_pct = (\"Pct\"),     tot_charges_pct_cum = (\"Cum\"),     tot_allowed = (\"Tot\"),     tot_allowed_chg = (\"YOY\"),     tot_allowed_chg_cum = (\"Cum\"),     tot_allowed_pct = (\"Pct\"),     tot_allowed_pct_cum = (\"Cum\"),     tot_payment = (\"Tot\"),     tot_payment_chg = (\"YOY\"),     tot_payment_chg_cum = (\"Cum\"),     tot_payment_pct = (\"Pct\"),     tot_payment_pct_cum = (\"Cum\")     ) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\"),              subtitle = md(\"Counts & Amounts, 2013-2019\")) |>    data_color(columns = c(tot_benes, tot_srvcs, tot_charges, tot_allowed, tot_payment),              method = \"numeric\",              palette = \"Reds\") |>    data_color(columns = c(tot_benes_chg, tot_benes_chg_cum, tot_benes_pct, tot_benes_pct_cum),              rows = tot_benes_chg < 0,              method = \"numeric\",              palette = \"red\",               apply_to = \"text\") |>    data_color(columns = c(tot_benes_chg, tot_benes_chg_cum, tot_benes_pct, tot_benes_pct_cum),              rows = tot_benes_chg > 0,              method = \"numeric\",              palette = \"gray50\",               apply_to = \"text\") |>    data_color(columns = c(tot_srvcs_chg, tot_srvcs_chg_cum, tot_srvcs_pct, tot_srvcs_pct_cum),              rows = tot_srvcs_chg < 0,              method = \"numeric\",              palette = \"red\",               apply_to = \"text\") |>    data_color(columns = c(tot_srvcs_chg, tot_srvcs_chg_cum, tot_srvcs_pct, tot_srvcs_pct_cum),              rows = tot_srvcs_chg > 0,              method = \"numeric\",              palette = \"gray50\",               apply_to = \"text\") |>    tab_options(table.width = pct(100),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"year-over-year-percentage-change","dir":"Articles","previous_headings":"Provider Utilization Summary","what":"Year-Over-Year Percentage Change","title":"Provider Analysis","text":"","code":"select(df,         year,         Beneficiaries = tot_benes,        Services = tot_srvcs,        Payment = tot_payment) |>    change(c(Beneficiaries, Services, Payment)) |>    select(-contains(c(\"_chg\", \"_cum\"))) |>    gt(rowname_col = \"year\") |>    grand_summary_rows(columns = c(Beneficiaries, Services),                      fns =  list(label = md(\"**AVERAGES**\"),                                   id = \"average\", fn = \"mean\"),                      fmt = ~ fmt_integer(.)) |>    grand_summary_rows(columns = c(Payment),                      fns =  list(label = md(\"**AVERAGES**\"),                                   id = \"average\", fn = \"mean\"),                      fmt = ~ fmt_currency(., decimals = 0)) |>   fmt_percent(columns = contains(\"_pct\"), decimals = 0, force_sign = TRUE) |>    fmt_integer(columns = c(Beneficiaries, Services)) |>    fmt_currency(columns = c(Payment), decimals = 0) |>    cols_merge_n_pct(Beneficiaries, Beneficiaries_pct) |>    cols_merge_n_pct(Services, Services_pct) |>   cols_merge_n_pct(Payment, Payment_pct) |>   opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\"),              subtitle = md(\"Year-Over-Year Percentage Changes, 2013-2019\")) |>    tab_options(table.width = pct(75),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"trends","dir":"Articles","previous_headings":"Provider Utilization Summary","what":"Trends","title":"Provider Analysis","text":"","code":"select(df,         year,         HCPCS = tot_hcpcs,        Beneficiaries = tot_benes,        Services = tot_srvcs,        Charges = tot_charges,        Allowed = tot_allowed,        Payment = tot_payment) |>    pivot_longer(cols = c(HCPCS,                          Beneficiaries,                          Services,                          Charges,                          Allowed,                          Payment),                 names_to = \"Type\",                 values_to = \"Amount\") |>    pivot_wider(names_from = year,                values_from = Amount) |>    gt(rowname_col = \"Type\") |>    tab_stubhead(label = md(\"**Measures**\")) |>   cols_hide(columns = matches(\"2014|2015|2016|2017|2018\")) |>   cols_nanoplot(     columns = contains(\"20\"),     new_col_name = \"nanoplots\",     new_col_label = md(\"*TREND*\"),     reference_line = \"mean\",     plot_height = \"3em\",     options = nanoplot_options(       data_line_stroke_color = \"black\",       show_reference_line = TRUE,       show_reference_area = FALSE)) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\"),              subtitle = md(\"Trends, 2013-2019\")) |>    opt_horizontal_padding(scale = 2) |>    tab_options(table.width = pct(50),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"chronic-condition-prevalence","dir":"Articles","previous_headings":"Provider Utilization Summary","what":"Chronic Condition Prevalence","title":"Provider Analysis","text":"","code":"chronic <- compare_conditions(df)  chronic #> # A tibble: 16 × 19 #>    condition        `2013_Provider` `2013_State` `2013_National` `2014_Provider` #>    <chr>                      <dbl>        <dbl>           <dbl>           <dbl> #>  1 Alzheimer's Dis…            0.06       0.105           0.105             0.05 #>  2 Arthritis                   0.33       0.275           0.299             0.34 #>  3 Asthma                      0.05       0.0629          0.0512            0.07 #>  4 Atrial Fibrilla…            0.25       0.0943          0.0812            0.28 #>  5 COPD                        0.18       0.102           0.115             0.19 #>  6 Cancer                      0.13       0.0897          0.0803            0.13 #>  7 Chronic Kidney …            0.27       0.168           0.164             0.23 #>  8 Depression                  0.23       0.21            0.162             0.21 #>  9 Diabetes                    0.38       0.243           0.275             0.31 #> 10 Heart Failure               0.29       0.132           0.144             0.26 #> 11 Hyperlipidemia              0.75       0.457           0.460             0.73 #> 12 Hypertension                0.75       0.559           0.568             0.75 #> 13 Ischemic Heart …            0.7        0.247           0.284             0.66 #> 14 Osteoporosis                0.1        0.0685          0.0623            0.09 #> 15 Stroke                      0.07       0.0357          0.0383            0.07 #> 16 Schizophrenia a…           NA         NA              NA                 0.03 #> # ℹ 14 more variables: `2014_State` <dbl>, `2014_National` <dbl>, #> #   `2015_Provider` <dbl>, `2015_State` <dbl>, `2015_National` <dbl>, #> #   `2016_Provider` <dbl>, `2016_State` <dbl>, `2016_National` <dbl>, #> #   `2017_Provider` <dbl>, `2017_State` <dbl>, `2017_National` <dbl>, #> #   `2018_Provider` <dbl>, `2018_State` <dbl>, `2018_National` <dbl> gt(chronic) |>    cols_nanoplot(     columns = contains(\"Provider\"),     reference_line = \"mean\",     new_col_name = \"provider_plot\",     new_col_label = md(\"*Provider*\"),     missing_vals = \"remove\",     plot_height = \"3em\",     options = nanoplot_options(       data_line_stroke_color = \"black\",       show_reference_line = TRUE,       show_reference_area = FALSE)) |>    cols_nanoplot(     columns = contains(\"State\"),     reference_line = \"mean\",     new_col_name = \"state_plot\",     new_col_label = md(\"*State*\"),     missing_vals = \"remove\",     plot_height = \"3em\",     options = nanoplot_options(       data_line_stroke_color = \"black\",       show_reference_line = TRUE,       show_reference_area = FALSE)) |>    cols_nanoplot(     columns = contains(\"National\"),     reference_line = \"mean\",     new_col_name = \"national_plot\",     new_col_label = md(\"*National*\"),     missing_vals = \"remove\",     plot_height = \"3em\",     options = nanoplot_options(       data_line_stroke_color = \"black\",       show_reference_line = TRUE,       show_reference_area = FALSE)) |>    cols_hide(columns = contains(\"20\")) |>   opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\"),              subtitle = md(\"**Chronic Conditions Prevalence** Comparison, 2013-2018\")) |>    opt_horizontal_padding(scale = 2) |>    tab_options(table.width = pct(50),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"hcpcs-utilization-data","dir":"Articles","previous_headings":"","what":"HCPCS Utilization Data","title":"Provider Analysis","text":"","code":"srvc <- map_dfr(pop_years(), ~by_service(year = .x, npi = 1023076643))  srvc #> # A tibble: 30 × 32 #>     year npi        level first middle last  gender credential specialty address #>    <int> <chr>      <chr> <chr> <chr>  <chr> <chr>  <chr>      <chr>     <chr>   #>  1  2013 1023076643 Prov… John  N      Henry M      PAC        Physicia… 777 No… #>  2  2013 1023076643 Prov… John  N      Henry M      PAC        Physicia… 777 No… #>  3  2013 1023076643 Prov… John  N      Henry M      PAC        Physicia… 777 No… #>  4  2013 1023076643 Prov… John  N      Henry M      PAC        Physicia… 777 No… #>  5  2014 1023076643 Prov… John  N      Henry M      PAC        Physicia… 1 Medi… #>  6  2014 1023076643 Prov… John  N      Henry M      PAC        Physicia… 1 Medi… #>  7  2014 1023076643 Prov… John  N      Henry M      PAC        Physicia… 1 Medi… #>  8  2014 1023076643 Prov… John  N      Henry M      PAC        Physicia… 1 Medi… #>  9  2015 1023076643 Prov… John  N      Henry M      PAC        Physicia… 1 Medi… #> 10  2015 1023076643 Prov… John  N      Henry M      PAC        Physicia… 1 Medi… #> # ℹ 20 more rows #> # ℹ 22 more variables: city <chr>, state <chr>, zip <chr>, fips <chr>, #> #   ruca <chr>, country <chr>, par <lgl>, hcpcs_code <chr>, hcpcs_desc <chr>, #> #   category <chr>, subcategory <chr>, family <chr>, procedure <chr>, #> #   drug <lgl>, pos <chr>, tot_benes <int>, tot_srvcs <int>, tot_day <int>, #> #   avg_charge <dbl>, avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> hcpcs <- compare_hcpcs(srvc)  hcpcs #> # A tibble: 90 × 14 #>     year level    hcpcs_code pos   category subcategory         family procedure #>    <int> <fct>    <chr>      <chr> <chr>    <chr>               <chr>  <chr>     #>  1  2013 Provider 93010      F     Test     Cardiography        Elect… Non-proc… #>  2  2013 Provider 93016      F     Test     Cardiography        Elect… Non-proc… #>  3  2013 Provider 99214      F     E&M      Office/Outpatient … Offic… Non-proc… #>  4  2013 Provider 99215      F     E&M      Office/Outpatient … Offic… Non-proc… #>  5  2014 Provider 93010      F     Test     Cardiography        Elect… Non-proc… #>  6  2014 Provider 93016      F     Test     Cardiography        Elect… Non-proc… #>  7  2014 Provider 99214      F     E&M      Office/Outpatient … Offic… Non-proc… #>  8  2014 Provider 99215      F     E&M      Office/Outpatient … Offic… Non-proc… #>  9  2015 Provider 93010      F     Test     Cardiography        Elect… Non-proc… #> 10  2015 Provider 93016      F     Test     Cardiography        Elect… Non-proc… #> # ℹ 80 more rows #> # ℹ 6 more variables: beneficiaries <dbl>, services <dbl>, avg_charge <dbl>, #> #   avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> hcpcs |>    group_by(year, level, family) |>   summarise(Beneficiaries = sum(beneficiaries),             Services = sum(services),             \"Average Payment\" = mean(avg_payment), .groups = \"drop\") |>   arrange(year, family) |>   gt() |>    fmt_integer(columns = c(Beneficiaries, Services)) |>    fmt_currency(columns = c('Average Payment'), decimals = 2) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\")) |>    opt_horizontal_padding(scale = 2) |>    tab_options(table.width = pct(50),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\") hcpcs |> select(year,           level,           HCPCS = hcpcs_code,          beneficiaries,          services,           \"Average Payment\" = avg_payment) |>    mutate(\"Services Per Beneficiary\" = services/beneficiaries) |>    select(-c(beneficiaries, services)) |>    pivot_longer(!year:HCPCS,                 names_to = \"stat\",                 values_to = \"amount\") |>    pivot_wider(names_from = level,                values_from = amount) |>    arrange(stat, HCPCS) |>   filter(stat %in% c(\"Average Payment\")) |>    gt(rowname_col = \"year\") |>    fmt_currency(columns = c(Provider, State, National), decimals = 2) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Average Payment** By HCPCS\")) |>    cols_hide(stat) |>    data_color(columns = c(Provider, State, National),              direction = \"row\",              method = \"numeric\",              palette = \"Reds\") |>    tab_options(table.width = pct(75),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\") hcpcs |> select(year,           level,           HCPCS = hcpcs_code,          beneficiaries,          services,           \"Average Payment\" = avg_payment) |>    mutate(\"Services Per Beneficiary\" = services/beneficiaries) |>    select(-c(beneficiaries, services)) |>    pivot_longer(!year:HCPCS,                 names_to = \"stat\",                 values_to = \"amount\") |>    pivot_wider(names_from = level,                values_from = amount) |>    arrange(stat, HCPCS) |>    filter(stat %in% c(\"Services Per Beneficiary\")) |>    gt(rowname_col = \"year\") |>    fmt_number(columns = c(Provider, State, National), decimals = 2) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Services Per Beneficiary** By HCPCS\")) |>    cols_hide(stat) |>    data_color(columns = c(Provider, State, National),              direction = \"row\",              method = \"numeric\",              palette = \"Reds\") |>    tab_options(table.width = pct(75),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"tidy-output","dir":"Articles","previous_headings":"","what":"Tidy Output","title":"Overview of Provider","text":"tidy data, every column variable, every row observation, every cell single value. Many outputs APIs violate form Storing column headers values, variable names Storing multiple variables one column remedy , post-processing done output returned. function tidy argument set TRUE default:  Setting FALSE return un-processed output:  Setting FALSE return un-processed output:  tidy transformations applied output function include: Favoring long format wide. descriptive, thematic variable names involving prefixes standardized vocabulary across outputs Various quality--life data transformations (e.g., using snake_case variable names, replacing empty character cells NA; converting years, dates, booleans respective data types) Nesting large groups related columns lists, initially emphasize important output. However, event prefer transformations, simply turn tidy = FALSE.","code":"order_refer(npi = 1043477615) #> # A tibble: 4 × 4 #>   npi        first last    service                   #>   <chr>      <chr> <chr>   <chr>                     #> 1 1043477615 SARAH HUSSAIN Medicare Part B           #> 2 1043477615 SARAH HUSSAIN Home Health Agency        #> 3 1043477615 SARAH HUSSAIN Durable Medical Equipment #> 4 1043477615 SARAH HUSSAIN Power Mobility Devices order_refer(npi = 1043477615, tidy = FALSE) #>          NPI LAST_NAME FIRST_NAME PARTB DME HHA PMD #> 1 1043477615   HUSSAIN      SARAH     Y   Y   Y   Y order_refer(npi = 1043477615, pivot = FALSE) #> # A tibble: 1 × 7 #>   npi        last_name first_name partb dme   hha   pmd   #>   <chr>      <chr>     <chr>      <lgl> <lgl> <lgl> <lgl> #> 1 1043477615 HUSSAIN   SARAH      TRUE  TRUE  TRUE  TRUE"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"exported-functions","dir":"Articles","previous_headings":"","what":"Exported Functions","title":"Overview of Provider","text":"API Search functions can grouped according type data return Provider: administrative, statistical, auxiliary.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"administrative","dir":"Articles","previous_headings":"Exported Functions","what":"Administrative","title":"Overview of Provider","text":"nppes(): Registry healthcare providers. providers(): Providers actively enrolled Medicare. opt_out(): Providers currently opted Medicare. revalidation(): Link Type-1 Type-2 providers. clinicians(): Provider school, graduation year, linking. affiliations(): Linking providers Facilities. hospitals(): Facilities linked providers. laboratories(): Clinical laboratories.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"statistical","dir":"Articles","previous_headings":"Exported Functions","what":"Statistical","title":"Overview of Provider","text":"following return yearly Provider-specific stats: by_provider(): Utilization summary. by_service(): Utilization detail. by_geography(): National/state/county utilization summary. quality_payment(): QPP/MIPS performance. quality_eligibility(): QPP/MIPS eligibility. open_payments(): Open Payments reporting. beneficiaries(): Medicare enrollment. chronic_conditions: Chronic condition prevalence.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"auxiliary","dir":"Articles","previous_headings":"Exported Functions","what":"Auxiliary","title":"Overview of Provider","text":"order_refer(): provider eligible order refer? pending(): provider’s Medicare application processed? taxonomy(): provider’s specialty eligible enroll Medicare? quality_stats(): Yearly QPP/MIPS performance data.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper Functions","title":"Overview of Provider","text":"Several functions required year argument. years available query APIs might change time, accompanying helper function retrieve years available, form <function_name>_years(). instance, quality_payment()’s : can also used pipeline, searching available years:","code":"quality_years() #> Error in quality_years(): could not find function \"quality_years\" map_dfr(qpp_years(), ~quality_payment(year = .x, npi = 1043477615)) |>    select(year:final_score) #> # A tibble: 5 × 10 #>    year npi        state practice_size clinician_specialty     years_in_medicare #>   <int> <chr>      <chr>         <int> <chr>                               <int> #> 1  2017 1043477615 PA             1394 Cardiac Electrophysiol…                 5 #> 2  2018 1043477615 PA             1297 Cardiac Electrophysiol…                 5 #> 3  2019 1043477615 PA             1344 Cardiac Electrophysiol…                 6 #> 4  2020 1043477615 PA             1440 Cardiac Electrophysiol…                 7 #> 5  2021 1043477615 PA             1940 Cardiac Electrophysiol…                 8 #> # ℹ 4 more variables: participation_type <chr>, beneficiaries <int>, #> #   allowed_charges <dbl>, final_score <dbl>"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"validation-checks","dir":"Articles","previous_headings":"","what":"Validation Checks","title":"Overview of Provider","text":"Several validation checks implemented, including checks NPIs, PAC IDs, Enrollment IDs: National Provider Identifier: National Provider Identifier (NPI) unique 10-digit identification number issued health care providers United States Centers Medicare Medicaid Services (CMS) National Plan Provider Enumeration System (NPPES). individual HIPAA–covered healthcare providers organizations must obtain NPI. assigned, provider’s NPI permanent remains provider regardless job location changes.  Provider Associate-level Control ID: Provider associate-level control ID (PAC ID) 10-digit unique numeric identifier assigned individual organization PECOS. PAC ID links entity-level information (e.g., tax identification numbers organizational names) may associated multiple enrollment IDs individual organization enrolled multiple times different circumstances.  Medicare Enrollment ID: Enrollment ID 15-digit unique alphanumeric identifier assigned new provider enrollment application. enrollment-level information (e.g., enrollment type, enrollment state, provider specialty reassignment benefits) linked Enrollment ID.  Note: R drop leading zeros numeric vector ’s evaluated. Parameters contain leading zeros must input character vector:","code":"# Must be 10 digits long open_payments(year = 2021, npi = 12345691234) #> Error in `open_payments()`: #> ! An NPI must be 10 digits long. #> ✖ 12345691234 contains 11 digits.  # Must be numeric nppes(npi = \"O12345678912\") #> Error in `nppes()`: #> ! An NPI must be numeric. #> ✖ \"O12345678912\" contains non-numeric characters.  # Must pass Luhn check pending(type = \"physician\", npi = 001234569123) #> Error in `pending()`: #> ! `type` must be one of \"P\" or \"N\", not \"physician\". # Must be 10 digits long affiliations(pac = 0123456789) #> Error in `affiliations()`: #> ! A PAC ID must be 10 digits long. #> ✖ 123456789 contains 9 digits.  # Must be numeric hospitals(pac_org = \"O12345678912\") #> Error in `hospitals()`: #> ! A PAC ID must be numeric. #> ✖ \"O12345678912\" contains non-numeric characters. # Must be a character vector clinicians(enid = 0123456789123456) #> Error in `clinicians()`: #> ! An Enrollment ID must be a <character> vector. #> ✖ 123456789123456 is a <numeric> vector.  # Must be 15 characters long reassignments(enid = \"I123456789123456\") #> Error in `reassignments()`: #> ! An Enrollment ID must be 15 characters long. #> ✖ \"I123456789123456\" contains 16 characters.  # Must begin with a capital I (Individual) or O (Organization/Group) providers(enid = \"L12345678912345\") #> Error in `providers()`: #> ! An Enrollment ID must begin with a capital `I` or `O`. #> ✖ \"L12345678912345\" begins with \"L\".  # Some functions require one of ID types hospitals(enid_org = \"I20180115000174\") #> Error in `hospitals()`: #> ! An org/group Enrollment ID must begin with a capital `O`. #> ✖ \"I20180115000174\" begins with \"I\". # Leading zeros are dropped in an integer vector: 0001 #> [1] 1 # But preserved in a character vector: \"0001\" #> [1] \"0001\""},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2023). provider: Access Public Healthcare Provider Data. https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider.","code":"@Manual{,   title = {provider: Access Public Healthcare Provider Data},   author = {Andrew Bruce},   year = {2023},   note = {https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider}, }"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"provider-","dir":"","previous_headings":"","what":"Access Public Healthcare Provider Data","title":"Access Public Healthcare Provider Data","text":"Providing easy access healthcare provider data publicly available APIs & sources.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access Public Healthcare Provider Data","text":"can install provider GitHub :","code":"# install.packages(\"pak\") pak::pak(\"andrewallenbruce/provider\")"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Access Public Healthcare Provider Data","text":"overarching goal provider make experience accessing publicly-available Provider data easier consistent across variety sources. aims accomplish following general goals, possible: Structuring output tidy framework much reasonably possible, option turn setting tidy = FALSE. Harmonization variable names, express purpose making easier understand (make connections ) API’s output. also allow removal duplicate information across API output, desired. Validation checks inputs, reasonable (e.g, identifiers NPI, PAC ID, Medicare Enrollment ID, CCN, Taxonomy codes). simply good practice, also prevent unnecessary querying APIs. Well-written documentation, containing many examples necessary. API’s output can difficult understand, even someone expertise R, healthcare, .","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"exported-functions","dir":"","previous_headings":"","what":"Exported Functions","title":"Access Public Healthcare Provider Data","text":"API Search functions can grouped according type data return provider: administrative, statistical, auxiliary.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"administrative","dir":"","previous_headings":"Exported Functions","what":"Administrative","title":"Access Public Healthcare Provider Data","text":"nppes(): Registry healthcare providers. providers(): Providers actively enrolled Medicare. opt_out(): Providers currently opted Medicare. revalidation_*(): Link Type-1 Type-2 providers. clinicians(): Provider school, graduation year, linking. affiliations(): Linking providers Facilities. hospitals(): Facilities linked providers.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"statistical","dir":"","previous_headings":"Exported Functions","what":"Statistical","title":"Access Public Healthcare Provider Data","text":"following return provider-specific stats: by_provider(): Yearly high-level utilization data. by_service(): Yearly detailed utilization data. quality_payment(): Yearly QPP/MIPS performance data. quality_eligibility(): Yearly QPP/MIPS eligibility data. open_payments(): Yearly Open Payments reporting data. following return yearly stats useful comparison data returned by_service(): geography() beneficiary() chronic_multiple() chronic_specific()","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"auxiliary","dir":"","previous_headings":"Exported Functions","what":"Auxiliary","title":"Access Public Healthcare Provider Data","text":"order_refer(): provider eligible order refer? missing_endpoints(): provider missing Endpoints NPPES NPI Registry? pending_applications(): provider’s Medicare application processed? taxonomy_crosswalk(): provider’s specialty eligible enroll Medicare?","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Access Public Healthcare Provider Data","text":"","code":"library(provider)"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access Public Healthcare Provider Data","text":"Please note provider project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":null,"dir":"Reference","previous_headings":"","what":"Provider Facility Affiliations — affiliations","title":"Provider Facility Affiliations — affiliations","text":"affiliations() allows user access data concerning providers' facility affiliations Links: Physician Facility Affiliations Certification Number (CCN) State Codes Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provider Facility Affiliations — affiliations","text":"","code":"affiliations(   npi = NULL,   pac = NULL,   first = NULL,   middle = NULL,   last = NULL,   facility_type = NULL,   facility_ccn = NULL,   parent_ccn = NULL,   offset = 0L,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provider Facility Affiliations — affiliations","text":"npi < integer > 10-digit Individual National Provider Identifier pac < integer > 10-digit Individual PECOS Associate Control ID first, middle, last < character > Individual Provider's name facility_type < character > \"Hospital\" \"hp\" \"Long-term care hospital\" \"ltch\" \"Nursing home\" \"nh\" \"Inpatient rehabilitation facility\" \"irf\" \"Home health agency\" \"hha\" \"Skilled nursing facility\" \"snf\" \"Hospice\" \"hs\" \"Dialysis facility\" \"df\" facility_ccn < character > 6-digit CMS Certification Number facility unit within hospital individual provider provides service parent_ccn < integer > 6-digit CMS Certification Number sub-unit's primary hospital, provider provide services said unit offset < integer > // default: 0L API pagination tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provider Facility Affiliations — affiliations","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provider Facility Affiliations — affiliations","text":"","code":"if (FALSE) { # interactive() affiliations(parent_ccn = 670055) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Beneficiary Enrollment in Medicare — beneficiaries","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"beneficiaries() allows user access current data enrolled Medicare beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"","code":"beneficiaries(   year = NULL,   period = NULL,   level = NULL,   state = NULL,   county = NULL,   fips = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"year Calendar year Medicare enrollment; current years can checked : bene_years(\"year\"): Years available 12 months bene_years(\"month\"): Years available individual months period Time frame Medicare enrollment; options : Year Month individual month name level Geographic level data; options : National State County state Full state name abbreviation beneficiary residence county County beneficiary residence fips FIPS code beneficiary residence tidy Tidy output; default TRUE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"medicare-monthly-enrollment","dir":"Reference","previous_headings":"","what":"Medicare Monthly Enrollment","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"Current monthly information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographic areas including national, state county. hospital/medical coverage data can broken health care delivery (Original Medicare versus Medicare Advantage Health Plans) prescription drug coverage data can examined enrolled stand-alone Prescription Drug Plans enrolled Medicare Advantage Prescription Drug plans. dataset includes enrollee counts rolling 12 month basis also provides information yearly trends.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"Medicare Monthly Enrollment Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"","code":"if (FALSE) { # interactive() beneficiaries(year = 2022, period = \"Year\", level = \"County\", county = \"Autauga\") beneficiaries(year = 2022, period = \"July\", state = \"Georgia\") beneficiaries(level = \"State\", fips = \"10\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":null,"dir":"Reference","previous_headings":"","what":"Restructured BETOS Classification for HCPCS — betos","title":"Restructured BETOS Classification for HCPCS — betos","text":"betos() allows user group HCPCS codes clinically meaningful categories based original Berenson-Eggers Type Service (BETOS) classification.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restructured BETOS Classification for HCPCS — betos","text":"","code":"betos(   hcpcs_code = NULL,   category = NULL,   subcategory = NULL,   family = NULL,   procedure = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restructured BETOS Classification for HCPCS — betos","text":"hcpcs_code < character > HCPCS CPT code category < character > RBCS Category Description subcategory < character > RBCS Subcategory Description family < character > RBCS Family Description procedure < character > Whether HCPCS code Major (\"M\"), (\"O\"), Non-Procedure code (\"N\"). tidy < boolean > // default: TRUE Tidy output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restructured BETOS Classification for HCPCS — betos","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"from-betos-to-rbcs","dir":"Reference","previous_headings":"","what":"From BETOS to RBCS","title":"Restructured BETOS Classification for HCPCS — betos","text":"Restructured BETOS Classification System (RBCS) taxonomy allows researchers group Medicare Part B healthcare service codes clinically meaningful categories subcategories. Based original Berenson-Eggers Type Service (BETOS) classification created 1980s, includes notable updates Part B non-physician services undergoes annual updates technical expert panel researchers clinicians. general framework grouping service codes new RBCS taxonomy largely follows structure BETOS. Like BETOS, RBCS groups HCPCS codes categories, subcategories, families – categories aggregate level families granular level. Medicare Part B service codes, including non-physician services, assigned 6-character RBCS taxonomy code. Links: Restructured BETOS Classification System RBCS Data Dictionary Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restructured BETOS Classification for HCPCS — betos","text":"","code":"if (FALSE) { # interactive() betos(hcpcs_code = \"0001U\") betos(category = \"Test\") betos(subcategory = \"General Laboratory\") betos(family = \"Immunoassay\") betos(procedure = \"M\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculations for Providers' stats — calculations","title":"Calculations for Providers' stats — calculations","text":"Functions calculating lagged changes elapsed duration dates.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculations for Providers' stats — calculations","text":"","code":"change(df, cols, digits = 3)  years_df(df, date_col)"},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculations for Providers' stats — calculations","text":"df data frame cols numeric columns digits Number digits round , default 3 date_col date column","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculations for Providers' stats — calculations","text":"tibble number years since today's date","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculations for Providers' stats — calculations","text":"","code":"df <- dplyr::tibble(year = 2015:2020,                     charges = sample(1000:2000, size = 6),                     payment = sample(1000:2000, size = 6))  # Calculate the lagged absolute/relative change # and the cumulative sum of both: change(df, c(charges, payment)) #> # A tibble: 6 × 11 #>    year charges payment charges_chg payment_chg charges_chg_cum payment_chg_cum #>   <int>   <int>   <int>       <int>       <int>           <int>           <int> #> 1  2015    1427    1886           0           0               0               0 #> 2  2016    1104    1335        -323        -551            -323            -551 #> 3  2017    1676    1159         572        -176             249            -727 #> 4  2018    1315    1731        -361         572            -112            -155 #> 5  2019    1946    1935         631         204             519              49 #> 6  2020    1568    1307        -378        -628             141            -579 #> # ℹ 4 more variables: charges_pct <dbl>, payment_pct <dbl>, #> #   charges_pct_cum <dbl>, payment_pct_cum <dbl>  # Calculate the number of years between dates: dplyr::tibble(date = lubridate::today() - 366) |> years_df(date_col = date) #> # A tibble: 1 × 2 #>   date       years_passed #>   <date>            <dbl> #> 1 2022-10-13            1"},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinicians Enrolled in Medicare — clinicians","title":"Clinicians Enrolled in Medicare — clinicians","text":"clinicians() allows access information providers enrolled Medicare, including medical school attended year graduated Links: National Downloadable File Provider Data Catalog (PDC) Data Dictionary Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinicians Enrolled in Medicare — clinicians","text":"","code":"clinicians(   npi = NULL,   pac = NULL,   enid = NULL,   first = NULL,   middle = NULL,   last = NULL,   gender = NULL,   school = NULL,   grad_year = NULL,   specialty = NULL,   facility_name = NULL,   pac_org = NULL,   city = NULL,   state = NULL,   zip = NULL,   offset = 0L,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clinicians Enrolled in Medicare — clinicians","text":"npi < integer > 10-digit Individual National Provider Identifier pac < integer > 10-digit Individual PECOS Associate Control ID enid < character > 15-digit Individual Medicare Enrollment ID first, middle, last < character > Individual provider's name gender < character > Individual provider's gender; \"F\" (Female) \"M\" (Male) school < character > Individual provider’s medical school grad_year < integer > Individual provider’s graduation year specialty < character > Individual provider’s primary medical specialty reported selected enrollment facility_name < character > Name facility associated individual provider pac_org < integer > 10-digit Organizational PECOS Associate Control ID city < character > Provider's city state < character > Provider's state zip < character > Provider's ZIP code offset < integer > // default: 0L API pagination tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinicians Enrolled in Medicare — clinicians","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clinicians Enrolled in Medicare — clinicians","text":"","code":"if (FALSE) { # interactive() clinicians(enid = \"I20081002000549\") clinicians(school = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Yearly Provider Data To State And National Averages — compare","title":"Compare Yearly Provider Data To State And National Averages — compare","text":"compare_hcpcs() allows user compare provider's yearly HCPCS utilization data state national averages compare_conditions() allows user compare average yearly prevalence chronic conditions among provider's patient mix state national averages","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Yearly Provider Data To State And National Averages — compare","text":"","code":"compare_hcpcs(serv_tbl)  compare_conditions(prov_tbl, pivot = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Yearly Provider Data To State And National Averages — compare","text":"serv_tbl < tbl_df > // required tibble returned by_service() prov_tbl < tbl_df > // required tibble returned by_provider() pivot < boolean > // default: TRUE Pivot output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Yearly Provider Data To State And National Averages — compare","text":"tibble containing: compare_hcpcs() compare_conditions()","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Yearly Provider Data To State And National Averages — compare","text":"","code":"if (FALSE) { # interactive() compare_hcpcs(by_service(year = 2018, npi = 1023076643)) compare_conditions(by_provider(year = 2018, npi = 1023076643))  compare_hcpcs(map_dfr(prac_years(), ~by_service(year = .x, npi = 1023076643))) compare_conditions(map_dfr(prac_years(), ~by_provider(year = .x, npi = 1023076643))) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Chronic Conditions — conditions","title":"Chronic Conditions — conditions","text":"conditions() allows user access data concerning chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chronic Conditions — conditions","text":"","code":"conditions(   year,   condition = NULL,   sublevel = NULL,   set = c(\"multiple\", \"specific\"),   level = NULL,   fips = NULL,   age = NULL,   demo = NULL,   subdemo = NULL,   mcc = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chronic Conditions — conditions","text":"year < integer > // required Calendar year Medicare enrollment, YYYY format. Run cc_years() return vector currently available years. condition < character > Chronic condition prevalence utilization compiled (see list conditions) sublevel < character > Beneficiary's state county set < character > // required \"multiple\" \"specific\" level < character > Geographic level aggregation: \"national\", \"state\", \"county\" fips < character > Beneficiary's state county FIPS code age < character > Age level aggregation: \"\", \"<65\", \"65+\" demo, subdemo < character > Demographic, subdemographic level aggregation: \"\", \"sex\" (\"male\", \"female\"), \"race\" (\"white\", \"black\", \"island\", \"hispanic\", \"native\"), \"dual\" (\"nondual\", \"dual\"). mcc < character > Number chronic conditions: \"0-1\", \"2-3\", \"4-5\", \"6+\" tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chronic Conditions — conditions","text":"tibble following columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"set-specific-","dir":"Reference","previous_headings":"","what":"set = \"specific\"","title":"Chronic Conditions — conditions","text":"Specific Chronic Conditions dataset provides information prevalence, use spending organized geography 21 distinct chronic conditions among Original Medicare beneficiaries: Alcohol Abuse Alzheimer’s Disease/Dementia Arthritis Asthma Atrial Fibrillation Autism Spectrum Disorders Cancer Chronic Kidney Disease COPD Depression Diabetes Drug Abuse/Substance Abuse Heart Failure Hepatitis (Chronic Viral B & C) HIV/AIDS Hyperlipidemia Hypertension Ischemic Heart Disease Osteoporosis Schizophrenia Psychotic Disorders Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"set-multiple-","dir":"Reference","previous_headings":"","what":"set = \"multiple\"","title":"Chronic Conditions — conditions","text":"Multiple Chronic Conditions dataset provides information prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories: 0-1 2-3 4-5 6 ","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"prevalence","dir":"Reference","previous_headings":"","what":"Prevalence","title":"Chronic Conditions — conditions","text":"Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"hospital-readmission-rates","dir":"Reference","previous_headings":"","what":"Hospital Readmission Rates","title":"Chronic Conditions — conditions","text":"Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, .","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"emergency-department-visits","dir":"Reference","previous_headings":"","what":"Emergency Department Visits","title":"Chronic Conditions — conditions","text":"Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"payment-per-capita","dir":"Reference","previous_headings":"","what":"Payment Per Capita","title":"Chronic Conditions — conditions","text":"Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Chronic Conditions — conditions","text":"Medicare Multiple Chronic Conditions Medicare Specific Chronic Conditions","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chronic Conditions — conditions","text":"","code":"if (FALSE) { # interactive() conditions(year = 2018, set = \"specific\", sublevel = \"CA\", demo = \"all\") conditions(year = 2018, set = \"specific\", sublevel = \"CA\", subdemo = \"female\", age = \"all\") conditions(year = 2018, set = \"multiple\", sublevel = \"California\", subdemo = \"female\")  conditions(year = 2007, set = \"specific\", level = \"national\", demo = \"race\") conditions(year = 2007, set = \"multiple\", level = \"national\", demo = \"race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Current NUCC Taxonomy CSV — download_nucc_csv","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"download_nucc_csv() allows download csv file current Health Care Provider Taxonomy code set NUCC website","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"taxonomy-codes","dir":"Reference","previous_headings":"","what":"Taxonomy Codes","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. code set structured three distinct \"Levels\": Level (Provider Grouping): major grouping service(s) occupation(s) health care providers. example: Allopathic & Osteopathic Physicians, Dental Providers, Hospitals, etc. Level II: (Classification): specific service occupation related Provider Grouping. example, Classification Allopathic & Osteopathic Physicians based upon General Specialty Certificates issued appropriate national boards. following boards however, general certificates appear Level III areas specialization strictly due display limitations code set Boards multiple general certificates: Medical Genetics, Preventive Medicine, Psychiatry & Neurology, Radiology, Surgery, Otolaryngology, Pathology. Level III: (Area Specialization): specialized area Classification provider chooses practice make services available. example, Area Specialization provider type Allopathic & Osteopathic Physicians based upon Subspecialty Certificates issued appropriate national boards. Health Care Provider Taxonomy code set Levels organized allow drilling provider's specific level specialization. ten digit codes provider category unique contain embedded logic. codes categories used exactly assigned Taxonomy list. time codes separated form new codes, parsed apart, edited one position within code.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"","code":"download_nucc_csv()"},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"https://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57 Update Frequency: Biannually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"\"230\" designation indicates version code set. NUCC updates set every six months. \"23\" indicates year \"0\" indicates first update year. taxonomy code display name consumer-friendly name code. display name combination code name Level code nested, precisely identifies code.  example, Addiction Medicine physician subspecialty Anesthesiology, Family Medicine, Internal Medicine, Preventive Medicine, Psychiatry & Neurology. Seeing “Addiction Medicine” identify specialty physician, display name “Addiction Medicine (Internal Medicine) Physician” clearly . another example, code “Radiology” confused several codes, “Radiology Chiropractor” specifies exact provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"how-many-categories-are-there-","dir":"Reference","previous_headings":"","what":"How Many Categories are There?","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. Health Care Provider Taxonomy code set includes specialty categories individuals, Groups individuals, non-individuals. Individual Category includes: Allopathic & Osteopathic Physicians Behavioral Health Social Service Providers Chiropractic Providers Dental Providers Dietary Nutritional Service Providers Emergency Medical Service Providers Eye Vision Service Providers Nursing Service Providers Nursing Service Related Providers Service Providers Pharmacy Service Providers Physician Assistants Advanced Practice Nursing Providers Podiatric Medicine Surgery Service Providers Respiratory, Developmental, Rehabilitative Restorative Service Providers Speech, Language Hearing Service Providers Student, Health Care Technologists, Technicians, Technical Service Providers Group (Individuals) Category includes: Multi-Specialty Single Specialty Non-Individual Category includes: Agencies Ambulatory Health Care Facilities Hospital Units Hospitals Laboratories Managed Care Organizations Nursing Custodial Care Facilities Service Providers Residential Treatment Facilities Respite Care Facilities Suppliers Transportation Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"description","dir":"Reference","previous_headings":"","what":"Description","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"code: Taxonomy Code grouping: Level , Provider Grouping classification: Level II, Classification specialization: Level III, Area Specialization definition: Definition Taxonomy notes: Notes pertaining Taxonomy, e.g. sources, date modified, date implemented, etc. display_name: consumer-friendly name taxonomy code; combination code name Level code nested. section: Indicates whether Taxonomy Individual Non-Individual, .e., group taxonomy","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"","code":"if (FALSE) { # interactive() download_nucc_csv() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":null,"dir":"Reference","previous_headings":"","what":"Hospitals Enrolled in Medicare — hospitals","title":"Hospitals Enrolled in Medicare — hospitals","text":"hospitals() allows user search information hospitals currently enrolled Medicare. Data returned includes hospital's sub-group types, legal business name, -business-name, organization type address. Hospital Enrollments Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hospitals Enrolled in Medicare — hospitals","text":"","code":"hospitals(   npi = NULL,   facility_ccn = NULL,   enid_org = NULL,   enid_state = NULL,   pac_org = NULL,   specialty_code = NULL,   organization = NULL,   dba = NULL,   city = NULL,   state = NULL,   zip = NULL,   registration = NULL,   multi_npi = NULL,   gen = NULL,   acute = NULL,   alc_drug = NULL,   child = NULL,   long = NULL,   short = NULL,   psych = NULL,   rehab = NULL,   swing = NULL,   psych_unit = NULL,   rehab_unit = NULL,   spec = NULL,   other = NULL,   reh = NULL,   tidy = TRUE,   pivot = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hospitals Enrolled in Medicare — hospitals","text":"npi < integer > 10-digit Organizational National Provider Identifier facility_ccn < integer > 6-digit CMS Certification Number enid_org < character > 15-digit Organizational Medicare Enrollment ID enid_state < character > Hospital’s enrollment state pac_org < integer > 10-digit Organizational PECOS Associate Control ID specialty_code < character > Medicare Part Provider specialty code: \"00-00\": Religious Non-Medical Healthcare Institution (RNHCI) \"00-01\": Community Mental Health Center \"00-02\": Comprehensive Outpatient Rehabilitation Facility (CORF) \"00-03\": End-Stage Renal Disease Facility (ESRD) \"00-04\": Federally Qualified Health Center (FQHC) \"00-05\": Histocompatibility Laboratory \"00-06\": Home Health Agency (HHA) \"00-08\": Hospice \"00-09\": Hospital \"00-10\": Indian Health Services Facility \"00-13\": Organ Procurement Organization (OPO) \"00-14\": Outpatient PT/Occupational Therapy/Speech Pathology \"00-17\": Rural Health Clinic (RHC) \"00-18\": Skilled Nursing Facility (SNF) \"00-19\": \"00-24\": Rural Emergency Hospital (REH) \"00-85\": Critical Access Hospital (CAH) organization < character > Hospital’s legal business name dba < character > Hospital’s -business-name city < character > City hospital’s practice location state < character > State hospital’s practice location zip < integer > Zip code hospital’s practice location registration < character > Hospital's IRS designation: \"P\": Registered Proprietor \"N\": Registered Non-Profit multi_npi < boolean > Indicates hospital one NPI gen, acute, alc_drug, child, long, short, psych, rehab, swing, psych_unit, rehab_unit, spec, < boolean > Indicates hospital’s subgroup/unit designation: acute: Acute Care alc_drug: Alcohol/Drug child: Children's Hospital gen: General long: Long-Term short: Short-Term psych: Psychiatric rehab: Rehabilitation swing: Swing-Bed Approved psych_unit: Psychiatric Unit rehab_unit: Rehabilitation Unit spec: Specialty Hospital : listed CMS form reh < boolean > Indicates former Hospital Critical Access Hospital (CAH) converted Rural Emergency Hospital (REH) tidy < boolean > // default: TRUE Tidy output pivot < boolean > // default: TRUE Pivot output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hospitals Enrolled in Medicare — hospitals","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hospitals Enrolled in Medicare — hospitals","text":"","code":"hospitals(pac_org = 6103733050) #> # A tibble: 28 × 19 #>    npi      pac_org enid_org enid_state facility_ccn organization specialty_code #>    <chr>    <chr>   <chr>    <chr>      <chr>        <chr>        <chr>          #>  1 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #>  2 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #>  3 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #>  4 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #>  5 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #>  6 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #>  7 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #>  8 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #>  9 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #> 10 1164481… 610373… O200209… NY         330246       ST CHARLES … 00-09          #> # ℹ 18 more rows #> # ℹ 12 more variables: specialty <chr>, incorp_date <date>, incorp_state <chr>, #> #   structure <chr>, address <chr>, city <chr>, state <chr>, zip <chr>, #> #   location_type <chr>, multi_npi <lgl>, subgroup <chr>, flag <lgl>  hospitals(state = \"GA\", reh = TRUE) #> # A tibble: 14 × 21 #>    npi   pac_org enid_org enid_state facility_ccn organization doing_business_as #>    <chr> <chr>   <chr>    <chr>      <chr>        <chr>        <chr>             #>  1 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #>  2 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #>  3 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #>  4 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #>  5 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #>  6 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #>  7 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #>  8 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #>  9 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #> 10 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #> 11 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #> 12 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #> 13 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #> 14 1720… 761895… O202303… GA         110779       IRWIN COUNT… PROGRESSIVE MEDI… #> # ℹ 14 more variables: specialty_code <chr>, specialty <chr>, #> #   incorp_state <chr>, structure <chr>, address <chr>, city <chr>, #> #   state <chr>, zip <chr>, location_type <chr>, multi_npi <lgl>, #> #   reh_date <date>, reh_ccns <chr>, subgroup <chr>, flag <lgl>"},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Laboratories — laboratories","title":"Clinical Laboratories — laboratories","text":"laboratories() allows search information clinical laboratories including demographics type testing services facility provides.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Laboratories — laboratories","text":"","code":"laboratories(   name = NULL,   clia = NULL,   certificate = NULL,   city = NULL,   state = NULL,   zip = NULL,   active = FALSE,   tidy = TRUE,   na.rm = TRUE,   pivot = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clinical Laboratories — laboratories","text":"name < character > Provider clinical laboratory's name clia < character > 10-character CLIA number certificate < character > CLIA certificate type: \"waiver\" \"ppm\" \"registration\" \"compliance\" \"accreditation\" city < character > City state < character > State zip < character > Zip code active < boolean > // default: FALSE Return active providers tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns pivot < boolean > // default: TRUE Pivot output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinical Laboratories — laboratories","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"clinical-laboratory-improvement-amendments-clia-","dir":"Reference","previous_headings":"","what":"Clinical Laboratory Improvement Amendments (CLIA)","title":"Clinical Laboratories — laboratories","text":"CMS regulates laboratory testing (except research) performed humans U.S. Clinical Laboratory Improvement Amendments (CLIA). total, CLIA covers approximately 320,000 laboratory entities. Division Clinical Laboratory Improvement & Quality, within Quality, Safety & Oversight Group, Center Clinical Standards Quality (CCSQ) responsibility implementing CLIA Program. Although clinical laboratories must properly certified receive Medicare Medicaid payments, CLIA direct Medicare Medicaid program responsibilities.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"clia-certificates","dir":"Reference","previous_headings":"","what":"CLIA Certificates","title":"Clinical Laboratories — laboratories","text":"five CLIA certificate types effective period two years. follows, order increasing complexity: Certificate Waiver: Issued laboratory perform waived tests; waive lab CLIA requirements. Waived tests laboratory tests simple perform. Routine inspections conducted waiver labs, although 2% visited year ensure quality laboratory testing. Certificate Provider-Performed Microscopy Procedures (PPM): Issued laboratory physician, midlevel practitioner dentist performs limited tests require microscopic examination. PPM tests considered moderate complexity. Waived tests can also performed certificate type. routine inspections conducted PPM labs. Certificate Registration: Initially issued laboratory applied Certificate Compliance Accreditation, enabling lab conduct moderate/high complexity testing survey performed laboratory found CLIA compliance. Includes PPM waived testing. Certificate Compliance: Allows laboratory conduct moderate/high complexity testing issued inspection finds lab compliance applicable CLIA requirements. Includes PPM waived testing. Certificate Accreditation: Exactly Certificate Compliance, except laboratory must accredited one following CMS-approved accreditation organizations: American Association Laboratory Accreditation (A2LA) Association Advancement Blood & Biotherapies (AABB) American Osteopathic Association (AOA) American Society Histocompatibility Immunogenetics (ASHI) College American Pathologists (CAP) Commission Office Laboratory Accreditation (COLA) Joint Commission (JCAHO) Links: Provider Services File - Clinical Laboratories Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clinical Laboratories — laboratories","text":"","code":"laboratories(clia = \"11D0265516\") #> # A tibble: 1 × 23 #>   clia_number name            certificate effective_date expiration_date expired #>   <chr>       <chr>           <chr>       <date>         <date>          <lgl>   #> 1 11D0265516  DANIEL FELDMAN… Compliance  1996-08-29     1998-08-04      TRUE    #> # ℹ 17 more variables: termination_reason <chr>, status <chr>, poc_ind <lgl>, #> #   type_of_action <chr>, ownership_type <chr>, facility_type <chr>, #> #   director_affiliations <chr>, address <chr>, city <chr>, state <chr>, #> #   zip <chr>, phone <chr>, orig_part_date <date>, application_date <date>, #> #   certification_date <date>, mailed_date <date>, clia_class_current <chr>"},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":null,"dir":"Reference","previous_headings":"","what":"2021 Quality Payment Performance — mips_2021","title":"2021 Quality Payment Performance — mips_2021","text":"Performance information Merit-Based Incentive Payment System (MIPS) submitted groups.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2021 Quality Payment Performance — mips_2021","text":"","code":"mips_2021(   facility_name = NULL,   pac_id_org = NULL,   npi = NULL,   pac_id_ind = NULL,   first_name = NULL,   last_name = NULL,   offset = 0L,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2021 Quality Payment Performance — mips_2021","text":"facility_name Organization name pac_id_org Unique organization ID assigned PECOS npi Unique clinician ID assigned NPPES pac_id_ind Unique individual clinician ID assigned PECOS first_name Individual clinician first name last_name Individual clinician last name offset offset; API pagination tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2021 Quality Payment Performance — mips_2021","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2021 Quality Payment Performance — mips_2021","text":"","code":"if (FALSE) { # interactive() mips_2021(pac_id_org = 4789842956) mips_2021(npi = 1316172182) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":null,"dir":"Reference","previous_headings":"","what":"National Registry of Health Care Providers — nppes","title":"National Registry of Health Care Providers — nppes","text":"nppes() allows user search National Plan Provider Enumeration System (NPPES) NPI Registry, free directory active NPI records. National Provider Identifier (NPI) Healthcare providers acquire unique 10-digit NPIs identify standard way throughout industry. CMS supplies NPI, publish parts NPI record public relevance, including provider’s name, taxonomy practice address. Entity/Enumeration Type Two categories health care providers exist NPI enumeration purposes: Type 1: Individual providers may get NPI Entity Type 1. Sole Proprietorship sole proprietor one conduct business corporation , thus, incorporated individual. incorporated individual individual provider forms conducts business corporation. provider may Type 1 NPI corporation Type 2 NPI. solo practitioner necessarily sole proprietor, vice versa. following factors affect whether sole proprietor Type 1 entity: Multiple office locations employees EIN Type 2: Organizational providers eligible Entity Type 2 NPIs. Organizational Group providers may single employee thousands employees. example incorporated individual organization's employee. organization health care providers made parts work somewhat independently parent organization. parts may offer different types health care offer health care separate physical locations. parts physical locations legal entities part organization health care provider (legal entity). NPI Final Rule refers parts locations sub-parts. organization health care provider can get sub-parts NPIs. sub-part conducts HIPAA standard transactions (separately parent), must get NPI. Sub-part determination makes sure entities within covered organization uniquely identified HIPAA standard transactions conduct Medicare covered entities. example, hospital offers acute care, laboratory, pharmacy, rehabilitation services. sub-parts may need NPI sends standard transactions one health plans. Sub-part delegation affect Entity Type 1 health care providers. individuals, health care providers choose sub-parts sub-parts. Authorized Official  appointed official (e.g., chief executive officer, chief financial officer, general partner, chairman board, direct owner) organization granted legal authority enroll Medicare program, make changes updates organization's status Medicare program, commit organization fully abide statutes, regulations, program instructions Medicare program. Links NPPES NPI Registry API Documentation NPPES NPI Registry API Demo Trailing Wildcard Entries Arguments allow trailing wildcard entries denoted parameter description // __WC__. Wildcard entries require least two characters entered, e.g. \"jo*\" Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"National Registry of Health Care Providers — nppes","text":"","code":"nppes(   npi = NULL,   entype = NULL,   first = NULL,   last = NULL,   organization = NULL,   name_type = NULL,   taxonomy_desc = NULL,   city = NULL,   state = NULL,   zip = NULL,   country = NULL,   limit = 1200L,   skip = 0L,   unnest = TRUE,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"National Registry of Health Care Providers — nppes","text":"npi < integer | character > 10-digit Organizational National Provider Identifier entype < character > Entity/enumeration type criteria entered. \"\": Individual provider (NPI-1) \"O\": Organizational provider (NPI-2) first, last < character > // WC Individual provider's name organization < character > // WC Organization's name. Many types names (LBN, DBA, Former LBN, Name) may match. , results might contain name different one entered. name_type < character > Type individual name arguments refer : \"AO\": search Authorized Officials \"Provider\": search Individual Providers taxonomy_desc < character > Provider's taxonomy description, e.g. \"Pharmacist\", \"Pediatrics\" city < character > Provider's city. search military address, enter either \"APO\" \"FPO\". state < character > Provider's state abbreviation. input, one param besides entype country must input. zip < character > // WC Provider's zip code country < character > Provider's country code. Can used input, long input \"US\". limit < integer > // default: 1200L Max results return skip < integer > // default: 0L Number results skip returned unnest < boolean > // default: TRUE Unnest list columns tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"National Registry of Health Care Providers — nppes","text":"tibble containing search results.","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"National Registry of Health Care Providers — nppes","text":"","code":"if (FALSE) { # interactive() nppes(npi = 1528060837)  nppes(city = \"CARROLLTON\", state = \"GA\", zip = 301173889) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":null,"dir":"Reference","previous_headings":"","what":"Provider Financial Relationships — open_payments","title":"Provider Financial Relationships — open_payments","text":"open_payments() allows user access CMS' Open Payments Program API Open Payments program national disclosure program collects publishes information financial relationships drug medical device companies (referred \"reporting entities\") certain health care providers (referred \"covered recipients\"). relationships may involve payments providers things including limited research, meals, travel, gifts speaking fees. Applicable Group Purchasing Organizations (GPOs): Entities operate United States purchase, arrange negotiate purchase covered drugs, devices, biologicals, medical supplies group individuals entities, solely use entity . Applicable Manufacturers: Entities operate United States (1) engaged production, preparation, propagation, compounding, conversion covered drug, device, biological, medical supply, covered drug, device, biological medical supply solely use within entity entity's patients (definition include distributors wholesalers (including, limited , re-packagers, re-labelers, kit assemblers) hold title covered drug, device, biological medical supply); (2) entities common ownership entity described part (1) definition, provides assistance support entities respect production, preparation, propagation, compounding, conversion, marketing, promotion, sale, distribution covered drug, device, biological medical supply. Reporting Entities: Applicable manufacturers GPOs. Covered Recipients: physician, physician assistant, nurse practitioner, clinical nurse specialist, certified registered nurse anesthetist, certified nurse-midwife bona fide employee applicable manufacturer reporting payment; teaching hospital, institution received payment. Teaching Hospitals: Hospitals receive payment Medicare direct graduate medical education (GME), IPPS indirect medical education (IME), psychiatric hospital IME programs. Natures Payment: Categories must used describe payment transfer value made. applicable “general” payment type, research ownership. categories : Acquisitions (2021 - current) Charitable contributions Compensation services consulting Compensation serving faculty speaker : accredited certified continuing education program (2013 - 2020) unaccredited non-certified continuing education program (2013 - 2020) medical education program (2021 - current) Consulting fees Current prospective ownership investment interest (prior 2023) Debt Forgiveness (2021 - current) Education Entertainment Food beverage Gift Grant Honoraria Long-term medical supply device loan (2021 - current) Royalty license Space rental facility fees (Teaching Hospitals ) Travel lodging Transfers Value: Anything value given applicable manufacturer applicable GPO covered recipient physician owner/investor fall within one excluded categories rule. Ownership Investment Interests include, limited : Stock Stock option(s) (received compensation, exercised) Partnership share(s) Limited liability company membership(s) Loans Bonds Financial instruments secured entity’s property revenue may direct indirect debt, equity means. Links: Open Payments Program? Open Payments: General Resources Update Frequency: Yearly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provider Financial Relationships — open_payments","text":"","code":"open_payments(   year,   npi = NULL,   covered_type = NULL,   first = NULL,   last = NULL,   city = NULL,   state = NULL,   zip = NULL,   teaching_hospital = NULL,   payer = NULL,   payer_id = NULL,   pay_form = NULL,   pay_nature = NULL,   offset = 0L,   tidy = TRUE,   pivot = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provider Financial Relationships — open_payments","text":"year < integer > // required Year data reported, YYYY format. Run open_years() return vector years currently available. npi < integer > Covered recipient's 10-digit National Provider Identifier covered_type < character > Type covered recipient: \"Physician\" \"Non-Physician Practitioner\" \"Teaching Hospital\" first, last < character > Covered recipient's name city < character > Covered recipient's city state < character > Covered recipient's state abbreviation zip < character > Covered recipient's zip code teaching_hospital < character > Name teaching hospital, e.g. \"Vanderbilt University Medical Center\" payer < character > Paying entity's name, e.g. \"Pharmacosmos Therapeutics Inc.\" \"Getinge USA Sales, LLC\" \"Agiliti Health, Inc.\" \"OrthoScan, Inc.\" payer_id < integer > Paying entity's unique Open Payments ID pay_form < character > Form payment: \"Stock option\" \"Cash cash equivalent\" \"-kind items services\" pay_nature < character > Nature payment transfer value: \"Royalty License\" \"Charitable Contribution\" \"Current prospective ownership investment interest\" \"Food Beverage\" offset < integer > // default: 0L API pagination tidy < boolean > // default: TRUE Tidy output pivot < boolean > // default: TRUE Pivot output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provider Financial Relationships — open_payments","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provider Financial Relationships — open_payments","text":"","code":"if (FALSE) { # interactive() open_payments(year = 2021, npi = 1043218118) open_payments(year = 2021, pay_nature = \"Royalty or License\") open_payments(year = 2021, pay_form = \"Stock option\") open_payments(year = 2021, payer = \"Adaptive Biotechnologies Corporation\") open_payments(year = 2021, teaching_hospital = \"Nyu Langone Hospitals\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Providers Opted Out of Medicare — opt_out","title":"Providers Opted Out of Medicare — opt_out","text":"opt_out() allows user access information providers decided participate Medicare. Medicare Opt Affidavits API","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Providers Opted Out of Medicare — opt_out","text":"","code":"opt_out(   npi = NULL,   first = NULL,   last = NULL,   specialty = NULL,   address = NULL,   city = NULL,   state = NULL,   zip = NULL,   order_refer = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Providers Opted Out of Medicare — opt_out","text":"npi < integer > 10-digit Opt-National Provider Identifier first, last < character > Opt-provider's name specialty < character > Opt-provider's specialty address < character > Opt-provider's address city < character > Opt-provider's city state < character > Opt-provider's state abbreviation zip < character > Opt-provider's zip code order_refer < boolean > Indicates order refer eligibility tidy < boolean > // default: TRUE Tidy output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Providers Opted Out of Medicare — opt_out","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"opting-out","dir":"Reference","previous_headings":"","what":"Opting Out","title":"Providers Opted Out of Medicare — opt_out","text":"Providers wish enroll Medicare program may “opt-”, meaning neither beneficiary can bill Medicare services rendered. Instead, private contract provider beneficiary signed, neither party reimbursed Medicare beneficiary pays provider --pocket. opt , provider must: eligible specialty type Submit opt-affidavit Medicare Enter private contract Medicare patients, reflecting agreement pay --pocket one submit bill Medicare reimbursement","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"opt-out-periods","dir":"Reference","previous_headings":"","what":"Opt-Out Periods","title":"Providers Opted Out of Medicare — opt_out","text":"Opt-periods last two years terminated early unless provider opting first time terminates opt-later 90 days opt-period's effective date. Opt-statuses also effective two years automatically renew. Providers want extend opt-status end opt-period may cancel notifying MACs affidavit filed least 30 days prior start next opt-period. provider retires, surrenders license, longer wants participate Medicare program, must officially withdraw within 90 days. DMEPOS suppliers must withdraw within 30 days. Providers may opt-intend Medicare Advantage (Part C) provider furnish services covered traditional Medicare fee--service (Part B). Update Frequency: Monthly","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Providers Opted Out of Medicare — opt_out","text":"","code":"opt_out(npi = 1043522824) #> # A tibble: 1 × 12 #>   npi        first last  specialty order_refer optout_start_date optout_end_date #>   <chr>      <chr> <chr> <chr>     <lgl>       <date>            <date>          #> 1 1043522824 James Smith Nurse Pr… TRUE        2019-07-01        2025-07-01      #> # ℹ 5 more variables: last_updated <date>, address <chr>, city <chr>, #> #   state <chr>, zip <chr>  if (FALSE) { # interactive() # For opt-out providers eligible # to order and refer, use [order_refer()] # to look up their eligibility status:  opt_out(npi = 1043522824) |>         pull(npi) |>         map(\\(x) order_refer(npi = x)) |>         list_rbind() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":null,"dir":"Reference","previous_headings":"","what":"Order and Referral Eligibility — order_refer","title":"Order and Referral Eligibility — order_refer","text":"order_refer() returns provider's eligibility order refer within Medicare : Part B: Clinical Laboratory Services, Imaging Services DME: Durable Medical Equipment, Prosthetics, Orthotics, & Supplies (DMEPOS) Part : Home Health Services eligible, provider must: Individual NPI enrolled Medicare either Approved Opt-status Eligible Specialty type Ordering Providers can order non-physician services patients. Referring (Certifying) Providers can request items services Medicare may reimburse behalf beneficiaries. Opt-Providers: Providers opted Medicare may still order refer. can also enroll solely order refer.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order and Referral Eligibility — order_refer","text":"","code":"order_refer(   npi = NULL,   first = NULL,   last = NULL,   partb = NULL,   dme = NULL,   hha = NULL,   pmd = NULL,   tidy = TRUE,   pivot = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order and Referral Eligibility — order_refer","text":"npi < integer > 10-digit national provider identifier first, last < character > Individual provider's first/last name partb, dme, hha, pmd < boolean > Whether provider eligible order refer : partb: Medicare Part B dme: Durable Medical Equipment hha: Home Health Agency pmd: Power Mobility Devices tidy < boolean > // default: TRUE Tidy output pivot < boolean > // default: TRUE Pivot output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order and Referral Eligibility — order_refer","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Order and Referral Eligibility — order_refer","text":"links: Medicare Order Referring API CMS.gov: Ordering & Certifying Order Referring Methodology Update Frequency: Twice Weekly","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order and Referral Eligibility — order_refer","text":"","code":"order_refer(npi = 1003026055) #> # A tibble: 4 × 4 #>   npi        first   last   service                   #>   <chr>      <chr>   <chr>  <chr>                     #> 1 1003026055 RADHIKA PHADKE Medicare Part B           #> 2 1003026055 RADHIKA PHADKE Home Health Agency        #> 3 1003026055 RADHIKA PHADKE Durable Medical Equipment #> 4 1003026055 RADHIKA PHADKE Power Mobility Devices     # Filter for certain privileges order_refer(last = \"Smith\", partb = FALSE, hha = TRUE) #> # A tibble: 6 × 4 #>   npi        first last  service                   #>   <chr>      <chr> <chr> <chr>                     #> 1 1215946959 LISA  SMITH Home Health Agency        #> 2 1215946959 LISA  SMITH Durable Medical Equipment #> 3 1215946959 LISA  SMITH Power Mobility Devices    #> 4 1619457686 NAKIA SMITH Home Health Agency        #> 5 1619457686 NAKIA SMITH Durable Medical Equipment #> 6 1619457686 NAKIA SMITH Power Mobility Devices"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":null,"dir":"Reference","previous_headings":"","what":"Pending Medicare Enrollment Applications — pending","title":"Pending Medicare Enrollment Applications — pending","text":"pending() allows user search providers pending Medicare enrollment applications.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pending Medicare Enrollment Applications — pending","text":"","code":"pending(type, npi = NULL, first = NULL, last = NULL, tidy = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pending Medicare Enrollment Applications — pending","text":"type < character > // required Physician (\"P\") Non-physician (\"N\") npi < integer > 10-digit National Provider Identifier first, last < character > Provider's name tidy < boolean > // default: TRUE Tidy output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pending Medicare Enrollment Applications — pending","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pending Medicare Enrollment Applications — pending","text":"APIs: Medicare Pending Initial Logging Tracking Physicians API Medicare Pending Initial Logging Tracking Non-Physicians API Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pending Medicare Enrollment Applications — pending","text":"","code":"if (FALSE) { # interactive() pending(type = \"N\", last = \"Smith\")  pending(type = \"P\", first = \"John\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider-package.html","id":null,"dir":"Reference","previous_headings":"","what":"provider: Access Public Healthcare Provider Data — provider-package","title":"provider: Access Public Healthcare Provider Data — provider-package","text":"Provides various features facilitate easy access publicly available healthcare provider data. Includes functions tidy data accessed, whether reporting purposes updating internal records.","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/provider-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"provider: Access Public Healthcare Provider Data — provider-package","text":"Maintainer: Andrew Bruce andrewbruce.himni@gmail.com [copyright holder]","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":null,"dir":"Reference","previous_headings":"","what":"Provider Enrollment in Medicare — providers","title":"Provider Enrollment in Medicare — providers","text":"providers() allows access enrollment level data individual organizational providers actively approved bill Medicare. Links: Provider Enrollment API Provider Enrollment Data Dictionary Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provider Enrollment in Medicare — providers","text":"","code":"providers(   npi = NULL,   pac = NULL,   enid = NULL,   specialty_code = NULL,   specialty_description = NULL,   first = NULL,   middle = NULL,   last = NULL,   organization = NULL,   state = NULL,   gender = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provider Enrollment in Medicare — providers","text":"npi < integer > 10-digit national provider identifier pac < integer > 10-digit PECOS Associate Control ID enid < character > 15-digit Medicare Enrollment ID specialty_code < character > Enrollment specialty code specialty_description < character > Enrollment specialty description first, middle, last < character > Individual provider's name organization < character > Organizational provider's name state < character > Enrollment state, full abbreviation gender < character > Provider's gender: \"F\": Female \"M\": Male \"9\": Unknown (Organizational provider) tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provider Enrollment in Medicare — providers","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provider Enrollment in Medicare — providers","text":"","code":"if (FALSE) { # interactive() providers(npi = 1417918293, specialty_code = \"14-41\") providers(pac = 2860305554, gender = \"9\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Payment Program Experience — quality_payment","title":"Quality Payment Program Experience — quality_payment","text":"Information participation performance Merit-based Incentive Payment System (MIPS) Advanced Alternative Payment Models (APMs) tracks. Data pulled across CMS used create eligibility determination clinician. Using CMS knows clinician billing patterns enrollments, eligibility \"calculated\" multiple times performance year. Data pulled across CMS used create eligibility determination clinician. Using CMS knows clinician billing patterns enrollments, eligibility \"calculated\" multiple times performance year.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Payment Program Experience — quality_payment","text":"","code":"quality_payment(   year,   npi = NULL,   state = NULL,   specialty = NULL,   participation_type = NULL,   tidy = TRUE,   nest = TRUE,   na.rm = TRUE )  quality_eligibility(year, npi = NULL, tidy = TRUE)  quality_stats(year)"},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Payment Program Experience — quality_payment","text":"year QPP program year npi NPI assigned clinician enrolled Medicare. state State US territory code location TIN associated clinician. specialty specialty description identifier corresponding type service clinician submitted Medicare Part B claims TIN/NPI combination. participation_type Indicates level performance data collected, submitted reported final score attributed clinician. information drives data displayed remaining fields report. tidy Tidy output; default TRUE. nest < boolean > // default: TRUE Nest output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Payment Program Experience — quality_payment","text":"tibble containing search results. tibble containing search results. tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quality Payment Program Experience — quality_payment","text":"Quality Payment Program (QPP) Experience dataset provides participation performance information Merit-based Incentive Payment System (MIPS) performance year. cover eligibility participation, performance categories, final score payment adjustments. dataset provides additional details TIN/NPI level published previous performance year. can sort data variables like clinician type, practice size, scores, payment adjustments. Quality Payment Program (QPP) Eligibility System pulls together data across Centers Medicare Medicaid Services (CMS) create eligibility determination every clinician system. Using CMS knows clinician billing patterns enrollments, eligibility \"calculated\" multiple times performance year. Information can obtained primarily Clinician type. can query Clinician type passing National Provider Identifier, NPI. number unique 10-digit identification number issued health care providers United States CMS. information contained endpoints includes basic enrollment information, associated organizations, information organizations, individual group special status information, future, available Alternative Payment Model (APM) affiliations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Quality Payment Program Experience — quality_payment","text":"Quality Payment Program Experience QPP Eligibility API Documentation QPP Eligibility API Documentation","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"update-frequency","dir":"Reference","previous_headings":"","what":"Update Frequency","title":"Quality Payment Program Experience — quality_payment","text":"Annually Annually Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality Payment Program Experience — quality_payment","text":"","code":"if (FALSE) { # interactive() quality_payment(year = 2020, npi = 1144544834) } if (FALSE) { # interactive() quality_eligibility(year = 2020, npi = 1144544834) } quality_stats(year = 2020) #> # A tibble: 4 × 4 #>    year type       stat                     value #>   <int> <chr>      <chr>                    <dbl> #> 1  2020 Individual HCC Risk Score Average   2.50  #> 2  2020 Individual Dual Eligibility Average 0.507 #> 3  2020 Group      HCC Risk Score Average   2.53  #> 4  2020 Group      Dual Eligibility Average 0.501"},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Reassignment of Benefits — reassignments","title":"Reassignment of Benefits — reassignments","text":"reassignments() returns information : Individual providers reassigning benefits employee Organizational/Group providers receiving reassignment benefits employer individual provider Links: Medicare Revalidation Reassignment List API Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reassignment of Benefits — reassignments","text":"","code":"reassignments(   npi = NULL,   pac = NULL,   enid = NULL,   first = NULL,   last = NULL,   state = NULL,   specialty = NULL,   organization = NULL,   pac_org = NULL,   enid_org = NULL,   state_org = NULL,   entry = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reassignment of Benefits — reassignments","text":"npi < integer > Individual National Provider Identifier pac < integer > Individual PECOS Associate Control ID enid < character > Individual Medicare Enrollment ID first, last < character > Individual Provider's name state < character > Individual Enrollment state specialty < character > Individual Enrollment specialty organization < character > Organizational Legal business name pac_org < integer > Organizational PECOS Associate Control ID enid_org < character > Organizational Medicare Enrollment ID state_org < character > Organizational Enrollment state entry < character > Entry type, reassignment (\"R\") employment (\"E\") tidy < boolean > // default: TRUE Tidy output na.rm < boolean > // default: TRUE Remove empty rows columns","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reassignment of Benefits — reassignments","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/reassignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reassignment of Benefits — reassignments","text":"","code":"if (FALSE) { # interactive() reassignments(enid = \"I20200929003184\") reassignments(pac = 9830437441) reassignments(pac_org = 3173525888) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomy <-> Medicare Specialty — taxonomy_crosswalk","title":"Taxonomy <-> Medicare Specialty — taxonomy_crosswalk","text":"taxonomy_crosswalk() allows search types providers suppliers eligible Medicare programs taxonomy code Medicare specialty type code.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"taxonomy-codes","dir":"Reference","previous_headings":"","what":"Taxonomy Codes","title":"Taxonomy <-> Medicare Specialty — taxonomy_crosswalk","text":"Healthcare Provider Taxonomy Code Set hierarchical HIPAA standard code set designed categorize type, classification, specialization health care providers. consists two sections: Individuals Groups Individuals Non-Individuals applying NPI, provider must report taxonomy closely describes type/classification/specialization. situations, provider may need report one taxonomy must indicate one primary. codes selected may categorizations used Medicare enrollment. Links: Provider Supplier Taxonomy Crosswalk Taxonomy Crosswalk Methodology Find Taxonomy Code Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomy <-> Medicare Specialty — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(   taxonomy_code = NULL,   taxonomy_description = NULL,   specialty_code = NULL,   specialty_description = NULL,   keyword_search = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxonomy <-> Medicare Specialty — taxonomy_crosswalk","text":"taxonomy_code < character > 10-digit taxonomy code taxonomy_description < character > Provider's taxonomy description specialty_code < character > Medicare specialty code specialty_description < character > Medicare provider/supplier type keyword_search < character > Search term use quick full-text search. tidy < boolean > // default: TRUE Tidy output","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxonomy <-> Medicare Specialty — taxonomy_crosswalk","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxonomy <-> Medicare Specialty — taxonomy_crosswalk","text":"","code":"if (FALSE) { # interactive() taxonomy_crosswalk(keyword_search = \"B4\") taxonomy_crosswalk(keyword_search = \"Histocompatibility\") taxonomy_crosswalk(specialty_description = \"Rehabilitation Agency\") taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":null,"dir":"Reference","previous_headings":"","what":"Provider Utilization & Demographics — utilization","title":"Provider Utilization & Demographics — utilization","text":"functions allow user access information services procedures provided Original Medicare (fee--service) Part B beneficiaries physicians healthcare professionals; aggregated provider, service geography.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provider Utilization & Demographics — utilization","text":"","code":"by_provider(   year,   npi = NULL,   first = NULL,   last = NULL,   organization = NULL,   credential = NULL,   gender = NULL,   entype = NULL,   city = NULL,   state = NULL,   zip = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par = NULL,   tidy = TRUE,   nest = TRUE,   detailed = FALSE,   na.rm = TRUE )  by_service(   year,   npi = NULL,   first = NULL,   last = NULL,   organization = NULL,   credential = NULL,   gender = NULL,   entype = NULL,   city = NULL,   state = NULL,   zip = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par = NULL,   hcpcs_code = NULL,   drug = NULL,   pos = NULL,   tidy = TRUE,   rbcs = TRUE,   na.rm = TRUE )  by_geography(   year,   state = NULL,   hcpcs_code = NULL,   pos = NULL,   level = NULL,   fips = NULL,   drug = NULL,   tidy = TRUE,   rbcs = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provider Utilization & Demographics — utilization","text":"year < integer > // required Year data reported, YYYY format. Run pop_years() return vector years currently available. npi < integer > 10-digit national provider identifier first, last, organization < character > Individual/Organizational provider's name credential < character > Individual provider's credentials gender < character > Individual provider's gender; \"F\" (Female), \"M\" (Male) entype < character > Provider entity type; \"\" (Individual), \"O\" (Organization) city < character > City provider located state < character > State provider located zip < character > Provider’s zip code fips < character > Provider's state FIPS code ruca < character > Provider’s RUCA code country < character > Country provider located specialty < character > Provider specialty code reported largest number claims submitted par < boolean > Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts tidy < boolean > // default: TRUE Tidy output nest < boolean > // default: TRUE Nest demographics conditions detailed < boolean > // default: FALSE Include detailed column na.rm < boolean > // default: TRUE Remove empty rows columns hcpcs_code < character > HCPCS code used identify specific medical service furnished provider drug < boolean > Identifies whether HCPCS code listed Medicare Part B Drug Average Sales Price (ASP) File pos < character > Identifies whether Place Service (POS) submitted claims : Facility (\"F\"): Hospital, Skilled Nursing Facility, etc. Non-facility (\"O\"): Office, Home, etc. rbcs < boolean > // default: TRUE Add Restructured BETOS Classifications HCPCS codes level < character > Geographic level data aggregated: \"State\": Data aggregated state National: Data aggregated across states given HCPCS Code","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provider Utilization & Demographics — utilization","text":"by_provider() returns tibble columns: by_service() returns tibble columns: by_geography() returns tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"by-provider-","dir":"Reference","previous_headings":"","what":"by_provider()","title":"Provider Utilization & Demographics — utilization","text":"Provider dataset allows user access data services procedures performed; charges submitted payment received; beneficiary demographic health characteristics providers treating Original Medicare (fee--service) Part B beneficiaries, aggregated year.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"by-service-","dir":"Reference","previous_headings":"","what":"by_service()","title":"Provider Utilization & Demographics — utilization","text":"Provider Service dataset aggregated : Rendering provider's NPI Healthcare Common Procedure Coding System (HCPCS) code Place Service (Facility Non-facility) can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"by-geography-","dir":"Reference","previous_headings":"","what":"by_geography()","title":"Provider Utilization & Demographics — utilization","text":"Geography Service dataset contains information utilization, allowed amount, Medicare payment, submitted charges organized nationally state-wide HCPCS code place service.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"rural-urban-commuting-area-codes-ruca-","dir":"Reference","previous_headings":"","what":"Rural-Urban Commuting Area Codes (RUCA)","title":"Provider Utilization & Demographics — utilization","text":"Metro Area Core \"1\": Primary flow within Urbanized Area (UA) \"1.1\": Secondary flow 30-50% larger UA Metro Area High Commuting \"2\": Primary flow 30% UA \"2.1\": Secondary flow 30-50% larger UA Metro Area Low Commuting \"3\": Primary flow 10-30% UA Micro Area Core \"4\": Primary flow within large Urban Cluster (10k - 49k) \"4.1\": Secondary flow 30-50% UA Micro High Commuting \"5\": Primary flow 30% large UC \"5.1\": Secondary flow 30-50% UA Micro Low Commuting \"6\": Primary flow 10-30% large UC Small Town Core \"7\": Primary flow within small UC (2.5k - 9.9k) \"7.1\": Secondary flow 30-50% UA \"7.2\": Secondary flow 30-50% large UC Small Town High Commuting \"8\": Primary flow 30% small UC \"8.1\": Secondary flow 30-50% UA \"8.2\": Secondary flow 30-50% large UC Small Town Low Commuting \"9\": Primary flow 10-30% small UC Rural Areas \"10\": Primary flow tract outside UA UC \"10.1\": Secondary flow 30-50% UA \"10.2\": Secondary flow 30-50% large UC \"10.3\": Secondary flow 30-50% small UC \"99\": Zero population rural-urban identifier information","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Provider Utilization & Demographics — utilization","text":"Medicare Physician & Practitioners: Provider API Medicare Physician & Practitioners: Provider Service API Medicare Physician & Practitioners: Geography Service API Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provider Utilization & Demographics — utilization","text":"","code":"if (FALSE) { # interactive() by_provider(year = 2020, npi = 1003000423)  by_service(year = 2019, npi = 1003000126)  by_geography(year = 2020, hcpcs_code = \"0002A\")  # Use the years helper function to retrieve results for every year: pop_years() |> map(\\(x) by_provider(year = x, npi = 1043477615)) |> list_rbind() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":null,"dir":"Reference","previous_headings":"","what":"Years Currently Searchable for APIs — years","title":"Years Currently Searchable for APIs — years","text":"Years Currently Searchable APIs","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Years Currently Searchable for APIs — years","text":"","code":"open_years()  pop_years()  cc_years()  qpp_years()  bene_years(period = c(\"year\", \"month\"))"},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Years Currently Searchable for APIs — years","text":"period One \"year\" \"month\"","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Years Currently Searchable for APIs — years","text":"integer vector years available search","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Years Currently Searchable for APIs — years","text":"","code":"if (FALSE) { # interactive() bene_years(\"year\") bene_years(\"month\") open_years() pop_years() cc_years() qpp_years() }"},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009012-2023-03-23","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9012 (2023-03-23)","title":"provider 0.0.0.9012 (2023-03-23)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009011-2023-02-27","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9011 (2023-02-27)","title":"provider 0.0.0.9011 (2023-02-27)","text":"nppes_npi_new implementation","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009010-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9010 (2023-02-08)","title":"provider 0.0.0.9010 (2023-02-08)","text":"added hospital_enrollment() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009009-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9009 (2023-02-08)","title":"provider 0.0.0.9009 (2023-02-08)","text":"implemented cms_update_ids() applicable functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009008-2023-02-07","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9008 (2023-02-07)","title":"provider 0.0.0.9008 (2023-02-07)","text":"added addl_phone_numbers() function added nucc_taxonomy_230 dataset added examples new functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009007-2023-02-04","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9007 (2023-02-04)","title":"provider 0.0.0.9007 (2023-02-04)","text":"doctors_and_clinicians() function facility_affiliations() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009006-2023-02-03","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9006 (2023-02-03)","title":"provider 0.0.0.9006 (2023-02-03)","text":"pending_applications() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009005-2023-01-22","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9005 (2023-01-22)","title":"provider 0.0.0.9005 (2023-01-22)","text":"nesting larger outputs","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009004-2023-01-21","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9004 (2023-01-21)","title":"provider 0.0.0.9004 (2023-01-21)","text":"initial implementation distribution id update functions open_payments() vignette","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009003-2023-01-16","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9003 (2023-01-16)","title":"provider 0.0.0.9003 (2023-01-16)","text":"open_payments() function added","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009002-2023-01-05","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9002 (2023-01-05)","title":"provider 0.0.0.9002 (2023-01-05)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9001 (2022-08-31)","title":"provider 0.0.0.9001 (2022-08-31)","text":"Updated README.","code":""}]
