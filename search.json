[{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andrewbruce.himni@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://andrewallenbruce.github.io/provider/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Andrew Bruce Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/linking_providers.html","id":"individual-provider","dir":"Articles","previous_headings":"","what":"Individual Provider","title":"Linking Providers","text":"Exploring links providers can lead many interesting insights. example, hospital New York named Elizabethtown Community Hospital.  Looking Provider Enrollment API gives us several avenues go :   Hospital Enrollment API includes Medicare Part (hospital) providers, get two rows back, include new data point: two facility CCNs. Plugging Facility Affiliations API, can retrieve information individual providers practicing hospital. First, -numeric CCN (331302):   returns individual providers affiliated hospital. Now search alphanumeric CCN (33Z302):  returns affiliated individual providers practice Hospital’s nursing home..  alphanumeric CCN represents sub-unit hospital, nursing home. get result ’d set parent_ccn argument numeric CCN, .e. affiliations(parent_ccn = 331302)","code":"(p <- providers(pac = 7810891009)) #> # A tibble: 1 × 10 #>   npi    pac   enroll_id specialty_code specialty_description state first middle #>   <chr>  <chr> <chr>     <chr>          <chr>                 <chr> <chr> <chr>  #> 1 10432… 7810… I2003112… 14-22          PRACTITIONER - PATHO… VT    MARK  K      #> # ℹ 2 more variables: last <chr>, gender <chr> (rd <- revalidation_date(enroll_id = p$enroll_id)) #> # A tibble: 1 × 7 #>   npi        enroll_id       first last  state enrollment_type reassignments_ind #>   <chr>      <chr>           <chr> <chr> <chr> <chr>                       <int> #> 1 1043245657 I20031120000251 MARK  FUNG  VT    Non-DME Part B                  1 (rv <- revalidation_reassign(pac_ind = p$pac)) #> # A tibble: 1 × 12 #>   npi        pac    enroll_id first last  reassignments_ind organization pac_org #>   <chr>      <chr>  <chr>     <chr> <chr>             <int> <chr>        <chr>   #> 1 1043245657 78108… I2003112… MARK  FUNG                  1 UNIVERSITY … 377949… #> # ℹ 4 more variables: enroll_id_org <chr>, state_org <chr>, #> #   reassignments_org <int>, record_type <chr> (cl <- clinicians(pac = p$pac)) #> # A tibble: 1 × 21 #>   npi      pac   enroll_id first middle last  gender credential school grad_year #>   <chr>    <chr> <chr>     <chr> <chr>  <chr> <chr>  <chr>      <chr>      <int> #> 1 1043245… 7810… I2003112… MARK  K      FUNG  M      MD         UNIVE…      1999 #> # ℹ 11 more variables: specialty <chr>, organization <chr>, pac_org <chr>, #> #   members_org <int>, address_org <chr>, city_org <chr>, state_org <chr>, #> #   zip_org <chr>, phone_org <chr>, assign_ind <chr>, assign_org <chr> (a <- affiliations(pac = p$pac)) #> # A tibble: 5 × 7 #>   npi        pac        first middle last  facility_type facility_ccn #>   <chr>      <chr>      <chr> <chr>  <chr> <chr>         <chr>        #> 1 1043245657 7810891009 MARK  K      FUNG  Hospital      470003       #> 2 1043245657 7810891009 MARK  K      FUNG  Hospital      330250       #> 3 1043245657 7810891009 MARK  K      FUNG  Hospital      331302       #> 4 1043245657 7810891009 MARK  K      FUNG  Hospital      330084       #> 5 1043245657 7810891009 MARK  K      FUNG  Hospital      470001 (h <- affiliations(pac = p$pac) |>    pull(facility_ccn) |>   map_dfr(~hospitals(facility_ccn = .x))) #> # A tibble: 7 × 20 #>   npi        organization   doing_business_as pac_org enroll_id_org facility_ccn #>   <chr>      <chr>          <chr>             <chr>   <chr>         <chr>        #> 1 1568419976 UNIVERSITY OF… UNIVERSITY OF VE… 377949… O20021111000… 470003       #> 2 1568419976 UNIVERSITY OF… UNIVERSITY OF VE… 377949… O20021111000… 470003       #> 3 1033270699 CHAMPLAIN VAL… THE UNIVERSITY O… 276939… O20120110000… 330250       #> 4 1891785184 ELIZABETHTOWN… NA                357755… O20101110000… 331302       #> 5 1114954682 ALICE HYDE ME… NA                408252… O20101129000… 330084       #> 6 1114954682 ALICE HYDE ME… NA                408252… O20101129000… 330084       #> 7 1508845637 CENTRAL VERMO… NA                933513… O20050809000… 470001       #> # ℹ 14 more variables: specialty_code <chr>, specialty <chr>, #> #   enroll_state <chr>, incorporation_date <date>, incorporation_state <chr>, #> #   organization_structure <chr>, address <chr>, city <chr>, state <chr>, #> #   zip <int>, location_type <chr>, location_other <chr>, #> #   proprietary_nonprofit <chr>, status <chr> full_join(p, rd) |>    full_join(rv) |>    full_join(cl) |>    full_join(a) |>    full_join(h) |>    glimpse() #> Rows: 12 #> Columns: 43 #> $ npi                    <chr> \"1043245657\", \"1043245657\", \"1043245657\", \"1043… #> $ pac                    <chr> \"7810891009\", \"7810891009\", \"7810891009\", \"7810… #> $ enroll_id              <chr> \"I20031120000251\", \"I20031120000251\", \"I2003112… #> $ specialty_code         <chr> \"14-22\", \"14-22\", \"14-22\", \"14-22\", \"14-22\", \"0… #> $ specialty_description  <chr> \"PRACTITIONER - PATHOLOGY\", \"PRACTITIONER - PAT… #> $ state                  <chr> \"VT\", \"VT\", \"VT\", \"VT\", \"VT\", \"VT\", \"VT\", \"NY\",… #> $ first                  <chr> \"MARK\", \"MARK\", \"MARK\", \"MARK\", \"MARK\", NA, NA,… #> $ middle                 <chr> \"K\", \"K\", \"K\", \"K\", \"K\", NA, NA, NA, NA, NA, NA… #> $ last                   <chr> \"FUNG\", \"FUNG\", \"FUNG\", \"FUNG\", \"FUNG\", NA, NA,… #> $ gender                 <chr> \"M\", \"M\", \"M\", \"M\", \"M\", NA, NA, NA, NA, NA, NA… #> $ enrollment_type        <chr> \"Non-DME Part B\", \"Non-DME Part B\", \"Non-DME Pa… #> $ reassignments_ind      <int> 1, 1, 1, 1, 1, NA, NA, NA, NA, NA, NA, NA #> $ organization           <chr> \"UNIVERSITY OF VERMONT MEDICAL CENTER INC\", \"UN… #> $ pac_org                <chr> \"3779491071\", \"3779491071\", \"3779491071\", \"3779… #> $ enroll_id_org          <chr> \"O20060822000040\", \"O20060822000040\", \"O2006082… #> $ state_org              <chr> \"VT\", \"VT\", \"VT\", \"VT\", \"VT\", NA, NA, NA, NA, N… #> $ reassignments_org      <int> 99, 99, 99, 99, 99, NA, NA, NA, NA, NA, NA, NA #> $ record_type            <chr> \"Reassignment\", \"Reassignment\", \"Reassignment\",… #> $ credential             <chr> \"MD\", \"MD\", \"MD\", \"MD\", \"MD\", NA, NA, NA, NA, N… #> $ school                 <chr> \"UNIVERSITY OF ALABAMA SCHOOL OF MEDICINE\", \"UN… #> $ grad_year              <int> 1999, 1999, 1999, 1999, 1999, NA, NA, NA, NA, N… #> $ specialty              <chr> \"PATHOLOGY\", \"PATHOLOGY\", \"PATHOLOGY\", \"PATHOLO… #> $ members_org            <int> 958, 958, 958, 958, 958, NA, NA, NA, NA, NA, NA… #> $ address_org            <chr> \"111 COLCHESTER AVE\", \"111 COLCHESTER AVE\", \"11… #> $ city_org               <chr> \"BURLINGTON\", \"BURLINGTON\", \"BURLINGTON\", \"BURL… #> $ zip_org                <chr> \"054011473\", \"054011473\", \"054011473\", \"0540114… #> $ phone_org              <chr> \"8028470000\", \"8028470000\", \"8028470000\", \"8028… #> $ assign_ind             <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", NA, NA, NA, NA, NA, NA… #> $ assign_org             <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", NA, NA, NA, NA, NA, NA… #> $ facility_type          <chr> \"Hospital\", \"Hospital\", \"Hospital\", \"Hospital\",… #> $ facility_ccn           <chr> \"470003\", \"330250\", \"331302\", \"330084\", \"470001… #> $ doing_business_as      <chr> NA, NA, NA, NA, NA, \"UNIVERSITY OF VERMONT MEDI… #> $ enroll_state           <chr> NA, NA, NA, NA, NA, \"VT\", \"VT\", \"NY\", \"NY\", \"NY… #> $ incorporation_date     <date> NA, NA, NA, NA, NA, 1995-01-01, 1995-01-01, 192… #> $ incorporation_state    <chr> NA, NA, NA, NA, NA, \"VT\", \"VT\", \"NY\", \"NY\", \"NY… #> $ organization_structure <chr> NA, NA, NA, NA, NA, \"CORPORATION\", \"CORPORATIO… #> $ address                <chr> NA, NA, NA, NA, NA, \"111 COLCHESTER AVE\", \"111 … #> $ city                   <chr> NA, NA, NA, NA, NA, \"BURLINGTON\", \"BURLINGTON\",… #> $ zip                    <int> NA, NA, NA, NA, NA, 54011473, 54011473, 1290114… #> $ location_type          <chr> NA, NA, NA, NA, NA, \"OTHER HOSPITAL PRACTICE LO… #> $ location_other         <chr> NA, NA, NA, NA, NA, \"HOSPITAL - GENERAL PRACTIC… #> $ proprietary_nonprofit  <chr> NA, NA, NA, NA, NA, \"Non-Profit\", \"Non-Profit\",… #> $ status                 <chr> NA, NA, NA, NA, NA, \"Subgroup Acute Care\", \"Sub… full_join(   providers(pac = 7810891009),    revalidation_date(enroll_id = \"I20031120000251\")) |>  full_join(revalidation_reassign(pac_ind = 7810891009)) |>    full_join(clinicians(pac = 7810891009)) |>    glimpse() #> Rows: 1 #> Columns: 29 #> $ npi                   <chr> \"1043245657\" #> $ pac                   <chr> \"7810891009\" #> $ enroll_id             <chr> \"I20031120000251\" #> $ specialty_code        <chr> \"14-22\" #> $ specialty_description <chr> \"PRACTITIONER - PATHOLOGY\" #> $ state                 <chr> \"VT\" #> $ first                 <chr> \"MARK\" #> $ middle                <chr> \"K\" #> $ last                  <chr> \"FUNG\" #> $ gender                <chr> \"M\" #> $ enrollment_type       <chr> \"Non-DME Part B\" #> $ reassignments_ind     <int> 1 #> $ organization          <chr> \"UNIVERSITY OF VERMONT MEDICAL CENTER INC\" #> $ pac_org               <chr> \"3779491071\" #> $ enroll_id_org         <chr> \"O20060822000040\" #> $ state_org             <chr> \"VT\" #> $ reassignments_org     <int> 99 #> $ record_type           <chr> \"Reassignment\" #> $ credential            <chr> \"MD\" #> $ school                <chr> \"UNIVERSITY OF ALABAMA SCHOOL OF MEDICINE\" #> $ grad_year             <int> 1999 #> $ specialty             <chr> \"PATHOLOGY\" #> $ members_org           <int> 958 #> $ address_org           <chr> \"111 COLCHESTER AVE\" #> $ city_org              <chr> \"BURLINGTON\" #> $ zip_org               <chr> \"054011473\" #> $ phone_org             <chr> \"8028470000\" #> $ assign_ind            <chr> \"Y\" #> $ assign_org            <chr> \"Y\" providers(organization = \"Elizabethtown Community Hospital\") #> # A tibble: 4 × 7 #>   npi    pac   enroll_id specialty_code specialty_description state organization #>   <chr>  <chr> <chr>     <chr>          <chr>                 <chr> <chr>        #> 1 18917… 3577… O2004052… 12-70          PART B SUPPLIER - CL… NY    ELIZABETHTO… #> 2 18917… 3577… O2010111… 00-85          PART A PROVIDER - CR… NY    ELIZABETHTO… #> 3 14879… 3577… O2019071… 12-59          PART B SUPPLIER - AM… NY    ELIZABETHTO… #> 4 14070… 3577… O2022082… 00-85          PART A PROVIDER - CR… NY    ELIZABETHTO… hospitals(organization = \"Elizabethtown Community Hospital\") |>    select(npi:specialty, proprietary_nonprofit:status) #> # A tibble: 1 × 9 #>   npi   organization pac_org enroll_id_org facility_ccn specialty_code specialty #>   <chr> <chr>        <chr>   <chr>         <chr>        <chr>          <chr>     #> 1 1891… ELIZABETHTO… 357755… O20101110000… 331302       00-85          PART A P… #> # ℹ 2 more variables: proprietary_nonprofit <chr>, status <chr> affiliations(facility_ccn = 331302) #> # A tibble: 167 × 8 #>    npi        pac        first   middle last   suffix facility_type facility_ccn #>    <chr>      <chr>      <chr>   <chr>  <chr>  <chr>  <chr>         <chr>        #>  1 1003815184 4082693676 ARMIN   NA     AFSAR… NA     Hospital      331302       #>  2 1023076643 5698798452 JOHN    N      HENRY  NA     Hospital      331302       #>  3 1023377843 6901115278 LINDSEY B      WILHE… NA     Hospital      331302       #>  4 1043245657 7810891009 MARK    K      FUNG   NA     Hospital      331302       #>  5 1043397656 4183764558 ANTHONY F      TRAMO… NA     Hospital      331302       #>  6 1043630510 2365749389 RYAN    NA     WOLFE  NA     Hospital      331302       #>  7 1043672140 7214229350 VANESSA NA     FIORI… NA     Hospital      331302       #>  8 1053596122 5193802213 TANYA   JEAN   FINCH  NA     Hospital      331302       #>  9 1053863100 8729362207 MATTHEW D      FARNS… NA     Hospital      331302       #> 10 1063536886 0941434435 ELENA   NA     BOLAND NA     Hospital      331302       #> # ℹ 157 more rows affiliations(facility_ccn = \"33Z302\") #> # A tibble: 3 × 8 #>   npi        pac        first middle last  facility_type facility_ccn parent_ccn #>   <chr>      <chr>      <chr> <chr>  <chr> <chr>         <chr>        <chr>      #> 1 1396989059 8921259557 MARY  K      HALL… Nursing home  33Z302       331302     #> 2 1538173869 0547299091 IL    JUN    CHON  Nursing home  33Z302       331302     #> 3 1801893318 3577568724 ROB   L      DEMU… Nursing home  33Z302       331302"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"provider-utilization-summary","dir":"Articles","previous_headings":"","what":"Provider Utilization Summary","title":"Provider Analysis","text":"","code":"df <- map_dfr(prac_years(), ~by_provider(year = .x, npi = 1023076643))"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"counts-amounts","dir":"Articles","previous_headings":"Provider Utilization Summary","what":"Counts & Amounts","title":"Provider Analysis","text":"","code":"select(df,         year,         HCPCS = tot_hcpcs,        Beneficiaries = tot_benes,        Services = tot_srvcs,        Charges = tot_charges,        Allowed = tot_allowed,        Payment = tot_payment) |>    gt(rowname_col = \"year\") |>    grand_summary_rows(columns = c(HCPCS, Beneficiaries, Services),                      fns =  list(label = md(\"**AVERAGES**\"),                                   id = \"average\", fn = \"mean\"),                      fmt = ~ fmt_integer(.)) |>    grand_summary_rows(columns = c(Charges, Allowed, Payment),                      fns =  list(label = md(\"**AVERAGES**\"),                                   id = \"average\", fn = \"mean\"),                      fmt = ~ fmt_currency(., decimals = 0)) |>    fmt_integer(columns = c(HCPCS, Beneficiaries, Services)) |>    fmt_currency(columns = c(Charges, Allowed, Payment), decimals = 0) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\"),              subtitle = md(\"Counts & Amounts, 2013-2019\")) |>    data_color(columns = c(Charges, Allowed, Payment),              method = \"numeric\",              palette = \"Reds\",               direction = \"column\") |>    tab_options(table.width = pct(75),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"year-over-year-percentage-change","dir":"Articles","previous_headings":"Provider Utilization Summary","what":"Year-Over-Year Percentage Change","title":"Provider Analysis","text":"","code":"select(df,         year,         Beneficiaries = tot_benes,        Services = tot_srvcs,        Payment = tot_payment) |>    change(c(Beneficiaries, Services, Payment)) |>    select(-contains(c(\"_chg\", \"_cum\"))) |>    gt(rowname_col = \"year\") |>    grand_summary_rows(columns = c(Beneficiaries, Services),                      fns =  list(label = md(\"**AVERAGES**\"),                                   id = \"average\", fn = \"mean\"),                      fmt = ~ fmt_integer(.)) |>    grand_summary_rows(columns = c(Payment),                      fns =  list(label = md(\"**AVERAGES**\"),                                   id = \"average\", fn = \"mean\"),                      fmt = ~ fmt_currency(., decimals = 0)) |>   fmt_percent(columns = contains(\"_pct\"), decimals = 0, force_sign = TRUE) |>    fmt_integer(columns = c(Beneficiaries, Services)) |>    fmt_currency(columns = c(Payment), decimals = 0) |>    cols_merge_n_pct(Beneficiaries, Beneficiaries_pct) |>    cols_merge_n_pct(Services, Services_pct) |>   cols_merge_n_pct(Payment, Payment_pct) |>   opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\"),              subtitle = md(\"Year-Over-Year Percentage Changes, 2013-2019\")) |>    tab_options(table.width = pct(75),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"trends","dir":"Articles","previous_headings":"Provider Utilization Summary","what":"Trends","title":"Provider Analysis","text":"","code":"select(df,         year,         HCPCS = tot_hcpcs,        Beneficiaries = tot_benes,        Services = tot_srvcs,        Charges = tot_charges,        Allowed = tot_allowed,        Payment = tot_payment) |>    pivot_longer(cols = c(HCPCS,                          Beneficiaries,                          Services,                          Charges,                          Allowed,                          Payment),                 names_to = \"Type\",                 values_to = \"Amount\") |>    pivot_wider(names_from = year,                values_from = Amount) |>    gt(rowname_col = \"Type\") |>    tab_stubhead(label = md(\"**Measures**\")) |>   cols_hide(columns = matches(\"2014|2015|2016|2017|2018\")) |>   cols_nanoplot(     columns = contains(\"20\"),     new_col_name = \"nanoplots\",     new_col_label = md(\"*TREND*\"),     reference_line = \"mean\",     plot_height = \"3em\",     options = nanoplot_options(       data_line_stroke_color = \"black\",       show_reference_line = TRUE,       show_reference_area = FALSE)) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\"),              subtitle = md(\"Trends, 2013-2019\")) |>    opt_horizontal_padding(scale = 2) |>    tab_options(table.width = pct(50),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"chronic-condition-prevalence","dir":"Articles","previous_headings":"Provider Utilization Summary","what":"Chronic Condition Prevalence","title":"Provider Analysis","text":"","code":"chronic <- compare_conditions(df)  chronic |>    pivot_wider(names_from = c(year, level),                values_from = prevalence) |>    gt() |>    cols_nanoplot(     columns = contains(\"Provider\"),     reference_line = \"mean\",     new_col_name = \"provider_plot\",     new_col_label = md(\"*Provider*\"),     missing_vals = \"remove\",     plot_height = \"3em\",     options = nanoplot_options(       data_line_stroke_color = \"black\",       show_reference_line = TRUE,       show_reference_area = FALSE)) |>    cols_nanoplot(     columns = contains(\"State\"),     reference_line = \"mean\",     new_col_name = \"state_plot\",     new_col_label = md(\"*State*\"),     missing_vals = \"remove\",     plot_height = \"3em\",     options = nanoplot_options(       data_line_stroke_color = \"black\",       show_reference_line = TRUE,       show_reference_area = FALSE)) |>    cols_nanoplot(     columns = contains(\"National\"),     reference_line = \"mean\",     new_col_name = \"national_plot\",     new_col_label = md(\"*National*\"),     missing_vals = \"remove\",     plot_height = \"3em\",     options = nanoplot_options(       data_line_stroke_color = \"black\",       show_reference_line = TRUE,       show_reference_area = FALSE)) |>    cols_hide(columns = contains(\"20\")) |>   opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\"),              subtitle = md(\"**Chronic Conditions Prevalence** Comparison, 2013-2018\")) |>    opt_horizontal_padding(scale = 2) |>    tab_options(table.width = pct(50),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/partb-stats.html","id":"hcpcs-utilization-data","dir":"Articles","previous_headings":"","what":"HCPCS Utilization Data","title":"Provider Analysis","text":"","code":"hcpcs <- prac_years() |>    map(\\(x) by_service(year = x, npi = 1023076643)) |>    list_rbind() |>    compare_hcpcs()  hcpcs #> # A tibble: 90 × 14 #>     year level    hcpcs_code pos   category subcategory         family procedure #>    <int> <fct>    <chr>      <chr> <chr>    <chr>               <chr>  <chr>     #>  1  2013 Provider 93010      F     Test     Cardiography        Elect… Non-proc… #>  2  2013 Provider 93016      F     Test     Cardiography        Elect… Non-proc… #>  3  2013 Provider 99214      F     E&M      Office/Outpatient … Offic… Non-proc… #>  4  2013 Provider 99215      F     E&M      Office/Outpatient … Offic… Non-proc… #>  5  2014 Provider 93010      F     Test     Cardiography        Elect… Non-proc… #>  6  2014 Provider 93016      F     Test     Cardiography        Elect… Non-proc… #>  7  2014 Provider 99214      F     E&M      Office/Outpatient … Offic… Non-proc… #>  8  2014 Provider 99215      F     E&M      Office/Outpatient … Offic… Non-proc… #>  9  2015 Provider 93010      F     Test     Cardiography        Elect… Non-proc… #> 10  2015 Provider 93016      F     Test     Cardiography        Elect… Non-proc… #> # ℹ 80 more rows #> # ℹ 6 more variables: beneficiaries <dbl>, services <dbl>, avg_charge <dbl>, #> #   avg_allowed <dbl>, avg_payment <dbl>, avg_std_pymt <dbl> hcpcs |>    group_by(year, level, family) |>   summarise(beneficiaries = sum(beneficiaries),             services = sum(services),             \"Average Payment\" = mean(avg_payment), .groups = \"drop\") |>   arrange(year, family) |>   gt() |>    fmt_integer(columns = c(beneficiaries, services)) |>    fmt_currency(columns = c('Average Payment'), decimals = 2) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Medicare Part B** Utilization\")) |>    opt_horizontal_padding(scale = 2) |>    tab_options(table.width = pct(50),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\") hcpcs |> select(year,           level,           HCPCS = hcpcs_code,          beneficiaries,          services,           \"Average Payment\" = avg_payment) |>    mutate(\"Services Per Beneficiary\" = services/beneficiaries) |>    select(-c(beneficiaries, services)) |>    pivot_longer(!year:HCPCS,                 names_to = \"stat\",                 values_to = \"amount\") |>    pivot_wider(names_from = level,                values_from = amount) |>    arrange(stat, HCPCS) |>   filter(stat %in% c(\"Average Payment\")) |>    gt(rowname_col = \"year\") |>    fmt_currency(columns = c(Provider, State, National), decimals = 2) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Average Payment** By HCPCS\")) |>    cols_hide(stat) |>    data_color(columns = c(Provider, State, National),              direction = \"row\",              method = \"numeric\",              palette = \"Reds\") |>    tab_options(table.width = pct(75),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\") hcpcs |> select(year,           level,           HCPCS = hcpcs_code,          beneficiaries,          services,           \"Average Payment\" = avg_payment) |>    mutate(\"Services Per Beneficiary\" = services/beneficiaries) |>    select(-c(beneficiaries, services)) |>    pivot_longer(!year:HCPCS,                 names_to = \"stat\",                 values_to = \"amount\") |>    pivot_wider(names_from = level,                values_from = amount) |>    arrange(stat, HCPCS) |>    filter(stat %in% c(\"Services Per Beneficiary\")) |>    gt(rowname_col = \"year\") |>    fmt_number(columns = c(Provider, State, National), decimals = 2) |>    opt_table_font(font = google_font(name = \"JetBrains Mono\")) |>   tab_header(title = md(\"**Services Per Beneficiary** By HCPCS\")) |>    cols_hide(stat) |>    data_color(columns = c(Provider, State, National),              direction = \"row\",              method = \"numeric\",              palette = \"Reds\") |>    tab_options(table.width = pct(75),               column_labels.font.weight = \"bold\",               row_group.font.weight = \"bold\",               heading.background.color = \"black\",               heading.align = \"left\")"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"tidy-output","dir":"Articles","previous_headings":"","what":"Tidy Output","title":"Overview of Provider","text":"tidy data, every column variable, every row observation, every cell single value. Many outputs APIs violate form Storing column headers values, variable names Storing multiple variables one column remedy , post-processing done output returned. function tidy argument set TRUE default:  Setting FALSE return un-processed output:  Setting FALSE return un-processed output:  tidy transformations applied output function include: Favoring long format wide. descriptive, thematic variable names involving prefixes standardized vocabulary across outputs Various quality--life data transformations (e.g., using snake_case variable names, replacing empty character cells NA; converting years, dates, booleans respective data types) Nesting large groups related columns lists, initially emphasize important output. However, event prefer transformations, simply turn tidy = FALSE.","code":"order_refer(npi = 1043477615) #> # A tibble: 4 × 4 #>   npi        first last    service                   #>   <chr>      <chr> <chr>   <chr>                     #> 1 1043477615 SARAH HUSSAIN Medicare Part B           #> 2 1043477615 SARAH HUSSAIN Home Health Agency        #> 3 1043477615 SARAH HUSSAIN Durable Medical Equipment #> 4 1043477615 SARAH HUSSAIN Power Mobility Devices order_refer(npi = 1043477615, tidy = FALSE) #>          NPI LAST_NAME FIRST_NAME PARTB DME HHA PMD #> 1 1043477615   HUSSAIN      SARAH     Y   Y   Y   Y order_refer(npi = 1043477615, pivot = FALSE) #> # A tibble: 1 × 7 #>   npi        last_name first_name partb dme   hha   pmd   #>   <chr>      <chr>     <chr>      <lgl> <lgl> <lgl> <lgl> #> 1 1043477615 HUSSAIN   SARAH      TRUE  TRUE  TRUE  TRUE"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"exported-functions","dir":"Articles","previous_headings":"","what":"Exported Functions","title":"Overview of Provider","text":"API Search functions can grouped according type data return Provider: administrative, statistical, auxiliary.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"administrative","dir":"Articles","previous_headings":"Exported Functions","what":"Administrative","title":"Overview of Provider","text":"nppes(): Registry healthcare providers. providers(): Providers actively enrolled Medicare. opt_out(): Providers currently opted Medicare. revalidation(): Link Type-1 Type-2 providers. clinicians(): Provider school, graduation year, linking. affiliations(): Linking providers Facilities. hospitals(): Facilities linked providers. laboratories(): Clinical laboratories.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"statistical","dir":"Articles","previous_headings":"Exported Functions","what":"Statistical","title":"Overview of Provider","text":"following return yearly Provider-specific stats: by_provider(): Utilization summary. by_service(): Utilization detail. by_geography(): National/state/county utilization summary. quality_payment(): QPP/MIPS performance. quality_eligibility(): QPP/MIPS eligibility. open_payments(): Open Payments reporting. beneficiaries(): Medicare enrollment. chronic_conditions: Chronic condition prevalence.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"auxiliary","dir":"Articles","previous_headings":"Exported Functions","what":"Auxiliary","title":"Overview of Provider","text":"order_refer(): provider eligible order refer? pending(): provider’s Medicare application processed? taxonomy(): provider’s specialty eligible enroll Medicare? quality_stats(): Yearly QPP/MIPS performance data.","code":""},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper Functions","title":"Overview of Provider","text":"Several functions required year argument. years available query APIs might change time, accompanying helper function retrieve years available, form <function_name>_years(). instance, quality_payment()’s : can also used pipeline, searching available years:","code":"quality_years() #> [1] 2017 2018 2019 2020 2021 map_dfr(quality_years(), ~quality_payment(year = .x, npi = 1043477615)) |>    select(year:final_score) #> # A tibble: 5 × 11 #>    year npi        state  size clinician_specialty       years_in_medicare #>   <int> <chr>      <chr> <int> <chr>                                 <int> #> 1  2017 1043477615 PA     1394 Cardiac Electrophysiology                 5 #> 2  2018 1043477615 PA     1297 Cardiac Electrophysiology                 5 #> 3  2019 1043477615 PA     1344 Cardiac Electrophysiology                 6 #> 4  2020 1043477615 PA     1440 Cardiac Electrophysiology                 7 #> 5  2021 1043477615 PA     1940 Cardiac Electrophysiology                 8 #> # ℹ 5 more variables: participation_type <chr>, beneficiaries <int>, #> #   services <int>, allowed_charges <dbl>, final_score <chr>"},{"path":"https://andrewallenbruce.github.io/provider/articles/provider.html","id":"validation-checks","dir":"Articles","previous_headings":"","what":"Validation Checks","title":"Overview of Provider","text":"Several validation checks implemented, including checks NPIs, PAC IDs, Enrollment IDs: National Provider Identifier: National Provider Identifier (NPI) unique 10-digit identification number issued health care providers United States Centers Medicare Medicaid Services (CMS) National Plan Provider Enumeration System (NPPES). individual HIPAA–covered healthcare providers organizations must obtain NPI. assigned, provider’s NPI permanent remains provider regardless job location changes.  Provider Associate-level Control ID: Provider associate-level control ID (PAC ID) 10-digit unique numeric identifier assigned individual organization PECOS. PAC ID links entity-level information (e.g., tax identification numbers organizational names) may associated multiple enrollment IDs individual organization enrolled multiple times different circumstances.  Medicare Enrollment ID: Enrollment ID 15-digit unique alphanumeric identifier assigned new provider enrollment application. enrollment-level information (e.g., enrollment type, enrollment state, provider specialty reassignment benefits) linked Enrollment ID.  Note: R drop leading zeros numeric vector ’s evaluated. Parameters contain leading zeros must input character vector:","code":"# Must be 10 digits long open_payments(npi = 12345691234, year = 2021) #> Error in `open_payments()`: #> ! An NPI must be 10 digits long. #> ✖ 12345691234 contains 11 digits.  # Must be numeric nppes(npi = \"O12345678912\") #> Error in `nppes()`: #> ! An NPI must be numeric. #> ✖ \"O12345678912\" contains non-numeric characters.  # Must pass Luhn check pending(npi = 001234569123, type = \"physician\") #> Error in `pending()`: #> ! An NPI must pass Luhn algorithm. #> ✖ 1234569123 fails Luhn check. # Must be 10 digits long affiliations(pac_ind = 0123456789) #> Error in affiliations(pac_ind = 123456789): unused argument (pac_ind = 123456789)  # Must be numeric hospitals(pac_org = \"O12345678912\") #> Error in hospitals(pac_org = \"O12345678912\"): unused argument (pac_org = \"O12345678912\") # Must be a character vector clinicians(enroll_id_ind = 0123456789123456) #> Error in clinicians(enroll_id_ind = 123456789123456): unused argument (enroll_id_ind = 123456789123456)  # Must be 15 characters long revalidation_date(enroll_id = \"I123456789123456\") #> Error in `revalidation_date()`: #> ! An Enrollment ID must be 15 characters long. #> ✖ \"I123456789123456\" contains 16 characters.  # Must begin with a capital I (Individual) or O (Organization/Group) providers(enroll_id = \"012345678912345\") #> Error in `providers()`: #> ! An Enrollment ID must begin with a capital `I` or `O`. #> ✖ \"012345678912345\" begins with \"0\".  # Some functions require one of ID types hospitals(enroll_id_org = \"I20180115000174\") #> Error in `hospitals()`: #> ! An org/group Enrollment ID must begin with a capital `O`. #> ✖ \"I20180115000174\" begins with \"I\". # Leading zeros are dropped in an integer vector: 0001 #> [1] 1 # But preserved in a character vector: \"0001\" #> [1] \"0001\""},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Bruce. Author, maintainer, copyright holder.","code":""},{"path":"https://andrewallenbruce.github.io/provider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bruce (2023). provider: Access Public Healthcare Provider Data. https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider.","code":"@Manual{,   title = {provider: Access Public Healthcare Provider Data},   author = {Andrew Bruce},   year = {2023},   note = {https://andrewallenbruce.github.io/provider/, https://github.com/andrewallenbruce/provider}, }"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"provider-","dir":"","previous_headings":"","what":"Access Public Healthcare Provider Data","title":"Access Public Healthcare Provider Data","text":"Providing easy access healthcare provider data publicly available APIs & sources.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access Public Healthcare Provider Data","text":"can install provider GitHub :","code":"# install.packages(\"pak\") pak::pak(\"andrewallenbruce/provider\")"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Access Public Healthcare Provider Data","text":"overarching goal provider make experience accessing publicly-available Provider data easier consistent across variety sources. aims accomplish following general goals, possible: Structuring output tidy framework much reasonably possible, option turn setting tidy = FALSE. Harmonization variable names, express purpose making easier understand (make connections ) API’s output. also allow removal duplicate information across API output, desired. Validation checks inputs, reasonable (e.g, identifiers NPI, PAC ID, Medicare Enrollment ID, CCN, Taxonomy codes). simply good practice, also prevent unnecessary querying APIs. Well-written documentation, containing many examples necessary. API’s output can difficult understand, even someone expertise R, healthcare, .","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"exported-functions","dir":"","previous_headings":"","what":"Exported Functions","title":"Access Public Healthcare Provider Data","text":"API Search functions can grouped according type data return provider: administrative, statistical, auxiliary.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"administrative","dir":"","previous_headings":"Exported Functions","what":"Administrative","title":"Access Public Healthcare Provider Data","text":"nppes(): Registry healthcare providers. providers(): Providers actively enrolled Medicare. opt_out(): Providers currently opted Medicare. revalidation_*(): Link Type-1 Type-2 providers. clinicians(): Provider school, graduation year, linking. affiliations(): Linking providers Facilities. hospitals(): Facilities linked providers.","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"statistical","dir":"","previous_headings":"Exported Functions","what":"Statistical","title":"Access Public Healthcare Provider Data","text":"following return provider-specific stats: by_provider(): Yearly high-level utilization data. by_service(): Yearly detailed utilization data. quality_payment(): Yearly QPP/MIPS performance data. quality_eligibility(): Yearly QPP/MIPS eligibility data. open_payments(): Yearly Open Payments reporting data. following return yearly stats useful comparison data returned by_service(): geography() beneficiary() chronic_multiple() chronic_specific()","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"auxiliary","dir":"","previous_headings":"Exported Functions","what":"Auxiliary","title":"Access Public Healthcare Provider Data","text":"order_refer(): provider eligible order refer? missing_endpoints(): provider missing Endpoints NPPES NPI Registry? pending_applications(): provider’s Medicare application processed? taxonomy_crosswalk(): provider’s specialty eligible enroll Medicare?","code":""},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Access Public Healthcare Provider Data","text":"","code":"library(provider)"},{"path":"https://andrewallenbruce.github.io/provider/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access Public Healthcare Provider Data","text":"Please note provider project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":null,"dir":"Reference","previous_headings":"","what":"Facility Affiliations — affiliations","title":"Facility Affiliations — affiliations","text":"affiliations() allows access information concerning providers' facility affiliations Links: Physician Facility Affiliations Certification Number (CCN) State Codes Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facility Affiliations — affiliations","text":"","code":"affiliations(   npi = NULL,   pac = NULL,   first = NULL,   middle = NULL,   last = NULL,   facility_type = NULL,   facility_ccn = NULL,   parent_ccn = NULL,   offset = 0L,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facility Affiliations — affiliations","text":"npi < integer > 10-digit national provider identifier pac < integer > 10-digit individual provider associate level variable Links entity-level information may associated multiple enrollment IDs individual organization enrolled multiple times first, middle, last < character > Individual provider's first, middle, last name facility_type < character > \"Hospital\" \"hp\" \"Long-term care hospital\" \"ltch\" \"Nursing home\" \"nh\" \"Inpatient rehabilitation facility\" \"irf\" \"Home health agency\" \"hha\" \"Skilled nursing facility\" \"snf\" \"Hospice\" \"hs\" \"Dialysis facility\" \"df\" facility_ccn < character > 6-digit CMS Certification Number facility unit within hospital individual provider provides service parent_ccn < integer > 6-digit CMS Certification Number sub-unit's primary hospital, provider provide services said unit offset < integer > offset; API pagination tidy < boolean > Tidy output; default TRUE na.rm < boolean > Remove empty rows columns; default TRUE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facility Affiliations — affiliations","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/affiliations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facility Affiliations — affiliations","text":"","code":"if (FALSE) { # interactive() affiliations(parent_ccn = 670055) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Beneficiary Enrollment in Medicare — beneficiaries","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"beneficiaries() allows access current data enrolled Medicare beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"medicare-monthly-enrollment","dir":"Reference","previous_headings":"","what":"Medicare Monthly Enrollment","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"Current monthly information number Medicare beneficiaries hospital/medical coverage prescription drug coverage, available several geographic areas including national, state county. hospital/medical coverage data can broken health care delivery (Original Medicare versus Medicare Advantage Health Plans) prescription drug coverage data can examined enrolled stand-alone Prescription Drug Plans enrolled Medicare Advantage Prescription Drug plans. dataset includes enrollee counts rolling 12 month basis also provides information yearly trends.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"Medicare Monthly Enrollment Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"","code":"beneficiaries(   year = NULL,   period = NULL,   level = NULL,   state = NULL,   county = NULL,   fips = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"year Calendar year Medicare enrollment; current years can checked : beneficiaries_years(\"year\"): Years available 12 months beneficiaries_years(\"month\"): Years available individual months period Time frame Medicare enrollment; options : Year Month individual month name level Geographic level data; options : National State County state Full state name abbreviation beneficiary residence county County beneficiary residence fips FIPS code beneficiary residence tidy Tidy output; default TRUE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/beneficiaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beneficiary Enrollment in Medicare — beneficiaries","text":"","code":"if (FALSE) { # interactive() beneficiaries(year = 2022, period = \"Year\", level = \"County\", county = \"Autauga\") beneficiaries(year = 2022, period = \"July\", state = \"Georgia\") beneficiaries(level = \"State\", fips = \"10\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/betos_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Restructured BETOS Classification System — betos_classification","title":"Restructured BETOS Classification System — betos_classification","text":"betos_classification() allows user group HCPCS codes clinically meaningful categories based original Berenson-Eggers Type Service (BETOS) classification. Users may use RBCS analyze trends perform types health services analytic work.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos_classification.html","id":"betos","dir":"Reference","previous_headings":"","what":"BETOS","title":"Restructured BETOS Classification System — betos_classification","text":"Restructured BETOS Classification System (RBCS) taxonomy allows researchers group healthcare service codes Medicare Part B services clinically meaningful categories subcategories. based original Berenson-Eggers Type Service (BETOS) classification created 1980s, includes notable updates Part B non-physician services. RBCS undergo annual updates technical expert panel researchers clinicians. general framework grouping service codes new RBCS taxonomy largely follows structure BETOS. Like BETOS, RBCS groups HCPCS codes categories, subcategories, families – categories aggregate level families granular level. Medicare Part B service codes, including non-physician services, assigned 6-character RBCS taxonomy code. Links: Restructured BETOS Classification System Restructured BETOS Classification System Data Dictionary Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restructured BETOS Classification System — betos_classification","text":"","code":"betos_classification(   hcpcs_code = NULL,   category = NULL,   subcategory = NULL,   family = NULL,   procedure = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/betos_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restructured BETOS Classification System — betos_classification","text":"hcpcs_code < character > HCPCS CPT code category < character > RBCS Category Description subcategory < character > RBCS Subcategory Description family < character > RBCS Family Description procedure < character > Whether HCPCS code Major (\"M\"), (\"O\"), non-procedure code (\"N\"). tidy < boolean > Tidy output; default TRUE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restructured BETOS Classification System — betos_classification","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/betos_classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restructured BETOS Classification System — betos_classification","text":"","code":"if (FALSE) { # interactive() betos_classification(hcpcs_code = \"0001U\") betos_classification(category = \"Test\") betos_classification(subcategory = \"General Laboratory\") betos_classification(family = \"Immunoassay\") betos_classification(procedure = \"M\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculations for Providers' stats — calculations","title":"Calculations for Providers' stats — calculations","text":"Functions calculating lagged changes elapsed duration dates.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculations for Providers' stats — calculations","text":"","code":"change(df, cols, digits = 3)  years_df(df, date_col)"},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculations for Providers' stats — calculations","text":"df data frame cols numeric columns digits Number digits round , default 3 date_col date column","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculations for Providers' stats — calculations","text":"tibble number years since today's date","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/calculations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculations for Providers' stats — calculations","text":"","code":"df <- dplyr::tibble(year = 2015:2020,                     charges = sample(1000:2000, size = 6),                     payment = sample(1000:2000, size = 6))  # Calculate the lagged absolute/relative change # and the cumulative sum of both: change(df, c(charges, payment)) #> # A tibble: 6 × 11 #>    year charges payment charges_chg payment_chg charges_chg_cum payment_chg_cum #>   <int>   <int>   <int>       <int>       <int>           <int>           <int> #> 1  2015    1799    1508           0           0               0               0 #> 2  2016    1514    1554        -285          46            -285              46 #> 3  2017    1511    1715          -3         161            -288             207 #> 4  2018    1598    1102          87        -613            -201            -406 #> 5  2019    1225    1003        -373         -99            -574            -505 #> 6  2020    1659    1743         434         740            -140             235 #> # ℹ 4 more variables: charges_pct <dbl>, payment_pct <dbl>, #> #   charges_pct_cum <dbl>, payment_pct_cum <dbl>  # Calculate the number of years between dates: dplyr::tibble(date = lubridate::today() - 366) |> years_df(date_col = date) #> # A tibble: 1 × 2 #>   date       years_passed #>   <date>            <dbl> #> 1 2022-10-05            1"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"cc_multiple(   year,   level = NULL,   sublevel = NULL,   fips = NULL,   age_group = NULL,   demographic = NULL,   subdemo = NULL,   mcc = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. tot_std_pymt_percap Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. tot_pymt_percap Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). hosp_readmsn_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits_per_1k Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"year integer, YYYY, calendar year Medicare enrollment. Run helper function cc_years() return vector currently available years. level Geographic level data; options \"National\", \"State\", \"County\" sublevel state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. fips FIPS state /county code Medicare beneficiary resides. column blank data aggregated National level Puerto Rico Virgin Islands. age_group Population age level data aggregated. \"\" includes Fee--Service Medicare beneficiaries. \"<65\" \"65+\" returns data age groups. demographic Population demographic level data aggregated. \"\" includes Fee--Service Medicare beneficiaries. \"Sex\" aggregates beneficiary gender,  \"Race\" beneficiary race. \"Dual Status\" aggregates beneficiary's dual eligibility status. subdemo Sex, beneficiary’s sex classified Male Female identified using information CMS enrollment database. Race, race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. Dual Status, beneficiaries can classified 'Medicare Medicaid' 'Medicare '. Beneficiaries enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. mcc classify MCC Medicare beneficiary, 21 chronic conditions counted grouped four categories: - \"0 1\" - \"2 3\" - \"4 5\" - \"6+\" tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Multiple Chronic Conditions dataset provides information number chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography count chronic conditions set select 21 chronic conditions. count conditions grouped four categories (0-1, 2-3, 4-5 6 ).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"Medicare Multiple Chronic Conditions Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Multiple Chronic Conditions API — cc_multiple","text":"","code":"if (FALSE) { # interactive() cc_multiple(year = 2018, level = \"State\", sublevel = \"California\") cc_multiple(year = 2007, level = \"National\", demographic = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Specific Chronic Conditions API — cc_specific","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Information prevalence, use spending count select chronic conditions among Original Medicare (fee--service) beneficiaries.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"cc_specific(   year,   condition = NULL,   sublevel = NULL,   level = NULL,   fips = NULL,   age_group = NULL,   demographic = NULL,   subdemo = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"prevalence Prevalence estimates calculated taking beneficiaries within MCC category divided total number beneficiaries fee--service population, expressed percentage. tot_std_pymt_percap Medicare standardized spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). Standardized payments presented allow comparisons across geographic areas health care use among beneficiaries. tot_pymt_percap Medicare spending includes total Medicare payments covered services Parts B presented per beneficiary (.e. per capita). hosp_readmsn_rate Hospital readmissions expressed percentage admissions. 30-day readmission defined admission acute care hospital cause within 30 days discharge acute care hospital. Except patient died stay, inpatient stay classified index admission, readmission, . er_visits_per_1k Emergency department visits presented number visits per 1,000 beneficiaries. ED visits include visits beneficiary released outpatient setting beneficiary admitted inpatient setting.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"year integer, YYYY, calendar year Medicare enrollment. Run helper function cc_years() return vector currently available years. condition Identifies chronic condition prevalence utilization compiled. 21 chronic conditions identified using Medicare administrative claims. Medicare beneficiary considered chronic condition CMS administrative data claim indicating beneficiary received service treatment specific condition. Beneficiaries may one chronic conditions listed. sublevel state /county Medicare beneficiary resides. values include 50 United States, District Columbia, Puerto Rico U.S. Virgin Islands. Data aggregated National level identified \"National'. level Geographic level data; options National, State, County fips FIPS state /county code Medicare beneficiary resides. column blank data aggregated National level Puerto Rico Virgin Islands. age_group Identifies age level population data aggregated. value indicates data row represents Fee--Service Medicare Beneficiaries. value <65 65+ indicates data aggregated age Medicare Beneficiaries end calendar year. demographic Identifies demographic level population data aggregated. value indicates data row represents Fee--Service Medicare beneficiaries. value Sex indicates data aggregated Medicare beneficiary's sex. value Race indicates data aggregated Medicare beneficiary's race. value Dual Status indicates data aggregated Medicare beneficiary's dual eligibility status. subdemo Sex, beneficiary’s sex classified Male Female identified using information CMS enrollment database. Race, race/ethnicity classifications : Non-Hispanic White, Black African American, Asian/Pacific Islander, Hispanic, American Indian/Alaska Native. Dual Status, beneficiaries can classified 'Medicare Medicaid' 'Medicare '. Beneficiaries enrolled Medicare Medicaid known “dual eligibles.” Medicare beneficiaries classified dual eligibles month given calendar year receiving full partial Medicaid benefits. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Select Chronic Conditions dataset provides information 21 selected chronic conditions among Original Medicare beneficiaries. dataset contains prevalence, use spending organized geography distinct chronic conditions listed : Alcohol Abuse Alzheimer’s Disease/Dementia Arthritis Asthma Atrial Fibrillation Autism Spectrum Disorders Cancer Chronic Kidney Disease COPD Depression Diabetes Drug Abuse/Substance Abuse Heart Failure Hepatitis (Chronic Viral B & C) HIV/AIDS Hyperlipidemia Hypertension Ischemic Heart Disease Osteoporosis Schizophrenia Psychotic Disorders Stroke","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"Medicare Specific Chronic Conditions Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/cc_specific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Specific Chronic Conditions API — cc_specific","text":"","code":"if (FALSE) { # interactive() cc_specific(year = 2018, level = \"State\", sublevel = \"CA\") cc_specific(year = 2007, level  = \"National\", demographic = \"Race\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinicians Enrolled in Medicare — clinicians","title":"Clinicians Enrolled in Medicare — clinicians","text":"clinicians() allows access information providers enrolled Medicare, including medical school attended year graduated Links: National Downloadable File Provider Data Catalog (PDC) Data Dictionary Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinicians Enrolled in Medicare — clinicians","text":"","code":"clinicians(   npi = NULL,   pac = NULL,   enroll_id = NULL,   first = NULL,   middle = NULL,   last = NULL,   gender = NULL,   school = NULL,   grad_year = NULL,   specialty = NULL,   facility_name = NULL,   pac_org = NULL,   city = NULL,   state = NULL,   zip = NULL,   offset = 0L,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clinicians Enrolled in Medicare — clinicians","text":"npi < integer > 10-digit national provider identifier pac < integer > 10-digit individual provider associate-level control identifier enroll_id < character > 15-digit individual provider Medicare enrollment identifier; begins capital \"\" first, middle, last < character > Individual provider's first, middle, last name gender < character > Individual provider's gender; \"F\" (Female) \"M\" (Male) school < character > Individual provider’s medical school grad_year < integer > Individual provider’s graduation year specialty < character > Individual provider’s primary medical specialty reported selected enrollment facility_name < character > Name facility associated individual provider pac_org < integer > 10-digit organizational/group provider associate-level control identifier city < character > Provider's city state < character > Provider's state zip < character > Provider's ZIP code offset < integer > offset; API pagination tidy < boolean > Tidy output; default TRUE na.rm < boolean > Remove empty rows columns; default TRUE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinicians Enrolled in Medicare — clinicians","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/clinicians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clinicians Enrolled in Medicare — clinicians","text":"","code":"if (FALSE) { # interactive() clinicians(enroll_id_ind = \"I20081002000549\") clinicians(school = \"NEW YORK UNIVERSITY SCHOOL OF MEDICINE\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Yearly Chronic Condition Prevalence Data — compare_conditions","title":"Compare Yearly Chronic Condition Prevalence Data — compare_conditions","text":"compare_conditions() allows compare yearly chronic condition prevalence provider, state national averages","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Yearly Chronic Condition Prevalence Data — compare_conditions","text":"","code":"compare_conditions(df)"},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Yearly Chronic Condition Prevalence Data — compare_conditions","text":"df data frame returned by_provider()","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Yearly Chronic Condition Prevalence Data — compare_conditions","text":"tibble containing results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Yearly Chronic Condition Prevalence Data — compare_conditions","text":"","code":"if (FALSE) { # interactive() prac_years() |> map(\\(x) by_provider(year = x, npi = 1023076643)) |> list_rbind() |> compare_conditions() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_hcpcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Yearly HCPCS Utilization Data — compare_hcpcs","title":"Compare Yearly HCPCS Utilization Data — compare_hcpcs","text":"compare_hcpcs() allows compare yearly HCPCS utilization provider, state national averages","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_hcpcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Yearly HCPCS Utilization Data — compare_hcpcs","text":"","code":"compare_hcpcs(df)"},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_hcpcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Yearly HCPCS Utilization Data — compare_hcpcs","text":"df data frame returned by_service()","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_hcpcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Yearly HCPCS Utilization Data — compare_hcpcs","text":"tibble containing results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/compare_hcpcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Yearly HCPCS Utilization Data — compare_hcpcs","text":"","code":"if (FALSE) { # interactive() prac_years() |> map(\\(x) by_service(year = x, npi = 1023076643)) |> list_rbind() |> compare_hcpcs() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Current NUCC Taxonomy CSV — download_nucc_csv","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"download_nucc_csv() allows download csv file current Health Care Provider Taxonomy code set NUCC website","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"taxonomy-codes","dir":"Reference","previous_headings":"","what":"Taxonomy Codes","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. code set structured three distinct \"Levels\": Level (Provider Grouping): major grouping service(s) occupation(s) health care providers. example: Allopathic & Osteopathic Physicians, Dental Providers, Hospitals, etc. Level II: (Classification): specific service occupation related Provider Grouping. example, Classification Allopathic & Osteopathic Physicians based upon General Specialty Certificates issued appropriate national boards. following boards however, general certificates appear Level III areas specialization strictly due display limitations code set Boards multiple general certificates: Medical Genetics, Preventive Medicine, Psychiatry & Neurology, Radiology, Surgery, Otolaryngology, Pathology. Level III: (Area Specialization): specialized area Classification provider chooses practice make services available. example, Area Specialization provider type Allopathic & Osteopathic Physicians based upon Subspecialty Certificates issued appropriate national boards. Health Care Provider Taxonomy code set Levels organized allow drilling provider's specific level specialization. ten digit codes provider category unique contain embedded logic. codes categories used exactly assigned Taxonomy list. time codes separated form new codes, parsed apart, edited one position within code.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"","code":"download_nucc_csv()"},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"https://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57 Update Frequency: Biannually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"\"230\" designation indicates version code set. NUCC updates set every six months. \"23\" indicates year \"0\" indicates first update year. taxonomy code display name consumer-friendly name code. display name combination code name Level code nested, precisely identifies code.  example, Addiction Medicine physician subspecialty Anesthesiology, Family Medicine, Internal Medicine, Preventive Medicine, Psychiatry & Neurology. Seeing “Addiction Medicine” identify specialty physician, display name “Addiction Medicine (Internal Medicine) Physician” clearly . another example, code “Radiology” confused several codes, “Radiology Chiropractor” specifies exact provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"how-many-categories-are-there-","dir":"Reference","previous_headings":"","what":"How Many Categories are There?","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"Health Care Provider Taxonomy code set collection unique alphanumeric codes, ten characters length. Health Care Provider Taxonomy code set includes specialty categories individuals, Groups individuals, non-individuals. Individual Category includes: Allopathic & Osteopathic Physicians Behavioral Health Social Service Providers Chiropractic Providers Dental Providers Dietary Nutritional Service Providers Emergency Medical Service Providers Eye Vision Service Providers Nursing Service Providers Nursing Service Related Providers Service Providers Pharmacy Service Providers Physician Assistants Advanced Practice Nursing Providers Podiatric Medicine Surgery Service Providers Respiratory, Developmental, Rehabilitative Restorative Service Providers Speech, Language Hearing Service Providers Student, Health Care Technologists, Technicians, Technical Service Providers Group (Individuals) Category includes: Multi-Specialty Single Specialty Non-Individual Category includes: Agencies Ambulatory Health Care Facilities Hospital Units Hospitals Laboratories Managed Care Organizations Nursing Custodial Care Facilities Service Providers Residential Treatment Facilities Respite Care Facilities Suppliers Transportation Services","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"description","dir":"Reference","previous_headings":"","what":"Description","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"code: Taxonomy Code grouping: Level , Provider Grouping classification: Level II, Classification specialization: Level III, Area Specialization definition: Definition Taxonomy notes: Notes pertaining Taxonomy, e.g. sources, date modified, date implemented, etc. display_name: consumer-friendly name taxonomy code; combination code name Level code nested. section: Indicates whether Taxonomy Individual Non-Individual, .e., group taxonomy","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/download_nucc_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Current NUCC Taxonomy CSV — download_nucc_csv","text":"","code":"if (FALSE) { # interactive() download_nucc_csv() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":null,"dir":"Reference","previous_headings":"","what":"Hospitals Enrolled in Medicare — hospitals","title":"Hospitals Enrolled in Medicare — hospitals","text":"hospitals() allows search information hospitals currently enrolled Medicare. Data returned includes hospital's sub-group types, legal business name, -business-name, organization type address. Links: Hospital Enrollments Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hospitals Enrolled in Medicare — hospitals","text":"","code":"hospitals(   npi = NULL,   facility_ccn = NULL,   enroll_id_org = NULL,   enroll_state = NULL,   specialty_code = NULL,   pac_id_org = NULL,   organization = NULL,   doing_business_as = NULL,   city = NULL,   state = NULL,   zip = NULL,   proprietary_nonprofit = NULL,   multiple_npis = NULL,   general = NULL,   acute_care = NULL,   alcohol_drug = NULL,   childrens = NULL,   long_term = NULL,   psychiatric = NULL,   rehabilitation = NULL,   short_term = NULL,   swing_bed = NULL,   psych_unit = NULL,   rehab_unit = NULL,   specialty_hospital = NULL,   other = NULL,   reh_conversion = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hospitals Enrolled in Medicare — hospitals","text":"npi < integer > 10-digit national provider identifier facility_ccn < character > 6-digit CMS Certification Number hospital enroll_id_org < character > 15-digit organizational provider Medicare enrollment identifier; begins capital \"O\" enroll_state < character > Hospital’s enrollment state specialty_code < character > Enrollment specialty type code pac_id_org < integer > 10-digit organizational/group provider associate-level control identifier organization < character > Hospital’s legal business name doing_business_as < character > Hospital’s -business-name city < character > City hospital’s practice location state < character > State hospital’s practice location zip < character > Zip code hospital’s practice location proprietary_nonprofit < character > \"P\" hospital registered proprietor IRS; \"N\" registered non-profit multiple_npis < boolean > Indicates hospital one NPI general < boolean > Indicates hospital’s subgroup/unit General acute_care < boolean > Indicates hospital’s subgroup/unit Acute Care alcohol_drug < boolean > Indicates hospital’s subgroup/unit Alcohol/Drug childrens < boolean > Indicates hospital’s subgroup/unit Children's Hospital long_term < boolean > Indicates hospital’s subgroup/unit Long-Term psychiatric < boolean > Indicates hospital’s subgroup/unit Psychiatric rehabilitation < boolean > Indicates hospital’s subgroup/unit Rehabilitation short_term < boolean > Indicates hospital’s subgroup/unit Short-Term swing_bed < boolean > Indicates hospital’s subgroup/unit Swing-Bed Approved psych_unit < boolean > Indicates hospital’s subgroup/unit Psychiatric Unit rehab_unit < boolean > Indicates hospital’s subgroup/unit Rehabilitation Unit specialty_hospital < boolean > Indicates hospital’s subgroup/unit Specialty Hospital < boolean > Indicates hospital’s subgroup/unit listed CMS form reh_conversion < boolean > Indicates former Hospital Critical Access Hospital converted Rural Emergency Hospital tidy < boolean > Tidy output; default TRUE. na.rm < boolean > Remove empty rows columns; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hospitals Enrolled in Medicare — hospitals","text":"tibble containing search results.","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/hospitals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hospitals Enrolled in Medicare — hospitals","text":"","code":"hospitals(pac_id_org = 6103733050) #> # A tibble: 2 × 18 #>   npi   organization pac_org enroll_id_org facility_ccn specialty_code specialty #>   <chr> <chr>        <chr>   <chr>         <chr>        <chr>          <chr>     #> 1 1164… ST CHARLES … 610373… O20020904000… 330246       00-09          PART A P… #> 2 1225… ST CHARLES … 610373… O20090408000… 33T246       00-09          PART A P… #> # ℹ 11 more variables: enroll_state <chr>, incorporation_date <date>, #> #   incorporation_state <chr>, organization_structure <chr>, address <chr>, #> #   city <chr>, state <chr>, zip <int>, location_type <chr>, #> #   proprietary_nonprofit <chr>, status <chr>  hospitals(state = \"GA\", reh_conversion = TRUE) #> # A tibble: 1 × 22 #>   npi        organization   doing_business_as pac_org enroll_id_org facility_ccn #>   <chr>      <chr>          <chr>             <chr>   <chr>         <chr>        #> 1 1720098791 IRWIN COUNTY … PROGRESSIVE MEDI… 761895… O20230310002… 110779       #> # ℹ 16 more variables: specialty_code <chr>, specialty <chr>, #> #   enroll_state <chr>, incorporation_state <chr>, #> #   organization_structure <chr>, org_other <chr>, address <chr>, city <chr>, #> #   state <chr>, zip <int>, location_type <chr>, location_other <chr>, #> #   cah_or_hospital_ccn <chr>, reh_conversion_date <date>, #> #   proprietary_nonprofit <chr>, status <chr>"},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Laboratories — laboratories","title":"Clinical Laboratories — laboratories","text":"laboratories() allows search information clinical laboratories including demographics type testing services facility provides.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"clinical-laboratory-improvement-amendments-clia-","dir":"Reference","previous_headings":"","what":"Clinical Laboratory Improvement Amendments (CLIA)","title":"Clinical Laboratories — laboratories","text":"CMS regulates laboratory testing (except research) performed humans U.S. Clinical Laboratory Improvement Amendments (CLIA). total, CLIA covers approximately 320,000 laboratory entities. Division Clinical Laboratory Improvement & Quality, within Quality, Safety & Oversight Group, Center Clinical Standards Quality (CCSQ) responsibility implementing CLIA Program. Although clinical laboratories must properly certified receive Medicare Medicaid payments, CLIA direct Medicare Medicaid program responsibilities.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"clia-certificates","dir":"Reference","previous_headings":"","what":"CLIA Certificates","title":"Clinical Laboratories — laboratories","text":"five CLIA certificate types effective period two years. follows, order increasing complexity: Certificate Waiver: Issued laboratory perform waived tests; waive lab CLIA requirements. Waived tests laboratory tests simple perform. Routine inspections conducted waiver labs, although 2% visited year ensure quality laboratory testing. Certificate Provider-Performed Microscopy Procedures (PPM): Issued laboratory physician, midlevel practitioner dentist performs limited tests require microscopic examination. PPM tests considered moderate complexity. Waived tests can also performed certificate type. routine inspections conducted PPM labs. Certificate Registration: Initially issued laboratory applied Certificate Compliance Accreditation, enabling lab conduct moderate/high complexity testing survey performed laboratory found CLIA compliance. Includes PPM waived testing. Certificate Compliance: Allows laboratory conduct moderate/high complexity testing issued inspection finds lab compliance applicable CLIA requirements. Includes PPM waived testing. Certificate Accreditation: Exactly Certificate Compliance, except laboratory must accredited one following CMS-approved accreditation organizations: American Association Laboratory Accreditation (A2LA) Association Advancement Blood & Biotherapies (AABB) American Osteopathic Association (AOA) American Society Histocompatibility Immunogenetics (ASHI) College American Pathologists (CAP) Commission Office Laboratory Accreditation (COLA) Joint Commission (JCAHO) Links: Provider Services File - Clinical Laboratories Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Laboratories — laboratories","text":"","code":"laboratories(   name = NULL,   clia = NULL,   certificate = NULL,   city = NULL,   state = NULL,   zip = NULL,   active = FALSE,   tidy = TRUE,   na.rm = TRUE,   pivot = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clinical Laboratories — laboratories","text":"name < character > Provider clinical laboratory's name clia < character > 10-character CLIA number certificate < character > CLIA certificate type: \"waiver\" \"ppm\" (Provider-Performed Microscopy Procedures) \"registration\" \"compliance\" \"accreditation\" city < character > City state < character > State zip < character > Zip code active < boolean > Search Active providers ? dedault FALSE tidy < boolean > Tidy output; default TRUE na.rm < boolean > Remove empty rows columns; default TRUE pivot < boolean > Pivot output; default TRUE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinical Laboratories — laboratories","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/laboratories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clinical Laboratories — laboratories","text":"","code":"laboratories(clia = \"11D0265516\") #> # A tibble: 1 × 23 #>   clia_number name            certificate effective_date expiration_date expired #>   <chr>       <chr>           <chr>       <date>         <date>          <lgl>   #> 1 11D0265516  DANIEL FELDMAN… Compliance  1996-08-29     1998-08-04      TRUE    #> # ℹ 17 more variables: termination_reason <chr>, status <chr>, poc_ind <lgl>, #> #   type_of_action <chr>, ownership_type <chr>, facility_type <chr>, #> #   director_affiliations <int>, address <chr>, city <chr>, state <chr>, #> #   zip <chr>, phone <chr>, orig_part_date <date>, application_date <date>, #> #   certification_date <date>, mailed_date <date>, clia_class_current <chr>"},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":null,"dir":"Reference","previous_headings":"","what":"2021 Quality Payment Performance — mips_2021","title":"2021 Quality Payment Performance — mips_2021","text":"Performance information Merit-Based Incentive Payment System (MIPS) submitted groups.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2021 Quality Payment Performance — mips_2021","text":"","code":"mips_2021(   facility_name = NULL,   pac_id_org = NULL,   npi = NULL,   pac_id_ind = NULL,   first_name = NULL,   last_name = NULL,   offset = 0L,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2021 Quality Payment Performance — mips_2021","text":"facility_name Organization name pac_id_org Unique organization ID assigned PECOS npi Unique clinician ID assigned NPPES pac_id_ind Unique individual clinician ID assigned PECOS first_name Individual clinician first name last_name Individual clinician last name offset offset; API pagination tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2021 Quality Payment Performance — mips_2021","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/mips_2021.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2021 Quality Payment Performance — mips_2021","text":"","code":"if (FALSE) { # interactive() mips_2021(pac_id_org = 4789842956) mips_2021(npi = 1316172182) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Providers Missing Endpoints in NPPES — missing_endpoints","title":"Providers Missing Endpoints in NPPES — missing_endpoints","text":"missing_endpoints() allows search providers missing digital contact information NPPES.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_endpoints.html","id":"nppes-endpoints","dir":"Reference","previous_headings":"","what":"NPPES Endpoints","title":"Providers Missing Endpoints in NPPES — missing_endpoints","text":"Digital contact information, also known endpoints, provides secure way health care entities send authenticated, encrypted health information trusted recipients internet. Health care organizations seeking engage electronic health information exchange need accurate information electronic addresses (e.g., Direct address, FHIR server URL, query endpoint, digital contact information) potential exchange partners facilitate information exchange.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_endpoints.html","id":"links-","dir":"Reference","previous_headings":"","what":"Links:","title":"Providers Missing Endpoints in NPPES — missing_endpoints","text":"CMS Public Reporting Missing Digital Contact Information API Endpoints Information Methodology & Policy Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Providers Missing Endpoints in NPPES — missing_endpoints","text":"","code":"missing_endpoints(npi = NULL, name = NULL, tidy = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_endpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Providers Missing Endpoints in NPPES — missing_endpoints","text":"npi provider’s National Provider Identifier name Provider's full name, form \"last, first\" tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_endpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Providers Missing Endpoints in NPPES — missing_endpoints","text":"tibble containing search results.","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/missing_endpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Providers Missing Endpoints in NPPES — missing_endpoints","text":"","code":"if (FALSE) { # interactive() # A provider that appears in the search results # of the Missing Information API has no Endpoints # entered into the NPPES NPI Registry and vice versa.  ## Appears missing_endpoints(name = \"Clouse, John\")  ## No Endpoints in NPPES nppes(npi = 1144224569,       tidy = FALSE) |>       dplyr::select(endpoints)  ## Does Not Appear missing_endpoints(npi = 1003000423)  ## Has Endpoints in NPPES nppes(npi = 1003000423, tidy = FALSE) |> dplyr::select(endpoints) |> tidyr::unnest(cols = c(endpoints)) |> janitor::clean_names() |> dplyr::select(dplyr::contains(\"endpoint\")) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":null,"dir":"Reference","previous_headings":"","what":"National Registry of All Health Care Providers — nppes","title":"National Registry of All Health Care Providers — nppes","text":"nppes() allows search National Plan Provider Enumeration System (NPPES) NPI Registry's public API, free directory active National Provider Identifier (NPI) records. National Provider Identifier  Healthcare providers acquire unique 10-digit NPIs identify standard way throughout industry. CMS supplies NPI, publish parts NPI record public relevance, including provider’s name, taxonomy practice address. Enumeration Type  Two categories health care providers exist NPI enumeration purposes: Entity Type 1  Individual health care providers (including sole proprietors) may get NPI Entity Type 1. sole proprietor, must apply NPI using SSN, Employer Identification Number (EIN) even EIN. sole proprietor, may get one NPI, just like individual. following factors affect whether sole proprietor Entity Type 1: Number different office locations Whether employees Whether IRS issued EIN incorporated individual single health care provider forms conducts business corporation. sole proprietor incorporated individual sole proprietor form corporation. sole/solo practitioner, necessarily mean sole proprietor, vice versa. individual health care provider incorporated, may need get NPI (Entity Type 1) NPI corporation LLC (Entity Type 2). Entity Type 2  Organizational health care providers group health care providers eligible NPIs Entity Type 2. Organization health care providers may single employee thousands employees. example incorporated individual organization's employee. organization health care providers made parts work somewhat independently parent organization. parts may offer different types health care offer health care separate physical locations. parts physical locations legal entities part organization health care provider (legal entity). NPI Final Rule refers parts locations sub-parts. organization health care provider can get sub-parts NPIs. sub-part conducts HIPAA standard transactions (separately parent), must get NPI. Sub-part determination makes sure entities within covered organization uniquely identified HIPAA standard transactions conduct Medicare covered entities. example, hospital offers acute care, laboratory, pharmacy, rehabilitation services. sub-parts may need NPI sends standard transactions one health plans. Sub-part delegation affect Entity Type 1 health care providers. individuals, health care providers choose sub-parts sub-parts. Authorized Official  appointed official (e.g., chief executive officer, chief financial officer, general partner, chairman board, direct owner) organization granted legal authority enroll Medicare program, make changes updates organization's status Medicare program, commit organization fully abide statutes, regulations, program instructions Medicare program. Links NPPES NPI Registry API Documentation NPPES NPI Registry API Demo Trailing Wildcard Entries Arguments allow trailing wildcard entries denoted parameter description Trailing Wildcard Allowed. Wildcard entries require least two characters entered, e.g. \"jo*\" Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"National Registry of All Health Care Providers — nppes","text":"","code":"nppes(   npi = NULL,   entype = NULL,   first = NULL,   last = NULL,   alias = TRUE,   organization = NULL,   name_type = NULL,   taxonomy_desc = NULL,   address_type = NULL,   city = NULL,   state = NULL,   zip = NULL,   country = NULL,   limit = 1200,   skip = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"National Registry of All Health Care Providers — nppes","text":"npi 10-digit National Provider Identifier (NPI) entype Entity/enumeration type. criteria entered. \"\": Individual provider (NPI-1) \"O\": Organizational provider (NPI-2) first, last Individual provider's first/last name. Trailing Wildcard Allowed alias \"TRUE\"/\"FALSE\". Applies authorized officials individual providers wildcard search. set \"TRUE\", results include providers similar first names. organization Healthcare organization's name. Many types names (LBN, DBA, Former LBN, Name) may match. , results might contain name different one entered. Trailing Wildcard Allowed name_type Type name first/last arguments pertain : \"AO\": search Authorized Officials \"Provider\": search Individual Providers (default) taxonomy_desc Provider's taxonomy description, e.g. \"Pharmacist\", \"Pediatrics\" address_type Address type provider; options : \"location\" (Practice location) \"mailing\" \"primary\" \"secondary\" city City associated provider's address. search military address, enter either \"APO\" \"FPO\". state State abbreviation associated provider's address. field used, least one field, besides entype country, must populated. zip Zip code associated provider's address. 5 digit zip entered, matched appropriate 9 digit (zip+4) codes data. Trailing Wildcard Allowed country Country abbreviation associated provider's address. Can used input criterion, long value selected \"US\" (United States). limit Maximum number results return; default 1200. skip Number results skip set limit. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"National Registry of All Health Care Providers — nppes","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/nppes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"National Registry of All Health Care Providers — nppes","text":"","code":"if (FALSE) { # interactive() nppes(npi = 1528060837, tidy = FALSE) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":null,"dir":"Reference","previous_headings":"","what":"Open Payments — open_payments","title":"Open Payments — open_payments","text":"open_payments() allows search CMS' Open Payments Program API Open Payments program national disclosure program collects publishes information financial relationships drug medical device companies (referred \"reporting entities\") certain health care providers (referred \"covered recipients\"). relationships may involve payments providers things including limited research, meals, travel, gifts speaking fees. Applicable Group Purchasing Organizations (GPOs): Entities operate United States purchase, arrange negotiate purchase covered drugs, devices, biologicals, medical supplies group individuals entities, solely use entity . Applicable Manufacturers: Entities operate United States (1) engaged production, preparation, propagation, compounding, conversion covered drug, device, biological, medical supply, covered drug, device, biological medical supply solely use within entity entity's patients (definition include distributors wholesalers (including, limited , re-packagers, re-labelers, kit assemblers) hold title covered drug, device, biological medical supply); (2) entities common ownership entity described part (1) definition, provides assistance support entities respect production, preparation, propagation, compounding, conversion, marketing, promotion, sale, distribution covered drug, device, biological medical supply. Reporting Entities: Applicable manufacturers GPOs. Covered Recipients: physician, physician assistant, nurse practitioner, clinical nurse specialist, certified registered nurse anesthetist, certified nurse-midwife bona fide employee applicable manufacturer reporting payment; teaching hospital, institution received payment. Teaching Hospitals: Hospitals receive payment Medicare direct graduate medical education (GME), IPPS indirect medical education (IME), psychiatric hospital IME programs. Natures Payment: Categories must used describe payment transfer value made. applicable “general” payment type, research ownership. categories : Acquisitions (2021 - current) Charitable contributions Compensation services consulting Compensation serving faculty speaker : accredited certified continuing education program (2013 - 2020) unaccredited non-certified continuing education program (2013 - 2020) medical education program (2021 - current) Consulting fees Current prospective ownership investment interest (prior 2023) Debt Forgiveness (2021 - current) Education Entertainment Food beverage Gift Grant Honoraria Long-term medical supply device loan (2021 - current) Royalty license Space rental facility fees (Teaching Hospitals ) Travel lodging Transfers Value: Anything value given applicable manufacturer applicable GPO covered recipient physician owner/investor fall within one excluded categories rule. Ownership Investment Interests include, limited : Stock Stock option(s) (received compensation, exercised) Partnership share(s) Limited liability company membership(s) Loans Bonds Financial instruments secured entity’s property revenue may direct indirect debt, equity means. Links: Open Payments Program? Open Payments: General Resources Update Frequency: Yearly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open Payments — open_payments","text":"","code":"open_payments(   year,   npi = NULL,   covered_type = NULL,   first = NULL,   last = NULL,   city = NULL,   state = NULL,   zip = NULL,   teaching_hospital = NULL,   payer = NULL,   payer_id = NULL,   pay_form = NULL,   pay_nature = NULL,   offset = 0L,   tidy = TRUE,   pivot = FALSE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open Payments — open_payments","text":"year < integer > Program reporting year. Run helper function open_payments_years() return vector currently available years. npi < integer > Covered recipient's 10-digit national provider identifier covered_type < character > Type covered recipient: \"Physician\" \"Non-Physician Practitioner\" \"Teaching Hospital\" first, last < character > Covered recipient's first/last name city < character > Covered recipient's city state < character > Covered recipient's state abbreviation zip < character > Covered recipient's zip code teaching_hospital < character > Name teaching hospital, e.g. Vanderbilt University Medical Center payer < character > Paying entity's name; examples: \"Pharmacosmos Therapeutics Inc.\" \"Getinge USA Sales, LLC\" \"Agiliti Health, Inc.\" \"OrthoScan, Inc.\" payer_id < integer > Paying entity's unique Open Payments ID pay_form < character > Form payment, examples: \"Stock option\" \"Cash cash equivalent\" \"-kind items services\" pay_nature < character > Nature payment transfer value; examples: \"Royalty License\" \"Charitable Contribution\" \"Current prospective ownership investment interest\" \"Food Beverage\" offset < integer > offset; API pagination tidy < boolean > Tidy output; default TRUE. pivot < boolean > Pivot output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open Payments — open_payments","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/open_payments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open Payments — open_payments","text":"","code":"if (FALSE) { # interactive() open_payments(year = 2021, npi = 1043218118) open_payments(pay_nature = \"Royalty or License\") open_payments(pay_form = \"Stock option\") open_payments(payer = \"Adaptive Biotechnologies Corporation\") open_payments(teaching_hospital = \"Nyu Langone Hospitals\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Providers That Have Opted Out of Medicare — opt_out","title":"Providers That Have Opted Out of Medicare — opt_out","text":"opt_out() allows search information providers decided participate Medicare.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"opting-out","dir":"Reference","previous_headings":"","what":"Opting Out","title":"Providers That Have Opted Out of Medicare — opt_out","text":"Providers wish enroll Medicare program may “opt-” Medicare. means neither physician, beneficiary submits bill Medicare services rendered. Instead, beneficiary pays physician --pocket neither party reimbursed Medicare. private contract signed physician beneficiary states neither one can receive payment Medicare services performed. opt , provider must: eligible specialty type Submit opt-affidavit Medicare Enter private contract Medicare patients, reflecting agreement pay --pocket services, one submit bill Medicare reimbursement Contact Medicare Administrative Contractor (MAC) instruction information included opt-affidavit private contract","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"opt-out-periods","dir":"Reference","previous_headings":"","what":"Opt-Out Periods","title":"Providers That Have Opted Out of Medicare — opt_out","text":"Opt-periods last two years terminated early unless provider opting first time terminates opt-later 90 days opt-period's effective date. Opt-statuses effective two years automatically renew every two years. Providers want extend opt-status end opt-period may cancel notifying Medicare contractors affidavit filed least 30 days prior start next opt-period. provider retires, surrenders license, longer wants participate Medicare program, must officially withdraw within 90 days. DMEPOS suppliers must withdraw within 30 days. Providers may opt-intend Medicare Advantage (Part C) provider furnish services covered traditional Medicare fee--service (Part B).","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"links-","dir":"Reference","previous_headings":"","what":"Links:","title":"Providers That Have Opted Out of Medicare — opt_out","text":"Medicare Opt Affidavits API Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Providers That Have Opted Out of Medicare — opt_out","text":"","code":"opt_out(   npi = NULL,   first = NULL,   last = NULL,   specialty = NULL,   address = NULL,   city = NULL,   state = NULL,   zip = NULL,   order_refer = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Providers That Have Opted Out of Medicare — opt_out","text":"npi < integer > 10-digit national provider identifier first, last < character > Opt-provider's first/last name specialty < character > Opt-provider's specialty address < character > Opt-provider's address city < character > Opt-provider's city state < character > Opt-provider's state abbreviation zip < character > Opt-provider's zip code order_refer < boolean > Indicates provider eligible order refer tidy < boolean > Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Providers That Have Opted Out of Medicare — opt_out","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/opt_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Providers That Have Opted Out of Medicare — opt_out","text":"","code":"opt_out(npi = 1043522824) #> # A tibble: 1 × 12 #>   npi        first last  specialty order_refer optout_start_date optout_end_date #>   <chr>      <chr> <chr> <chr>     <lgl>       <date>            <date>          #> 1 1043522824 James Smith Nurse Pr… TRUE        2019-07-01        2025-07-01      #> # ℹ 5 more variables: last_updated <date>, address <chr>, city <chr>, #> #   state <chr>, zip <chr>  if (FALSE) { # interactive() # For opt-out providers that are eligible to order and refer, # use `order_refer()` to look up their eligibility status:  opt_out(npi = 1043522824) |>         pull(npi) |>         map(\\(x) order_refer(npi = x)) |>         list_rbind() }"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":null,"dir":"Reference","previous_headings":"","what":"Order and Referral Eligibility — order_refer","title":"Order and Referral Eligibility — order_refer","text":"order_refer() returns provider's eligibility status concerning ordering referring within Medicare : Part B: Clinical Laboratory Services, Imaging Services DME: Durable Medical Equipment, Prosthetics, Orthotics, Supplies (DMEPOS) Part : Home Health Services eligible, provider must: Individual NPI enrolled Medicare either Approved Opt-status Eligible Specialty type Ordering Providers can order non-physician services patients. Referring (Certifying) Providers can request items services Medicare may reimburse behalf beneficiaries. Opt-Providers: Providers opted Medicare may still order refer. can also enroll solely order refer. Links: Medicare Order Referring API CMS.gov: Ordering & Certifying Order Referring Methodology Update Frequency: Twice Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order and Referral Eligibility — order_refer","text":"","code":"order_refer(   npi = NULL,   first = NULL,   last = NULL,   partb = NULL,   dme = NULL,   hha = NULL,   pmd = NULL,   tidy = TRUE,   pivot = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order and Referral Eligibility — order_refer","text":"npi < integer > 10-digit national provider identifier first, last < character > Individual provider's first/last name partb, dme, hha, pmd < boolean > Whether provider eligible order refer : partb: Medicare Part B dme: Durable Medical Equipment hha: Home Health Agency pmd: Power Mobility Devices tidy < boolean > Tidy output; default TRUE pivot < boolean > Pivot output; default TRUE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order and Referral Eligibility — order_refer","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/order_refer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order and Referral Eligibility — order_refer","text":"","code":"order_refer(npi = 1003026055) #> # A tibble: 4 × 4 #>   npi        first   last   service                   #>   <chr>      <chr>   <chr>  <chr>                     #> 1 1003026055 RADHIKA PHADKE Medicare Part B           #> 2 1003026055 RADHIKA PHADKE Home Health Agency        #> 3 1003026055 RADHIKA PHADKE Durable Medical Equipment #> 4 1003026055 RADHIKA PHADKE Power Mobility Devices     ## Filter for certain privileges order_refer(last = \"Smith\", partb = FALSE, hha = TRUE) #> # A tibble: 6 × 4 #>   npi        first last  service                   #>   <chr>      <chr> <chr> <chr>                     #> 1 1215946959 LISA  SMITH Home Health Agency        #> 2 1215946959 LISA  SMITH Durable Medical Equipment #> 3 1215946959 LISA  SMITH Power Mobility Devices    #> 4 1619457686 NAKIA SMITH Home Health Agency        #> 5 1619457686 NAKIA SMITH Durable Medical Equipment #> 6 1619457686 NAKIA SMITH Power Mobility Devices"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":null,"dir":"Reference","previous_headings":"","what":"Providers with Pending Medicare Enrollment Applications — pending","title":"Providers with Pending Medicare Enrollment Applications — pending","text":"pending() allows search physicians & non-physicians pending Medicare enrollment applications.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"links-","dir":"Reference","previous_headings":"","what":"Links:","title":"Providers with Pending Medicare Enrollment Applications — pending","text":"Medicare Pending Initial Logging Tracking Physicians API Medicare Pending Initial Logging Tracking Non-Physicians API Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Providers with Pending Medicare Enrollment Applications — pending","text":"","code":"pending(type, npi = NULL, last_name = NULL, first_name = NULL, tidy = TRUE)"},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Providers with Pending Medicare Enrollment Applications — pending","text":"type physician non-physician npi National Provider Identifier (NPI) number last_name Last name provider first_name First name provider tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Providers with Pending Medicare Enrollment Applications — pending","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/pending.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Providers with Pending Medicare Enrollment Applications — pending","text":"","code":"if (FALSE) { # interactive() pending(last_name = \"Smith\", type = \"non-physician\") pending(first_name = \"John\", type = \"physician\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/provider-package.html","id":null,"dir":"Reference","previous_headings":"","what":"provider: Access Public Healthcare Provider Data — provider-package","title":"provider: Access Public Healthcare Provider Data — provider-package","text":"Provides various features facilitate easy access publicly available healthcare provider data. Includes functions tidy data accessed, whether reporting purposes updating internal records.","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/provider-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"provider: Access Public Healthcare Provider Data — provider-package","text":"Maintainer: Andrew Bruce andrewbruce.himni@gmail.com [copyright holder]","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":null,"dir":"Reference","previous_headings":"","what":"Provider Enrollment in Medicare — providers","title":"Provider Enrollment in Medicare — providers","text":"providers() allows access enrollment level data individual organizational providers actively approved bill Medicare. Links: Provider Enrollment API Provider Enrollment Data Dictionary Update Frequency: Quarterly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provider Enrollment in Medicare — providers","text":"","code":"providers(   npi = NULL,   pac = NULL,   enroll_id = NULL,   specialty_code = NULL,   specialty_description = NULL,   first = NULL,   middle = NULL,   last = NULL,   organization = NULL,   state = NULL,   gender = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provider Enrollment in Medicare — providers","text":"npi < integer > 10-digit national provider identifier pac < integer > 10-digit provider associate level variable. Links entity-level information may associated multiple enrollment IDs individual organization enrolled multiple times. enroll_id < character > 15-digit provider enrollment ID. Assigned new provider enrollment application. Links enrollment-level information (enrollment type, state, reassignment benefits). specialty_code < character > Enrollment primary specialty type code specialty_description < character > Enrollment specialty type description first, middle, last < character > Individual provider's first/middle/last name organization < character > Organizational provider's name state < character > Enrollment state abbreviation/full name. Providers enroll state level, PAC ID can associated multiple enrollment IDs states. gender < character > Individual provider's gender. Options : \"F\": Female \"M\": Male \"9\": Unknown (Organizational provider) tidy < boolean > Tidy output; default TRUE. na.rm < boolean > Remove empty rows columns; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provider Enrollment in Medicare — providers","text":"tibble columns:","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/providers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provider Enrollment in Medicare — providers","text":"","code":"if (FALSE) { # interactive() providers(npi = 1417918293, specialty_code = \"14-41\") providers(pac = 2860305554, gender = \"9\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Payment Program Experience — quality_payment","title":"Quality Payment Program Experience — quality_payment","text":"Information participation performance Merit-based Incentive Payment System (MIPS) Advanced Alternative Payment Models (APMs) tracks. Data pulled across CMS used create eligibility determination clinician. Using CMS knows clinician billing patterns enrollments, eligibility \"calculated\" multiple times performance year. Data pulled across CMS used create eligibility determination clinician. Using CMS knows clinician billing patterns enrollments, eligibility \"calculated\" multiple times performance year.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Payment Program Experience — quality_payment","text":"","code":"quality_payment(   year,   npi = NULL,   state = NULL,   specialty = NULL,   participation_type = NULL,   tidy = TRUE )  quality_eligibility(year, npi = NULL, tidy = TRUE)  quality_stats(year)"},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Payment Program Experience — quality_payment","text":"year QPP program year npi NPI assigned clinician enrolled Medicare. state State US territory code location TIN associated clinician. specialty specialty description identifier corresponding type service clinician submitted Medicare Part B claims TIN/NPI combination. participation_type Indicates level performance data collected, submitted reported final score attributed clinician. information drives data displayed remaining fields report. tidy Tidy output; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Payment Program Experience — quality_payment","text":"tibble containing search results. tibble containing search results. tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quality Payment Program Experience — quality_payment","text":"Quality Payment Program (QPP) Experience dataset provides participation performance information Merit-based Incentive Payment System (MIPS) performance year. cover eligibility participation, performance categories, final score payment adjustments. dataset provides additional details TIN/NPI level published previous performance year. can sort data variables like clinician type, practice size, scores, payment adjustments. Quality Payment Program (QPP) Eligibility System pulls together data across Centers Medicare Medicaid Services (CMS) create eligibility determination every clinician system. Using CMS knows clinician billing patterns enrollments, eligibility \"calculated\" multiple times performance year. Information can obtained primarily Clinician type. can query Clinician type passing National Provider Identifier, NPI. number unique 10-digit identification number issued health care providers United States CMS. information contained endpoints includes basic enrollment information, associated organizations, information organizations, individual group special status information, future, available Alternative Payment Model (APM) affiliations.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Quality Payment Program Experience — quality_payment","text":"Quality Payment Program Experience QPP Eligibility API Documentation QPP Eligibility API Documentation","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"update-frequency","dir":"Reference","previous_headings":"","what":"Update Frequency","title":"Quality Payment Program Experience — quality_payment","text":"Annually Annually Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/quality_payment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality Payment Program Experience — quality_payment","text":"","code":"if (FALSE) { # interactive() quality_payment(year = 2020, npi = 1144544834) } if (FALSE) { # interactive() quality_eligibility(year = 2020, npi = 1144544834) } quality_stats(year = 2020) #> # A tibble: 4 × 4 #>    year type       stat                     value #>   <int> <chr>      <chr>                    <dbl> #> 1  2020 Individual HCC Risk Score Average   2.50  #> 2  2020 Individual Dual Eligibility Average 0.507 #> 3  2020 Group      HCC Risk Score Average   2.53  #> 4  2020 Group      Dual Eligibility Average 0.501"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Due Date List API — revalidation_date","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Information revalidation due dates Medicare providers. Medicare Providers must validate enrollment record every three five years. CMS sets every Provider’s Revalidation due date end month posts upcoming six seven months due dates online. due date ‘TBD’ means CMS set due date yet. lists refreshed every two months two months’ worth due dates appended list","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"revalidation_date(   npi = NULL,   enroll_id = NULL,   first = NULL,   last = NULL,   organization = NULL,   state = NULL,   enrollment_type = NULL,   specialty_description = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"npi < integer > 10-digit national provider identifier enroll_id < character > 15-digit provider enrollment ID first, last < character > Individual provider's first/last name organization < character > Organizational provider's legal business name state < character > Enrollment state enrollment_type < integer > Provider enrollment type: 1: Part 2: DME 3: Non-DME Part B specialty_description < character > Enrollment specialty tidy Tidy output; default TRUE na.rm < boolean > Remove empty rows columns; default TRUE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"Revalidation Due Date List dataset contains revalidation due dates Medicare providers due revalidate following six months. provider's due date fall within ensuing six months, due date marked 'TBD'. addition dataset also includes subfiles reassignment information given provider well due date listings clinics group practices providers. Links: Medicare Revalidation Due Date API Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Due Date List API — revalidation_date","text":"","code":"if (FALSE) { # interactive() revalidation_date(enroll_id = \"I20031110000070\") revalidation_date(enroll_id = \"O20110620000324\") revalidation_date(state = \"FL\", enrollment_type = 3, specialty = \"General Practice\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Reassignments Providers due Revalidation.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"revalidation_reassign(   npi = NULL,   pac_ind = NULL,   enroll_id_ind = NULL,   first = NULL,   last = NULL,   state_ind = NULL,   specialty_description = NULL,   organization = NULL,   pac_org = NULL,   enroll_id_org = NULL,   state_org = NULL,   record_type = NULL,   tidy = TRUE,   na.rm = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"npi < integer > 10-digit national provider identifier individual provider reassigning benefits employee pac_ind < integer > 10-digit provider associate level variable individual provider reassigning benefits employee enroll_id_ind < character > 15-digit enrollment ID individual provider reassigning benefits employee first, last < character > First/last name individual provider reassigning benefits employee state_ind < character > Enrollment state individual provider reassigning benefits employee specialty_description < character > Enrollment specialty individual provider reassigning benefits employee organization < character > Legal business name organizational provider receiving reassignment employer pac_org < integer > 10-digit provider associate level variable organizational provider receiving reassignment employer enroll_id_org Enrollment ID organizational provider receiving reassignment employer state_org < character > Enrollment state organizational provider receiving reassignment employer record_type < character > Identifies whether record reassignment (\"Reassignment\") employment (\"Physician Assistant\") tidy < boolean > Tidy output; default TRUE. na.rm < boolean > Remove empty rows columns; default TRUE.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"Revalidation Reassignment List dataset provides information reassignments providers due revalidation. Links: Medicare Revalidation Reassignment List API Update Frequency: Monthly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/revalidation_reassign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the Medicare Revalidation Reassignment List API — revalidation_reassign","text":"","code":"if (FALSE) { # interactive() revalidation_reassign(enroll_id_ind = \"I20200929003184\") revalidation_reassign(pac_ind = 9830437441) revalidation_reassign(pac_org = 3173525888) }"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomy to Medicare Specialty Crosswalk — taxonomy_crosswalk","title":"Taxonomy to Medicare Specialty Crosswalk — taxonomy_crosswalk","text":"taxonomy_crosswalk() allows search types providers suppliers eligible Medicare programs taxonomy code Medicare specialty type code.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"taxonomy-codes","dir":"Reference","previous_headings":"","what":"Taxonomy Codes","title":"Taxonomy to Medicare Specialty Crosswalk — taxonomy_crosswalk","text":"Healthcare Provider Taxonomy Code Set hierarchical HIPAA standard code set designed categorize type, classification, specialization health care providers. consists two sections: Individuals Groups Individuals Non-Individuals applying NPI, provider must report taxonomy closely describes type/classification/specialization. situations, provider may need report one taxonomy must indicate one primary. codes selected may categorizations used Medicare enrollment. Links: Provider Supplier Taxonomy Crosswalk Taxonomy Crosswalk Methodology Find Taxonomy Code Update Frequency: Weekly","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomy to Medicare Specialty Crosswalk — taxonomy_crosswalk","text":"","code":"taxonomy_crosswalk(   taxonomy_code = NULL,   taxonomy_description = NULL,   specialty_code = NULL,   specialty_description = NULL,   keyword_search = NULL,   tidy = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxonomy to Medicare Specialty Crosswalk — taxonomy_crosswalk","text":"taxonomy_code < character > 10-digit taxonomy code taxonomy_description < character > Provider's taxonomy description specialty_code < character > Medicare specialty code specialty_description < character > Medicare provider/supplier type keyword_search < character > Search term use quick full-text search. tidy < boolean > Tidy output; default TRUE","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxonomy to Medicare Specialty Crosswalk — taxonomy_crosswalk","text":"tibble columns:","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/taxonomy_crosswalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxonomy to Medicare Specialty Crosswalk — taxonomy_crosswalk","text":"","code":"if (FALSE) { # interactive() taxonomy_crosswalk(keyword_search = \"B4\") taxonomy_crosswalk(keyword_search = \"Histocompatibility\") taxonomy_crosswalk(specialty_description = \"Rehabilitation Agency\") taxonomy_crosswalk(taxonomy_code = \"2086S0102X\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilization Statistics for Medicare Part B Providers — utilization","title":"Utilization Statistics for Medicare Part B Providers — utilization","text":"functions allow user access information services procedures provided Original Medicare (fee--service) Part B beneficiaries physicians healthcare professionals; aggregated provider, service geography.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilization Statistics for Medicare Part B Providers — utilization","text":"","code":"by_provider(   year,   npi = NULL,   first = NULL,   last = NULL,   organization = NULL,   credential = NULL,   gender = NULL,   entype = NULL,   city = NULL,   state = NULL,   zip = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par = NULL,   tidy = TRUE )  by_service(   year,   npi = NULL,   first = NULL,   last = NULL,   organization = NULL,   credential = NULL,   gender = NULL,   entype = NULL,   city = NULL,   state = NULL,   zip = NULL,   fips = NULL,   ruca = NULL,   country = NULL,   specialty = NULL,   par = NULL,   hcpcs_code = NULL,   drug = NULL,   pos = NULL,   tidy = TRUE,   rbcs = TRUE )  by_geography(   year,   state = NULL,   hcpcs_code = NULL,   pos = NULL,   level = NULL,   fips = NULL,   hcpcs_desc = NULL,   drug = NULL,   tidy = TRUE,   rbcs = TRUE )"},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilization Statistics for Medicare Part B Providers — utilization","text":"year < integer > // required Year YYYY format. Run helper function prac_years() return vector years currently available. npi < integer > 10-digit national provider identifier first, last < character > Individual provider's name organization < character > Organizational provider's name credential < character > Individual provider's credentials gender < character > Individual provider's gender; \"F\" (Female), \"M\" (Male) entype < character > Provider entity type; \"\" (Individual), \"O\" (Organization) city < character > City provider located state < character > State provider located, reported NPPES. Values include 50 United States, District Columbia, U.S. territories, Armed Forces areas, Unknown Foreign Country. Data aggregated National level identified word 'National'. zip < character > Provider’s zip code fips < character > FIPS code referring provider state. variable blank reported national level. ruca < character > Rural-Urban Commuting Area Code (RUCA): - Metro Area Core - \"1\": Primary flow within Urbanized Area (UA) - \"1.1\": Secondary flow 30-50% larger UA - Metro Area High Commuting - \"2\": Primary flow 30% UA - \"2.1\": Secondary flow 30-50% larger UA - Metro Area Low Commuting - 3: Primary flow 10-30% UA - Micro Area Core - 4: Primary flow within large Urban Cluster (10k - 49k) - 4.1: Secondary flow 30-50% UA - Micro High Commuting - 5: Primary flow 30% large UC - 5.1: Secondary flow 30-50% UA - Micro Low Commuting - 6: Primary flow 10-30% large UC - Small Town Core - 7: Primary flow within small UC (2.5k - 9.9k) - 7.1: Secondary flow 30-50% UA - 7.2: Secondary flow 30-50% large UC - Small Town High Commuting - 8: Primary flow 30% small UC - 8.1: Secondary flow 30-50% UA - 8.2: Secondary flow 30-50% large UC - Small Town Low Commuting - 9: Primary flow 10-30% small UC - Rural Areas - 10: Primary flow tract outside UA UC - 10.1: Secondary flow 30-50% UA - 10.2: Secondary flow 30-50% large UC - 10.3: Secondary flow 30-50% small UC - 99: Zero population rural-urban identifier information country < character > Country provider located. specialty < character > Provider specialty code reported largest number claims submitted. par Identifies whether provider participates Medicare /accepts assignment Medicare allowed amounts. value Y provider least one claim identifying provider participating Medicare accepting assignment Medicare allowed amounts within HCPCS code place service. non-participating provider may elect accept Medicare allowed amounts services accept Medicare allowed amounts services. tidy < boolean > Tidy output; default TRUE hcpcs_code < character > HCPCS code used identify specific medical service furnished provider. drug < boolean > Flag identifies whether HCPCS code specific service furnished provider HCPCS listed Medicare Part B Drug Average Sales Price (ASP) File. pos < character > Identifies whether place service submitted claims facility (\"F\") non-facility (\"O\"). Non-facility generally office setting; however entities included non-facility. rbcs < boolean > Add Restructured BETOS Classifications HCPCS codes; default TRUE level < character > Level geography data aggregated. State indicates data aggregated single state identified Rendering Provider State column. National indicates data aggregated across states given HCPCS Code Level. hcpcs_desc < character > Description HCPCS code specific medical service furnished provider.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilization Statistics for Medicare Part B Providers — utilization","text":"tibble containing search results. tibble containing search results. tibble containing search results.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"by-provider-","dir":"Reference","previous_headings":"","what":"by_provider()","title":"Utilization Statistics for Medicare Part B Providers — utilization","text":"Provider Service dataset allows user access data services procedures performed; charges submitted payment received; beneficiary demographic health characteristics providers treating Original Medicare (fee--service) Part B beneficiaries, aggregated year.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"by-service-","dir":"Reference","previous_headings":"","what":"by_service()","title":"Utilization Statistics for Medicare Part B Providers — utilization","text":"Provider Service dataset aggregated following: NPI performing provider, Healthcare Common Procedure Coding System (HCPCS) code, place service (either facility non-facility). can multiple records given NPI based number distinct HCPCS codes billed services provided. Data aggregated based place service separate fee schedules apply depending whether place service submitted claim facility non-facility.","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"by-geography-","dir":"Reference","previous_headings":"","what":"by_geography()","title":"Utilization Statistics for Medicare Part B Providers — utilization","text":"Geography Service subset contains information utilization, allowed amount, Medicare payment, submitted charges organized nationally state-wide HCPCS code place service. Links: Medicare Physician & Practitioners: Provider API Medicare Physician & Practitioners: Provider Service API Medicare Physician & Practitioners: Geography Service API Update Frequency: Annually","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/utilization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilization Statistics for Medicare Part B Providers — utilization","text":"","code":"if (FALSE) { # interactive() by_provider(year = 2020, npi = 1003000423)  # Use the years helper function to retrieve results for every year: prac_years() |> map(\\(x) by_provider(year = x, npi = 1043477615)) |> list_rbind()  by_service(year = 2019, npi = 1003000126)  by_geography(year = 2020, hcpcs_code = \"0002A\") }"},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":null,"dir":"Reference","previous_headings":"","what":"Years Currently Searchable for APIs — years","title":"Years Currently Searchable for APIs — years","text":"Years Currently Searchable APIs","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Years Currently Searchable for APIs — years","text":"","code":"open_years()  prac_years()  cc_years()  quality_years()  bene_years(period = c(\"year\", \"month\"))"},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Years Currently Searchable for APIs — years","text":"period One \"year\" \"month\"","code":""},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Years Currently Searchable for APIs — years","text":"integer vector years available search","code":""},{"path":[]},{"path":"https://andrewallenbruce.github.io/provider/reference/years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Years Currently Searchable for APIs — years","text":"","code":"if (FALSE) { # interactive() bene_years(\"year\") bene_years(\"month\") open_years() prac_years() cc_years() quality_years() }"},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009012-2023-03-23","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9012 (2023-03-23)","title":"provider 0.0.0.9012 (2023-03-23)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009011-2023-02-27","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9011 (2023-02-27)","title":"provider 0.0.0.9011 (2023-02-27)","text":"nppes_npi_new implementation","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009010-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9010 (2023-02-08)","title":"provider 0.0.0.9010 (2023-02-08)","text":"added hospital_enrollment() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009009-2023-02-08","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9009 (2023-02-08)","title":"provider 0.0.0.9009 (2023-02-08)","text":"implemented cms_update_ids() applicable functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009008-2023-02-07","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9008 (2023-02-07)","title":"provider 0.0.0.9008 (2023-02-07)","text":"added addl_phone_numbers() function added nucc_taxonomy_230 dataset added examples new functions","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009007-2023-02-04","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9007 (2023-02-04)","title":"provider 0.0.0.9007 (2023-02-04)","text":"doctors_and_clinicians() function facility_affiliations() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009006-2023-02-03","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9006 (2023-02-03)","title":"provider 0.0.0.9006 (2023-02-03)","text":"pending_applications() function","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009005-2023-01-22","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9005 (2023-01-22)","title":"provider 0.0.0.9005 (2023-01-22)","text":"nesting larger outputs","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009004-2023-01-21","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9004 (2023-01-21)","title":"provider 0.0.0.9004 (2023-01-21)","text":"initial implementation distribution id update functions open_payments() vignette","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009003-2023-01-16","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9003 (2023-01-16)","title":"provider 0.0.0.9003 (2023-01-16)","text":"open_payments() function added","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009002-2023-01-05","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9002 (2023-01-05)","title":"provider 0.0.0.9002 (2023-01-05)","text":"previous version.","code":""},{"path":"https://andrewallenbruce.github.io/provider/news/index.html","id":"provider-0009001-2022-08-31","dir":"Changelog","previous_headings":"","what":"provider 0.0.0.9001 (2022-08-31)","title":"provider 0.0.0.9001 (2022-08-31)","text":"Updated README.","code":""}]
