% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculations.R
\name{calculations}
\alias{calculations}
\alias{change}
\alias{years_df}
\alias{years_vec}
\alias{duration_vec}
\alias{summary_stats}
\title{Utility Functions}
\usage{
change(df, cols, digits = 3)

years_df(df, date_col)

years_vec(date_col)

duration_vec(date_col)

summary_stats(
  df,
  condition = NULL,
  group_vars = NULL,
  summary_vars = NULL,
  arr = NULL,
  digits = 3
)
}
\arguments{
\item{df}{data frame}

\item{cols}{numeric columns}

\item{digits}{Number of digits to round to, default is 3}

\item{date_col}{date column}

\item{condition}{filter condition, i.e. \code{patient == "new"}}

\item{group_vars}{variables to group by, i.e. \code{c(specialty, state, hcpcs, cost)}}

\item{summary_vars}{variables to summarise, i.e. \code{c(min, max, mode, range)}}

\item{arr}{column to arrange data by, i.e. \code{cost}}
}
\value{
\code{\link[=tibble]{tibble()}} or vector
}
\description{
Common utility functions

Returns a tibble of summary stats
}
\examples{
## Lagged Calculations

ex <- dplyr::tibble(
              year = rep(2020:2021, each = 4),
              grp = rep(c("a", "b"), 4),
              pay = sample(1000:2000, 8))
ex

# `change()` # Change, percentage change, and cumulative sum

dplyr::filter(ex, grp == "a") |>
change(c(pay))

# When performing a `group_by()`, watch for
# the correct order of the variables

dplyr::arrange(ex, year) |>
dplyr::group_by(grp) |>
change(c(pay))

# `chg()` # Change over a vector

dplyr::filter(ex, grp == "a") |>
dplyr::mutate(change = chg(pay))

# `pct()` # Percentage change over a vector

dplyr::filter(ex, grp == "a") |>
dplyr::mutate(pct_change = pct(pay))

# `ror()` # Rate of return

dplyr::filter(ex, grp == "a") |>
ror(pay)

# `geomean()` # Geometric mean

dplyr::filter(ex, grp == "a") |>
ror(pay) |>
dplyr::summarise(gmean = geomean(pay_ror))

# `change_year()` # Lagged change by column

dplyr::filter(ex, grp == "a") |>
change_year(pay, year)


## Calculating Timespans
dt <- dplyr::tibble(date = lubridate::today() - 366)
dt

# `years_df()`/`years_vec()` # Years passed

years_df(dt, date)

dplyr::mutate(dt, years = years_vec(date))

# `duration_vec()` # Duration since date

dplyr::mutate(dt, dur = duration_vec(date))


## Summary Statistics
sm <- dplyr::tibble(provider = sample(c("A", "B", "C"), size = 200, replace = TRUE),
                    city = sample(c("ATL", "NYC"), size = 200, replace = TRUE),
                    charges = sample(1000:2000, size = 200),
                    payment = sample(1000:2000, size = 200))

head(sm)

summary_stats(sm,
              condition = city == "ATL",
              group_vars = provider,
              summary_vars = c(charges, payment),
              arr = provider)

}
\keyword{internal}
