% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculations.R
\name{calculations}
\alias{calculations}
\alias{change}
\alias{chg}
\alias{pct}
\alias{ror}
\alias{geomean}
\alias{years_df}
\alias{years_vec}
\alias{duration_vec}
\alias{make_interval}
\alias{summary_stats}
\alias{gen_data}
\title{Utility Functions}
\usage{
change(df, cols, csm = NULL, digits = 5)

chg(x, n = 1L, fill_na = 0L)

pct(x, n = 1L, fill_na = 0L)

ror(df, col, n = 1L)

geomean(x)

years_df(df, date_col)

years_vec(date_col)

duration_vec(date_col)

make_interval(df, start, end = lubridate::today())

summary_stats(
  df,
  condition = NULL,
  group_vars = NULL,
  summary_vars = NULL,
  arr = NULL,
  digits = 3
)

gen_data(years)
}
\arguments{
\item{df}{data frame}

\item{cols}{numeric columns to calculate absolute/relative change & rate of return}

\item{csm}{numeric cols to calculate cumulative sum for}

\item{digits}{Number of digits to round to, default is 3}

\item{x}{numeric vector}

\item{n}{values to offset}

\item{fill_na}{fill value for any NAs; default is 0}

\item{col}{numeric column}

\item{date_col}{date column}

\item{start}{start date column}

\item{end}{end date column}

\item{condition}{filter condition, i.e. \code{patient == "new"}}

\item{group_vars}{variables to group by, i.e. \code{c(specialty, state, hcpcs, cost)}}

\item{summary_vars}{variables to summarise, i.e. \code{c(min, max, mode, range)}}

\item{arr}{column to arrange data by, i.e. \code{cost}}

\item{years}{sequence of years, e.g. \code{2010:2020}}
}
\value{
\code{\link[=tibble]{tibble()}} or vector

tibble
}
\description{
Common utility functions
}
\examples{
# Example data
ex <- gen_data(2020:2025)
head(ex)

# Lagged absolute/percentage change, rate of return and cumulative sum
# `change()`
dplyr::filter(ex, group == "A") |>
change(pay)

# `geomean()` # Geometric mean
ex |>
dplyr::filter(group == "A") |>
ror(pay) |>
dplyr::summarise(gmean = geomean(pay_ror))

# When performing a `group_by()`, watch for
# the correct order of the variables
ex |>
dplyr::group_by(group) |>
change(pay)

ex |>
dplyr::group_by(group) |>
change(pay) |>
dplyr::summarise(mean_pay = mean(pay, na.rm = TRUE),
                 csm_chg  = sum(pay_chg),
                 csm_pct  = sum(pay_pct),
                 mean_ror = mean(pay_ror, na.rm = TRUE),
                 geomean  = geomean(pay_ror))

# Timespans
dt <- dplyr::tibble(date = lubridate::today() - 366)

# `years_df()`
years_df(dt, date)

# `duration_vec()`
dplyr::mutate(dt, dur = duration_vec(date))

# `make_interval()`
dplyr::tibble(date = lubridate::today() - 1000) |>
make_interval(start = date, end = lubridate::today() - 500)


# `summary_stats()`
sm <- dplyr::tibble(provider = sample(c("A", "B", "C"), size = 200, replace = TRUE),
                    city = sample(c("ATL", "NYC"), size = 200, replace = TRUE),
                    charges = sample(1000:2000, size = 200),
                    payment = sample(1000:2000, size = 200))

head(sm)

summary_stats(sm,
              condition    = city == "ATL",
              group_vars   = provider,
              summary_vars = c(charges, payment),
              arr          = provider)

\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dplyr::filter(ex, group == "A") |>
change(pay)
\dontshow{\}) # examplesIf}
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dplyr::filter(ex, group == "A") |>
dplyr::mutate(change = chg(pay))
\dontshow{\}) # examplesIf}
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dplyr::filter(ex, group == "A") |>
dplyr::mutate(pct_change = pct(pay))
\dontshow{\}) # examplesIf}
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dplyr::filter(ex, group == "A") |>
ror(pay)

ex |>
dplyr::group_by(group) |>
ror(pay)
\dontshow{\}) # examplesIf}
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dplyr::filter(ex, group == "A") |>
ror(pay) |>
dplyr::summarise(gmean = geomean(pay_ror))

ex |>
dplyr::group_by(group) |>
ror(pay) |>
dplyr::summarise(gmean = geomean(pay_ror))
\dontshow{\}) # examplesIf}
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dt <- dplyr::tibble(date = lubridate::today() - 366)
dplyr::mutate(dt, years = years_vec(date))
\dontshow{\}) # examplesIf}
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dplyr::tibble(date = lubridate::today() - 366,
              date2 = date - 789) |>
dplyr::mutate(dur = duration_vec(date),
              dur2 = duration_vec(date2))
\dontshow{\}) # examplesIf}
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dt <- dplyr::tibble(date = lubridate::today() - 366)
make_interval(dt, start = lubridate::today() - 1000)
\dontshow{\}) # examplesIf}
}
\keyword{internal}
